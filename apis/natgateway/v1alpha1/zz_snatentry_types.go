// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SNATEntryInitParameters struct {

	// Specifies whether to enable EIP affinity. Default value: 0. Valid values:
	EIPAffinity *float64 `json:"eipAffinity,omitempty" tf:"eip_affinity,omitempty"`

	// The name of the SNAT entry. The name must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://.
	SnatEntryName *string `json:"snatEntryName,omitempty" tf:"snat_entry_name,omitempty"`

	// The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). NOTE: From version 1.241.0, snat_ip can be modified.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/eip/v1alpha1.EIPAddress
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("ip_address",false)
	SnatIP *string `json:"snatIp,omitempty" tf:"snat_ip,omitempty"`

	// Reference to a EIPAddress in eip to populate snatIp.
	// +kubebuilder:validation:Optional
	SnatIPRef *v1.Reference `json:"snatIpRef,omitempty" tf:"-"`

	// Selector for a EIPAddress in eip to populate snatIp.
	// +kubebuilder:validation:Optional
	SnatIPSelector *v1.Selector `json:"snatIpSelector,omitempty" tf:"-"`

	// The ID of the SNAT table.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/natgateway/v1alpha1.NATGateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("snat_table_ids",true)
	SnatTableID *string `json:"snatTableId,omitempty" tf:"snat_table_id,omitempty"`

	// Reference to a NATGateway in natgateway to populate snatTableId.
	// +kubebuilder:validation:Optional
	SnatTableIDRef *v1.Reference `json:"snatTableIdRef,omitempty" tf:"-"`

	// Selector for a NATGateway in natgateway to populate snatTableId.
	// +kubebuilder:validation:Optional
	SnatTableIDSelector *v1.Selector `json:"snatTableIdSelector,omitempty" tf:"-"`

	// The source CIDR block specified in the SNAT entry.
	SourceCidr *string `json:"sourceCidr,omitempty" tf:"source_cidr,omitempty"`

	// The ID of the vSwitch.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/vpc/v1alpha1.Vswitch
	SourceVswitchID *string `json:"sourceVswitchId,omitempty" tf:"source_vswitch_id,omitempty"`

	// Reference to a Vswitch in vpc to populate sourceVswitchId.
	// +kubebuilder:validation:Optional
	SourceVswitchIDRef *v1.Reference `json:"sourceVswitchIdRef,omitempty" tf:"-"`

	// Selector for a Vswitch in vpc to populate sourceVswitchId.
	// +kubebuilder:validation:Optional
	SourceVswitchIDSelector *v1.Selector `json:"sourceVswitchIdSelector,omitempty" tf:"-"`
}

type SNATEntryObservation struct {

	// Specifies whether to enable EIP affinity. Default value: 0. Valid values:
	EIPAffinity *float64 `json:"eipAffinity,omitempty" tf:"eip_affinity,omitempty"`

	// It formats as <snat_table_id>:<snat_entry_id>.
	// -> NOTE: Before provider version 1.37.0, it formats as <snat_entry_id>
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The id of the snat entry on the server.
	SnatEntryID *string `json:"snatEntryId,omitempty" tf:"snat_entry_id,omitempty"`

	// The name of the SNAT entry. The name must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://.
	SnatEntryName *string `json:"snatEntryName,omitempty" tf:"snat_entry_name,omitempty"`

	// The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). NOTE: From version 1.241.0, snat_ip can be modified.
	SnatIP *string `json:"snatIp,omitempty" tf:"snat_ip,omitempty"`

	// The ID of the SNAT table.
	SnatTableID *string `json:"snatTableId,omitempty" tf:"snat_table_id,omitempty"`

	// The source CIDR block specified in the SNAT entry.
	SourceCidr *string `json:"sourceCidr,omitempty" tf:"source_cidr,omitempty"`

	// The ID of the vSwitch.
	SourceVswitchID *string `json:"sourceVswitchId,omitempty" tf:"source_vswitch_id,omitempty"`

	// (Available since v1.119.1) The ID of the SNAT entry.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type SNATEntryParameters struct {

	// Specifies whether to enable EIP affinity. Default value: 0. Valid values:
	// +kubebuilder:validation:Optional
	EIPAffinity *float64 `json:"eipAffinity,omitempty" tf:"eip_affinity,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The name of the SNAT entry. The name must be 2 to 128 characters in length. It must start with a letter but cannot start with http:// or https://.
	// +kubebuilder:validation:Optional
	SnatEntryName *string `json:"snatEntryName,omitempty" tf:"snat_entry_name,omitempty"`

	// The IP of a SNAT entry. Separate multiple EIP or NAT IP addresses with commas (,). NOTE: From version 1.241.0, snat_ip can be modified.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/eip/v1alpha1.EIPAddress
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("ip_address",false)
	// +kubebuilder:validation:Optional
	SnatIP *string `json:"snatIp,omitempty" tf:"snat_ip,omitempty"`

	// Reference to a EIPAddress in eip to populate snatIp.
	// +kubebuilder:validation:Optional
	SnatIPRef *v1.Reference `json:"snatIpRef,omitempty" tf:"-"`

	// Selector for a EIPAddress in eip to populate snatIp.
	// +kubebuilder:validation:Optional
	SnatIPSelector *v1.Selector `json:"snatIpSelector,omitempty" tf:"-"`

	// The ID of the SNAT table.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/natgateway/v1alpha1.NATGateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("snat_table_ids",true)
	// +kubebuilder:validation:Optional
	SnatTableID *string `json:"snatTableId,omitempty" tf:"snat_table_id,omitempty"`

	// Reference to a NATGateway in natgateway to populate snatTableId.
	// +kubebuilder:validation:Optional
	SnatTableIDRef *v1.Reference `json:"snatTableIdRef,omitempty" tf:"-"`

	// Selector for a NATGateway in natgateway to populate snatTableId.
	// +kubebuilder:validation:Optional
	SnatTableIDSelector *v1.Selector `json:"snatTableIdSelector,omitempty" tf:"-"`

	// The source CIDR block specified in the SNAT entry.
	// +kubebuilder:validation:Optional
	SourceCidr *string `json:"sourceCidr,omitempty" tf:"source_cidr,omitempty"`

	// The ID of the vSwitch.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/vpc/v1alpha1.Vswitch
	// +kubebuilder:validation:Optional
	SourceVswitchID *string `json:"sourceVswitchId,omitempty" tf:"source_vswitch_id,omitempty"`

	// Reference to a Vswitch in vpc to populate sourceVswitchId.
	// +kubebuilder:validation:Optional
	SourceVswitchIDRef *v1.Reference `json:"sourceVswitchIdRef,omitempty" tf:"-"`

	// Selector for a Vswitch in vpc to populate sourceVswitchId.
	// +kubebuilder:validation:Optional
	SourceVswitchIDSelector *v1.Selector `json:"sourceVswitchIdSelector,omitempty" tf:"-"`
}

// SNATEntrySpec defines the desired state of SNATEntry
type SNATEntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SNATEntryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SNATEntryInitParameters `json:"initProvider,omitempty"`
}

// SNATEntryStatus defines the observed state of SNATEntry.
type SNATEntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SNATEntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SNATEntry is the Schema for the SNATEntrys API. Provides a Alicloud snat resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type SNATEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SNATEntrySpec   `json:"spec"`
	Status            SNATEntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SNATEntryList contains a list of SNATEntrys
type SNATEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SNATEntry `json:"items"`
}

// Repository type metadata.
var (
	SNATEntry_Kind             = "SNATEntry"
	SNATEntry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SNATEntry_Kind}.String()
	SNATEntry_KindAPIVersion   = SNATEntry_Kind + "." + CRDGroupVersion.String()
	SNATEntry_GroupVersionKind = CRDGroupVersion.WithKind(SNATEntry_Kind)
)

func init() {
	SchemeBuilder.Register(&SNATEntry{}, &SNATEntryList{})
}
