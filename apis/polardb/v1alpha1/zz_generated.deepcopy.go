//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Account) DeepCopyInto(out *Account) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Account.
func (in *Account) DeepCopy() *Account {
	if in == nil {
		return nil
	}
	out := new(Account)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Account) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountInitParameters) DeepCopyInto(out *AccountInitParameters) {
	*out = *in
	if in.AccountDescription != nil {
		in, out := &in.AccountDescription, &out.AccountDescription
		*out = new(string)
		**out = **in
	}
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	out.AccountPasswordSecretRef = in.AccountPasswordSecretRef
	if in.AccountType != nil {
		in, out := &in.AccountType, &out.AccountType
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.KMSEncryptedPassword != nil {
		in, out := &in.KMSEncryptedPassword, &out.KMSEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountInitParameters.
func (in *AccountInitParameters) DeepCopy() *AccountInitParameters {
	if in == nil {
		return nil
	}
	out := new(AccountInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountList) DeepCopyInto(out *AccountList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Account, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountList.
func (in *AccountList) DeepCopy() *AccountList {
	if in == nil {
		return nil
	}
	out := new(AccountList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AccountList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountObservation) DeepCopyInto(out *AccountObservation) {
	*out = *in
	if in.AccountDescription != nil {
		in, out := &in.AccountDescription, &out.AccountDescription
		*out = new(string)
		**out = **in
	}
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.AccountType != nil {
		in, out := &in.AccountType, &out.AccountType
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KMSEncryptedPassword != nil {
		in, out := &in.KMSEncryptedPassword, &out.KMSEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountObservation.
func (in *AccountObservation) DeepCopy() *AccountObservation {
	if in == nil {
		return nil
	}
	out := new(AccountObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountParameters) DeepCopyInto(out *AccountParameters) {
	*out = *in
	if in.AccountDescription != nil {
		in, out := &in.AccountDescription, &out.AccountDescription
		*out = new(string)
		**out = **in
	}
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	out.AccountPasswordSecretRef = in.AccountPasswordSecretRef
	if in.AccountType != nil {
		in, out := &in.AccountType, &out.AccountType
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.KMSEncryptedPassword != nil {
		in, out := &in.KMSEncryptedPassword, &out.KMSEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountParameters.
func (in *AccountParameters) DeepCopy() *AccountParameters {
	if in == nil {
		return nil
	}
	out := new(AccountParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountPrivilege) DeepCopyInto(out *AccountPrivilege) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountPrivilege.
func (in *AccountPrivilege) DeepCopy() *AccountPrivilege {
	if in == nil {
		return nil
	}
	out := new(AccountPrivilege)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AccountPrivilege) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountPrivilegeInitParameters) DeepCopyInto(out *AccountPrivilegeInitParameters) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.AccountNameRef != nil {
		in, out := &in.AccountNameRef, &out.AccountNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AccountNameSelector != nil {
		in, out := &in.AccountNameSelector, &out.AccountNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.AccountPrivilege != nil {
		in, out := &in.AccountPrivilege, &out.AccountPrivilege
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DBNames != nil {
		in, out := &in.DBNames, &out.DBNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DBNamesRefs != nil {
		in, out := &in.DBNamesRefs, &out.DBNamesRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DBNamesSelector != nil {
		in, out := &in.DBNamesSelector, &out.DBNamesSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountPrivilegeInitParameters.
func (in *AccountPrivilegeInitParameters) DeepCopy() *AccountPrivilegeInitParameters {
	if in == nil {
		return nil
	}
	out := new(AccountPrivilegeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountPrivilegeList) DeepCopyInto(out *AccountPrivilegeList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AccountPrivilege, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountPrivilegeList.
func (in *AccountPrivilegeList) DeepCopy() *AccountPrivilegeList {
	if in == nil {
		return nil
	}
	out := new(AccountPrivilegeList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AccountPrivilegeList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountPrivilegeObservation) DeepCopyInto(out *AccountPrivilegeObservation) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.AccountPrivilege != nil {
		in, out := &in.AccountPrivilege, &out.AccountPrivilege
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBNames != nil {
		in, out := &in.DBNames, &out.DBNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountPrivilegeObservation.
func (in *AccountPrivilegeObservation) DeepCopy() *AccountPrivilegeObservation {
	if in == nil {
		return nil
	}
	out := new(AccountPrivilegeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountPrivilegeParameters) DeepCopyInto(out *AccountPrivilegeParameters) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.AccountNameRef != nil {
		in, out := &in.AccountNameRef, &out.AccountNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.AccountNameSelector != nil {
		in, out := &in.AccountNameSelector, &out.AccountNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.AccountPrivilege != nil {
		in, out := &in.AccountPrivilege, &out.AccountPrivilege
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DBNames != nil {
		in, out := &in.DBNames, &out.DBNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DBNamesRefs != nil {
		in, out := &in.DBNamesRefs, &out.DBNamesRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DBNamesSelector != nil {
		in, out := &in.DBNamesSelector, &out.DBNamesSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountPrivilegeParameters.
func (in *AccountPrivilegeParameters) DeepCopy() *AccountPrivilegeParameters {
	if in == nil {
		return nil
	}
	out := new(AccountPrivilegeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountPrivilegeSpec) DeepCopyInto(out *AccountPrivilegeSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountPrivilegeSpec.
func (in *AccountPrivilegeSpec) DeepCopy() *AccountPrivilegeSpec {
	if in == nil {
		return nil
	}
	out := new(AccountPrivilegeSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountPrivilegeStatus) DeepCopyInto(out *AccountPrivilegeStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountPrivilegeStatus.
func (in *AccountPrivilegeStatus) DeepCopy() *AccountPrivilegeStatus {
	if in == nil {
		return nil
	}
	out := new(AccountPrivilegeStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountSpec) DeepCopyInto(out *AccountSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountSpec.
func (in *AccountSpec) DeepCopy() *AccountSpec {
	if in == nil {
		return nil
	}
	out := new(AccountSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccountStatus) DeepCopyInto(out *AccountStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccountStatus.
func (in *AccountStatus) DeepCopy() *AccountStatus {
	if in == nil {
		return nil
	}
	out := new(AccountStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupPolicy) DeepCopyInto(out *BackupPolicy) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupPolicy.
func (in *BackupPolicy) DeepCopy() *BackupPolicy {
	if in == nil {
		return nil
	}
	out := new(BackupPolicy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BackupPolicy) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupPolicyInitParameters) DeepCopyInto(out *BackupPolicyInitParameters) {
	*out = *in
	if in.BackupFrequency != nil {
		in, out := &in.BackupFrequency, &out.BackupFrequency
		*out = new(string)
		**out = **in
	}
	if in.BackupRetentionPeriod != nil {
		in, out := &in.BackupRetentionPeriod, &out.BackupRetentionPeriod
		*out = new(string)
		**out = **in
	}
	if in.BackupRetentionPolicyOnClusterDeletion != nil {
		in, out := &in.BackupRetentionPolicyOnClusterDeletion, &out.BackupRetentionPolicyOnClusterDeletion
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DataLevel1BackupFrequency != nil {
		in, out := &in.DataLevel1BackupFrequency, &out.DataLevel1BackupFrequency
		*out = new(string)
		**out = **in
	}
	if in.DataLevel1BackupPeriod != nil {
		in, out := &in.DataLevel1BackupPeriod, &out.DataLevel1BackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DataLevel1BackupRetentionPeriod != nil {
		in, out := &in.DataLevel1BackupRetentionPeriod, &out.DataLevel1BackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.DataLevel1BackupTime != nil {
		in, out := &in.DataLevel1BackupTime, &out.DataLevel1BackupTime
		*out = new(string)
		**out = **in
	}
	if in.DataLevel2BackupAnotherRegionRegion != nil {
		in, out := &in.DataLevel2BackupAnotherRegionRegion, &out.DataLevel2BackupAnotherRegionRegion
		*out = new(string)
		**out = **in
	}
	if in.DataLevel2BackupAnotherRegionRetentionPeriod != nil {
		in, out := &in.DataLevel2BackupAnotherRegionRetentionPeriod, &out.DataLevel2BackupAnotherRegionRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.DataLevel2BackupPeriod != nil {
		in, out := &in.DataLevel2BackupPeriod, &out.DataLevel2BackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DataLevel2BackupRetentionPeriod != nil {
		in, out := &in.DataLevel2BackupRetentionPeriod, &out.DataLevel2BackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.LogBackupAnotherRegionRegion != nil {
		in, out := &in.LogBackupAnotherRegionRegion, &out.LogBackupAnotherRegionRegion
		*out = new(string)
		**out = **in
	}
	if in.LogBackupAnotherRegionRetentionPeriod != nil {
		in, out := &in.LogBackupAnotherRegionRetentionPeriod, &out.LogBackupAnotherRegionRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.LogBackupRetentionPeriod != nil {
		in, out := &in.LogBackupRetentionPeriod, &out.LogBackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.PreferredBackupPeriod != nil {
		in, out := &in.PreferredBackupPeriod, &out.PreferredBackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PreferredBackupTime != nil {
		in, out := &in.PreferredBackupTime, &out.PreferredBackupTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupPolicyInitParameters.
func (in *BackupPolicyInitParameters) DeepCopy() *BackupPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(BackupPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupPolicyList) DeepCopyInto(out *BackupPolicyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BackupPolicy, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupPolicyList.
func (in *BackupPolicyList) DeepCopy() *BackupPolicyList {
	if in == nil {
		return nil
	}
	out := new(BackupPolicyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BackupPolicyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupPolicyObservation) DeepCopyInto(out *BackupPolicyObservation) {
	*out = *in
	if in.BackupFrequency != nil {
		in, out := &in.BackupFrequency, &out.BackupFrequency
		*out = new(string)
		**out = **in
	}
	if in.BackupRetentionPeriod != nil {
		in, out := &in.BackupRetentionPeriod, &out.BackupRetentionPeriod
		*out = new(string)
		**out = **in
	}
	if in.BackupRetentionPolicyOnClusterDeletion != nil {
		in, out := &in.BackupRetentionPolicyOnClusterDeletion, &out.BackupRetentionPolicyOnClusterDeletion
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DataLevel1BackupFrequency != nil {
		in, out := &in.DataLevel1BackupFrequency, &out.DataLevel1BackupFrequency
		*out = new(string)
		**out = **in
	}
	if in.DataLevel1BackupPeriod != nil {
		in, out := &in.DataLevel1BackupPeriod, &out.DataLevel1BackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DataLevel1BackupRetentionPeriod != nil {
		in, out := &in.DataLevel1BackupRetentionPeriod, &out.DataLevel1BackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.DataLevel1BackupTime != nil {
		in, out := &in.DataLevel1BackupTime, &out.DataLevel1BackupTime
		*out = new(string)
		**out = **in
	}
	if in.DataLevel2BackupAnotherRegionRegion != nil {
		in, out := &in.DataLevel2BackupAnotherRegionRegion, &out.DataLevel2BackupAnotherRegionRegion
		*out = new(string)
		**out = **in
	}
	if in.DataLevel2BackupAnotherRegionRetentionPeriod != nil {
		in, out := &in.DataLevel2BackupAnotherRegionRetentionPeriod, &out.DataLevel2BackupAnotherRegionRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.DataLevel2BackupPeriod != nil {
		in, out := &in.DataLevel2BackupPeriod, &out.DataLevel2BackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DataLevel2BackupRetentionPeriod != nil {
		in, out := &in.DataLevel2BackupRetentionPeriod, &out.DataLevel2BackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.EnableBackupLog != nil {
		in, out := &in.EnableBackupLog, &out.EnableBackupLog
		*out = new(float64)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LogBackupAnotherRegionRegion != nil {
		in, out := &in.LogBackupAnotherRegionRegion, &out.LogBackupAnotherRegionRegion
		*out = new(string)
		**out = **in
	}
	if in.LogBackupAnotherRegionRetentionPeriod != nil {
		in, out := &in.LogBackupAnotherRegionRetentionPeriod, &out.LogBackupAnotherRegionRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.LogBackupRetentionPeriod != nil {
		in, out := &in.LogBackupRetentionPeriod, &out.LogBackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.PreferredBackupPeriod != nil {
		in, out := &in.PreferredBackupPeriod, &out.PreferredBackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PreferredBackupTime != nil {
		in, out := &in.PreferredBackupTime, &out.PreferredBackupTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupPolicyObservation.
func (in *BackupPolicyObservation) DeepCopy() *BackupPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(BackupPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupPolicyParameters) DeepCopyInto(out *BackupPolicyParameters) {
	*out = *in
	if in.BackupFrequency != nil {
		in, out := &in.BackupFrequency, &out.BackupFrequency
		*out = new(string)
		**out = **in
	}
	if in.BackupRetentionPeriod != nil {
		in, out := &in.BackupRetentionPeriod, &out.BackupRetentionPeriod
		*out = new(string)
		**out = **in
	}
	if in.BackupRetentionPolicyOnClusterDeletion != nil {
		in, out := &in.BackupRetentionPolicyOnClusterDeletion, &out.BackupRetentionPolicyOnClusterDeletion
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DataLevel1BackupFrequency != nil {
		in, out := &in.DataLevel1BackupFrequency, &out.DataLevel1BackupFrequency
		*out = new(string)
		**out = **in
	}
	if in.DataLevel1BackupPeriod != nil {
		in, out := &in.DataLevel1BackupPeriod, &out.DataLevel1BackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DataLevel1BackupRetentionPeriod != nil {
		in, out := &in.DataLevel1BackupRetentionPeriod, &out.DataLevel1BackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.DataLevel1BackupTime != nil {
		in, out := &in.DataLevel1BackupTime, &out.DataLevel1BackupTime
		*out = new(string)
		**out = **in
	}
	if in.DataLevel2BackupAnotherRegionRegion != nil {
		in, out := &in.DataLevel2BackupAnotherRegionRegion, &out.DataLevel2BackupAnotherRegionRegion
		*out = new(string)
		**out = **in
	}
	if in.DataLevel2BackupAnotherRegionRetentionPeriod != nil {
		in, out := &in.DataLevel2BackupAnotherRegionRetentionPeriod, &out.DataLevel2BackupAnotherRegionRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.DataLevel2BackupPeriod != nil {
		in, out := &in.DataLevel2BackupPeriod, &out.DataLevel2BackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DataLevel2BackupRetentionPeriod != nil {
		in, out := &in.DataLevel2BackupRetentionPeriod, &out.DataLevel2BackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.LogBackupAnotherRegionRegion != nil {
		in, out := &in.LogBackupAnotherRegionRegion, &out.LogBackupAnotherRegionRegion
		*out = new(string)
		**out = **in
	}
	if in.LogBackupAnotherRegionRetentionPeriod != nil {
		in, out := &in.LogBackupAnotherRegionRetentionPeriod, &out.LogBackupAnotherRegionRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.LogBackupRetentionPeriod != nil {
		in, out := &in.LogBackupRetentionPeriod, &out.LogBackupRetentionPeriod
		*out = new(float64)
		**out = **in
	}
	if in.PreferredBackupPeriod != nil {
		in, out := &in.PreferredBackupPeriod, &out.PreferredBackupPeriod
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PreferredBackupTime != nil {
		in, out := &in.PreferredBackupTime, &out.PreferredBackupTime
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupPolicyParameters.
func (in *BackupPolicyParameters) DeepCopy() *BackupPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(BackupPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupPolicySpec) DeepCopyInto(out *BackupPolicySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupPolicySpec.
func (in *BackupPolicySpec) DeepCopy() *BackupPolicySpec {
	if in == nil {
		return nil
	}
	out := new(BackupPolicySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupPolicyStatus) DeepCopyInto(out *BackupPolicyStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupPolicyStatus.
func (in *BackupPolicyStatus) DeepCopy() *BackupPolicyStatus {
	if in == nil {
		return nil
	}
	out := new(BackupPolicyStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Cluster) DeepCopyInto(out *Cluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Cluster.
func (in *Cluster) DeepCopy() *Cluster {
	if in == nil {
		return nil
	}
	out := new(Cluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Cluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpoint) DeepCopyInto(out *ClusterEndpoint) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpoint.
func (in *ClusterEndpoint) DeepCopy() *ClusterEndpoint {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpoint)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterEndpoint) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpointInitParameters) DeepCopyInto(out *ClusterEndpointInitParameters) {
	*out = *in
	if in.AutoAddNewNodes != nil {
		in, out := &in.AutoAddNewNodes, &out.AutoAddNewNodes
		*out = new(string)
		**out = **in
	}
	if in.ConnectionPrefix != nil {
		in, out := &in.ConnectionPrefix, &out.ConnectionPrefix
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DBEndpointDescription != nil {
		in, out := &in.DBEndpointDescription, &out.DBEndpointDescription
		*out = new(string)
		**out = **in
	}
	if in.EndpointConfig != nil {
		in, out := &in.EndpointConfig, &out.EndpointConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.ReadWriteMode != nil {
		in, out := &in.ReadWriteMode, &out.ReadWriteMode
		*out = new(string)
		**out = **in
	}
	if in.SSLAutoRotate != nil {
		in, out := &in.SSLAutoRotate, &out.SSLAutoRotate
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpointInitParameters.
func (in *ClusterEndpointInitParameters) DeepCopy() *ClusterEndpointInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpointInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpointList) DeepCopyInto(out *ClusterEndpointList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ClusterEndpoint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpointList.
func (in *ClusterEndpointList) DeepCopy() *ClusterEndpointList {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpointList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterEndpointList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpointObservation) DeepCopyInto(out *ClusterEndpointObservation) {
	*out = *in
	if in.AutoAddNewNodes != nil {
		in, out := &in.AutoAddNewNodes, &out.AutoAddNewNodes
		*out = new(string)
		**out = **in
	}
	if in.ConnectionPrefix != nil {
		in, out := &in.ConnectionPrefix, &out.ConnectionPrefix
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBEndpointDescription != nil {
		in, out := &in.DBEndpointDescription, &out.DBEndpointDescription
		*out = new(string)
		**out = **in
	}
	if in.DBEndpointID != nil {
		in, out := &in.DBEndpointID, &out.DBEndpointID
		*out = new(string)
		**out = **in
	}
	if in.EndpointConfig != nil {
		in, out := &in.EndpointConfig, &out.EndpointConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.ReadWriteMode != nil {
		in, out := &in.ReadWriteMode, &out.ReadWriteMode
		*out = new(string)
		**out = **in
	}
	if in.SSLAutoRotate != nil {
		in, out := &in.SSLAutoRotate, &out.SSLAutoRotate
		*out = new(string)
		**out = **in
	}
	if in.SSLCertificateURL != nil {
		in, out := &in.SSLCertificateURL, &out.SSLCertificateURL
		*out = new(string)
		**out = **in
	}
	if in.SSLConnectionString != nil {
		in, out := &in.SSLConnectionString, &out.SSLConnectionString
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(string)
		**out = **in
	}
	if in.SSLExpireTime != nil {
		in, out := &in.SSLExpireTime, &out.SSLExpireTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpointObservation.
func (in *ClusterEndpointObservation) DeepCopy() *ClusterEndpointObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpointObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpointParameters) DeepCopyInto(out *ClusterEndpointParameters) {
	*out = *in
	if in.AutoAddNewNodes != nil {
		in, out := &in.AutoAddNewNodes, &out.AutoAddNewNodes
		*out = new(string)
		**out = **in
	}
	if in.ConnectionPrefix != nil {
		in, out := &in.ConnectionPrefix, &out.ConnectionPrefix
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DBEndpointDescription != nil {
		in, out := &in.DBEndpointDescription, &out.DBEndpointDescription
		*out = new(string)
		**out = **in
	}
	if in.EndpointConfig != nil {
		in, out := &in.EndpointConfig, &out.EndpointConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.ReadWriteMode != nil {
		in, out := &in.ReadWriteMode, &out.ReadWriteMode
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SSLAutoRotate != nil {
		in, out := &in.SSLAutoRotate, &out.SSLAutoRotate
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpointParameters.
func (in *ClusterEndpointParameters) DeepCopy() *ClusterEndpointParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpointParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpointSpec) DeepCopyInto(out *ClusterEndpointSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpointSpec.
func (in *ClusterEndpointSpec) DeepCopy() *ClusterEndpointSpec {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpointSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterEndpointStatus) DeepCopyInto(out *ClusterEndpointStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterEndpointStatus.
func (in *ClusterEndpointStatus) DeepCopy() *ClusterEndpointStatus {
	if in == nil {
		return nil
	}
	out := new(ClusterEndpointStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterInitParameters) DeepCopyInto(out *ClusterInitParameters) {
	*out = *in
	if in.AllowShutDown != nil {
		in, out := &in.AllowShutDown, &out.AllowShutDown
		*out = new(string)
		**out = **in
	}
	if in.AutoRenewPeriod != nil {
		in, out := &in.AutoRenewPeriod, &out.AutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.BackupRetentionPolicyOnClusterDeletion != nil {
		in, out := &in.BackupRetentionPolicyOnClusterDeletion, &out.BackupRetentionPolicyOnClusterDeletion
		*out = new(string)
		**out = **in
	}
	if in.CloneDataPoint != nil {
		in, out := &in.CloneDataPoint, &out.CloneDataPoint
		*out = new(string)
		**out = **in
	}
	if in.CollectorStatus != nil {
		in, out := &in.CollectorStatus, &out.CollectorStatus
		*out = new(string)
		**out = **in
	}
	if in.CompressStorage != nil {
		in, out := &in.CompressStorage, &out.CompressStorage
		*out = new(string)
		**out = **in
	}
	if in.CreationCategory != nil {
		in, out := &in.CreationCategory, &out.CreationCategory
		*out = new(string)
		**out = **in
	}
	if in.CreationOption != nil {
		in, out := &in.CreationOption, &out.CreationOption
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIPArray != nil {
		in, out := &in.DBClusterIPArray, &out.DBClusterIPArray
		*out = make([]DBClusterIPArrayInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DBMinorVersion != nil {
		in, out := &in.DBMinorVersion, &out.DBMinorVersion
		*out = new(string)
		**out = **in
	}
	if in.DBNodeClass != nil {
		in, out := &in.DBNodeClass, &out.DBNodeClass
		*out = new(string)
		**out = **in
	}
	if in.DBNodeCount != nil {
		in, out := &in.DBNodeCount, &out.DBNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.DBNodeID != nil {
		in, out := &in.DBNodeID, &out.DBNodeID
		*out = new(string)
		**out = **in
	}
	if in.DBNodeNum != nil {
		in, out := &in.DBNodeNum, &out.DBNodeNum
		*out = new(float64)
		**out = **in
	}
	if in.DBType != nil {
		in, out := &in.DBType, &out.DBType
		*out = new(string)
		**out = **in
	}
	if in.DBVersion != nil {
		in, out := &in.DBVersion, &out.DBVersion
		*out = new(string)
		**out = **in
	}
	if in.DefaultTimeZone != nil {
		in, out := &in.DefaultTimeZone, &out.DefaultTimeZone
		*out = new(string)
		**out = **in
	}
	if in.DeletionLock != nil {
		in, out := &in.DeletionLock, &out.DeletionLock
		*out = new(float64)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EncryptNewTables != nil {
		in, out := &in.EncryptNewTables, &out.EncryptNewTables
		*out = new(string)
		**out = **in
	}
	if in.EncryptionKey != nil {
		in, out := &in.EncryptionKey, &out.EncryptionKey
		*out = new(string)
		**out = **in
	}
	if in.FromTimeService != nil {
		in, out := &in.FromTimeService, &out.FromTimeService
		*out = new(string)
		**out = **in
	}
	if in.GdnID != nil {
		in, out := &in.GdnID, &out.GdnID
		*out = new(string)
		**out = **in
	}
	if in.HotReplicaMode != nil {
		in, out := &in.HotReplicaMode, &out.HotReplicaMode
		*out = new(string)
		**out = **in
	}
	if in.HotStandbyCluster != nil {
		in, out := &in.HotStandbyCluster, &out.HotStandbyCluster
		*out = new(string)
		**out = **in
	}
	if in.ImciSwitch != nil {
		in, out := &in.ImciSwitch, &out.ImciSwitch
		*out = new(string)
		**out = **in
	}
	if in.LoosePolarLogBin != nil {
		in, out := &in.LoosePolarLogBin, &out.LoosePolarLogBin
		*out = new(string)
		**out = **in
	}
	if in.LooseXengine != nil {
		in, out := &in.LooseXengine, &out.LooseXengine
		*out = new(string)
		**out = **in
	}
	if in.LooseXengineUseMemoryPct != nil {
		in, out := &in.LooseXengineUseMemoryPct, &out.LooseXengineUseMemoryPct
		*out = new(float64)
		**out = **in
	}
	if in.LowerCaseTableNames != nil {
		in, out := &in.LowerCaseTableNames, &out.LowerCaseTableNames
		*out = new(float64)
		**out = **in
	}
	if in.MaintainTime != nil {
		in, out := &in.MaintainTime, &out.MaintainTime
		*out = new(string)
		**out = **in
	}
	if in.ModifyType != nil {
		in, out := &in.ModifyType, &out.ModifyType
		*out = new(string)
		**out = **in
	}
	if in.ParameterGroupID != nil {
		in, out := &in.ParameterGroupID, &out.ParameterGroupID
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]ParametersInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PayType != nil {
		in, out := &in.PayType, &out.PayType
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PlannedEndTime != nil {
		in, out := &in.PlannedEndTime, &out.PlannedEndTime
		*out = new(string)
		**out = **in
	}
	if in.PlannedStartTime != nil {
		in, out := &in.PlannedStartTime, &out.PlannedStartTime
		*out = new(string)
		**out = **in
	}
	if in.ProvisionedIops != nil {
		in, out := &in.ProvisionedIops, &out.ProvisionedIops
		*out = new(string)
		**out = **in
	}
	if in.ProxyClass != nil {
		in, out := &in.ProxyClass, &out.ProxyClass
		*out = new(string)
		**out = **in
	}
	if in.ProxyType != nil {
		in, out := &in.ProxyType, &out.ProxyType
		*out = new(string)
		**out = **in
	}
	if in.RenewalStatus != nil {
		in, out := &in.RenewalStatus, &out.RenewalStatus
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RoleArn != nil {
		in, out := &in.RoleArn, &out.RoleArn
		*out = new(string)
		**out = **in
	}
	if in.RoleArnRef != nil {
		in, out := &in.RoleArnRef, &out.RoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RoleArnSelector != nil {
		in, out := &in.RoleArnSelector, &out.RoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ScaleApRoNumMax != nil {
		in, out := &in.ScaleApRoNumMax, &out.ScaleApRoNumMax
		*out = new(float64)
		**out = **in
	}
	if in.ScaleApRoNumMin != nil {
		in, out := &in.ScaleApRoNumMin, &out.ScaleApRoNumMin
		*out = new(float64)
		**out = **in
	}
	if in.ScaleMax != nil {
		in, out := &in.ScaleMax, &out.ScaleMax
		*out = new(float64)
		**out = **in
	}
	if in.ScaleMin != nil {
		in, out := &in.ScaleMin, &out.ScaleMin
		*out = new(float64)
		**out = **in
	}
	if in.ScaleRoNumMax != nil {
		in, out := &in.ScaleRoNumMax, &out.ScaleRoNumMax
		*out = new(float64)
		**out = **in
	}
	if in.ScaleRoNumMin != nil {
		in, out := &in.ScaleRoNumMin, &out.ScaleRoNumMin
		*out = new(float64)
		**out = **in
	}
	if in.SecondsUntilAutoPause != nil {
		in, out := &in.SecondsUntilAutoPause, &out.SecondsUntilAutoPause
		*out = new(float64)
		**out = **in
	}
	if in.SecurityGroupIDRefs != nil {
		in, out := &in.SecurityGroupIDRefs, &out.SecurityGroupIDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityIps != nil {
		in, out := &in.SecurityIps, &out.SecurityIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ServerlessRuleCPUEnlargeThreshold != nil {
		in, out := &in.ServerlessRuleCPUEnlargeThreshold, &out.ServerlessRuleCPUEnlargeThreshold
		*out = new(float64)
		**out = **in
	}
	if in.ServerlessRuleCPUShrinkThreshold != nil {
		in, out := &in.ServerlessRuleCPUShrinkThreshold, &out.ServerlessRuleCPUShrinkThreshold
		*out = new(float64)
		**out = **in
	}
	if in.ServerlessRuleMode != nil {
		in, out := &in.ServerlessRuleMode, &out.ServerlessRuleMode
		*out = new(string)
		**out = **in
	}
	if in.ServerlessSteadySwitch != nil {
		in, out := &in.ServerlessSteadySwitch, &out.ServerlessSteadySwitch
		*out = new(string)
		**out = **in
	}
	if in.ServerlessType != nil {
		in, out := &in.ServerlessType, &out.ServerlessType
		*out = new(string)
		**out = **in
	}
	if in.SourceResourceID != nil {
		in, out := &in.SourceResourceID, &out.SourceResourceID
		*out = new(string)
		**out = **in
	}
	if in.StandbyAz != nil {
		in, out := &in.StandbyAz, &out.StandbyAz
		*out = new(string)
		**out = **in
	}
	if in.StoragePayType != nil {
		in, out := &in.StoragePayType, &out.StoragePayType
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.StrictConsistency != nil {
		in, out := &in.StrictConsistency, &out.StrictConsistency
		*out = new(string)
		**out = **in
	}
	if in.SubCategory != nil {
		in, out := &in.SubCategory, &out.SubCategory
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TargetDBRevisionVersionCode != nil {
		in, out := &in.TargetDBRevisionVersionCode, &out.TargetDBRevisionVersionCode
		*out = new(string)
		**out = **in
	}
	if in.TdeStatus != nil {
		in, out := &in.TdeStatus, &out.TdeStatus
		*out = new(string)
		**out = **in
	}
	if in.UpgradeType != nil {
		in, out := &in.UpgradeType, &out.UpgradeType
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIDRef != nil {
		in, out := &in.VswitchIDRef, &out.VswitchIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchIDSelector != nil {
		in, out := &in.VswitchIDSelector, &out.VswitchIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterInitParameters.
func (in *ClusterInitParameters) DeepCopy() *ClusterInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterList) DeepCopyInto(out *ClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Cluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterList.
func (in *ClusterList) DeepCopy() *ClusterList {
	if in == nil {
		return nil
	}
	out := new(ClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterObservation) DeepCopyInto(out *ClusterObservation) {
	*out = *in
	if in.AllowShutDown != nil {
		in, out := &in.AllowShutDown, &out.AllowShutDown
		*out = new(string)
		**out = **in
	}
	if in.AutoRenewPeriod != nil {
		in, out := &in.AutoRenewPeriod, &out.AutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.BackupRetentionPolicyOnClusterDeletion != nil {
		in, out := &in.BackupRetentionPolicyOnClusterDeletion, &out.BackupRetentionPolicyOnClusterDeletion
		*out = new(string)
		**out = **in
	}
	if in.CloneDataPoint != nil {
		in, out := &in.CloneDataPoint, &out.CloneDataPoint
		*out = new(string)
		**out = **in
	}
	if in.CollectorStatus != nil {
		in, out := &in.CollectorStatus, &out.CollectorStatus
		*out = new(string)
		**out = **in
	}
	if in.CompressStorage != nil {
		in, out := &in.CompressStorage, &out.CompressStorage
		*out = new(string)
		**out = **in
	}
	if in.ConnectionString != nil {
		in, out := &in.ConnectionString, &out.ConnectionString
		*out = new(string)
		**out = **in
	}
	if in.CreateTime != nil {
		in, out := &in.CreateTime, &out.CreateTime
		*out = new(string)
		**out = **in
	}
	if in.CreationCategory != nil {
		in, out := &in.CreationCategory, &out.CreationCategory
		*out = new(string)
		**out = **in
	}
	if in.CreationOption != nil {
		in, out := &in.CreationOption, &out.CreationOption
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIPArray != nil {
		in, out := &in.DBClusterIPArray, &out.DBClusterIPArray
		*out = make([]DBClusterIPArrayObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DBMinorVersion != nil {
		in, out := &in.DBMinorVersion, &out.DBMinorVersion
		*out = new(string)
		**out = **in
	}
	if in.DBNodeClass != nil {
		in, out := &in.DBNodeClass, &out.DBNodeClass
		*out = new(string)
		**out = **in
	}
	if in.DBNodeCount != nil {
		in, out := &in.DBNodeCount, &out.DBNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.DBNodeID != nil {
		in, out := &in.DBNodeID, &out.DBNodeID
		*out = new(string)
		**out = **in
	}
	if in.DBNodeNum != nil {
		in, out := &in.DBNodeNum, &out.DBNodeNum
		*out = new(float64)
		**out = **in
	}
	if in.DBRevisionVersionList != nil {
		in, out := &in.DBRevisionVersionList, &out.DBRevisionVersionList
		*out = make([]DBRevisionVersionListObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DBType != nil {
		in, out := &in.DBType, &out.DBType
		*out = new(string)
		**out = **in
	}
	if in.DBVersion != nil {
		in, out := &in.DBVersion, &out.DBVersion
		*out = new(string)
		**out = **in
	}
	if in.DefaultTimeZone != nil {
		in, out := &in.DefaultTimeZone, &out.DefaultTimeZone
		*out = new(string)
		**out = **in
	}
	if in.DeletionLock != nil {
		in, out := &in.DeletionLock, &out.DeletionLock
		*out = new(float64)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EncryptNewTables != nil {
		in, out := &in.EncryptNewTables, &out.EncryptNewTables
		*out = new(string)
		**out = **in
	}
	if in.EncryptionKey != nil {
		in, out := &in.EncryptionKey, &out.EncryptionKey
		*out = new(string)
		**out = **in
	}
	if in.FromTimeService != nil {
		in, out := &in.FromTimeService, &out.FromTimeService
		*out = new(string)
		**out = **in
	}
	if in.GdnID != nil {
		in, out := &in.GdnID, &out.GdnID
		*out = new(string)
		**out = **in
	}
	if in.HotReplicaMode != nil {
		in, out := &in.HotReplicaMode, &out.HotReplicaMode
		*out = new(string)
		**out = **in
	}
	if in.HotStandbyCluster != nil {
		in, out := &in.HotStandbyCluster, &out.HotStandbyCluster
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImciSwitch != nil {
		in, out := &in.ImciSwitch, &out.ImciSwitch
		*out = new(string)
		**out = **in
	}
	if in.LoosePolarLogBin != nil {
		in, out := &in.LoosePolarLogBin, &out.LoosePolarLogBin
		*out = new(string)
		**out = **in
	}
	if in.LooseXengine != nil {
		in, out := &in.LooseXengine, &out.LooseXengine
		*out = new(string)
		**out = **in
	}
	if in.LooseXengineUseMemoryPct != nil {
		in, out := &in.LooseXengineUseMemoryPct, &out.LooseXengineUseMemoryPct
		*out = new(float64)
		**out = **in
	}
	if in.LowerCaseTableNames != nil {
		in, out := &in.LowerCaseTableNames, &out.LowerCaseTableNames
		*out = new(float64)
		**out = **in
	}
	if in.MaintainTime != nil {
		in, out := &in.MaintainTime, &out.MaintainTime
		*out = new(string)
		**out = **in
	}
	if in.ModifyType != nil {
		in, out := &in.ModifyType, &out.ModifyType
		*out = new(string)
		**out = **in
	}
	if in.ParameterGroupID != nil {
		in, out := &in.ParameterGroupID, &out.ParameterGroupID
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]ParametersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PayType != nil {
		in, out := &in.PayType, &out.PayType
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PlannedEndTime != nil {
		in, out := &in.PlannedEndTime, &out.PlannedEndTime
		*out = new(string)
		**out = **in
	}
	if in.PlannedStartTime != nil {
		in, out := &in.PlannedStartTime, &out.PlannedStartTime
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.ProvisionedIops != nil {
		in, out := &in.ProvisionedIops, &out.ProvisionedIops
		*out = new(string)
		**out = **in
	}
	if in.ProxyClass != nil {
		in, out := &in.ProxyClass, &out.ProxyClass
		*out = new(string)
		**out = **in
	}
	if in.ProxyType != nil {
		in, out := &in.ProxyType, &out.ProxyType
		*out = new(string)
		**out = **in
	}
	if in.RenewalStatus != nil {
		in, out := &in.RenewalStatus, &out.RenewalStatus
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RoleArn != nil {
		in, out := &in.RoleArn, &out.RoleArn
		*out = new(string)
		**out = **in
	}
	if in.ScaleApRoNumMax != nil {
		in, out := &in.ScaleApRoNumMax, &out.ScaleApRoNumMax
		*out = new(float64)
		**out = **in
	}
	if in.ScaleApRoNumMin != nil {
		in, out := &in.ScaleApRoNumMin, &out.ScaleApRoNumMin
		*out = new(float64)
		**out = **in
	}
	if in.ScaleMax != nil {
		in, out := &in.ScaleMax, &out.ScaleMax
		*out = new(float64)
		**out = **in
	}
	if in.ScaleMin != nil {
		in, out := &in.ScaleMin, &out.ScaleMin
		*out = new(float64)
		**out = **in
	}
	if in.ScaleRoNumMax != nil {
		in, out := &in.ScaleRoNumMax, &out.ScaleRoNumMax
		*out = new(float64)
		**out = **in
	}
	if in.ScaleRoNumMin != nil {
		in, out := &in.ScaleRoNumMin, &out.ScaleRoNumMin
		*out = new(float64)
		**out = **in
	}
	if in.SecondsUntilAutoPause != nil {
		in, out := &in.SecondsUntilAutoPause, &out.SecondsUntilAutoPause
		*out = new(float64)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityIps != nil {
		in, out := &in.SecurityIps, &out.SecurityIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ServerlessRuleCPUEnlargeThreshold != nil {
		in, out := &in.ServerlessRuleCPUEnlargeThreshold, &out.ServerlessRuleCPUEnlargeThreshold
		*out = new(float64)
		**out = **in
	}
	if in.ServerlessRuleCPUShrinkThreshold != nil {
		in, out := &in.ServerlessRuleCPUShrinkThreshold, &out.ServerlessRuleCPUShrinkThreshold
		*out = new(float64)
		**out = **in
	}
	if in.ServerlessRuleMode != nil {
		in, out := &in.ServerlessRuleMode, &out.ServerlessRuleMode
		*out = new(string)
		**out = **in
	}
	if in.ServerlessSteadySwitch != nil {
		in, out := &in.ServerlessSteadySwitch, &out.ServerlessSteadySwitch
		*out = new(string)
		**out = **in
	}
	if in.ServerlessType != nil {
		in, out := &in.ServerlessType, &out.ServerlessType
		*out = new(string)
		**out = **in
	}
	if in.SourceResourceID != nil {
		in, out := &in.SourceResourceID, &out.SourceResourceID
		*out = new(string)
		**out = **in
	}
	if in.StandbyAz != nil {
		in, out := &in.StandbyAz, &out.StandbyAz
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
	if in.StoragePayType != nil {
		in, out := &in.StoragePayType, &out.StoragePayType
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.StrictConsistency != nil {
		in, out := &in.StrictConsistency, &out.StrictConsistency
		*out = new(string)
		**out = **in
	}
	if in.SubCategory != nil {
		in, out := &in.SubCategory, &out.SubCategory
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TargetDBRevisionVersionCode != nil {
		in, out := &in.TargetDBRevisionVersionCode, &out.TargetDBRevisionVersionCode
		*out = new(string)
		**out = **in
	}
	if in.TdeRegion != nil {
		in, out := &in.TdeRegion, &out.TdeRegion
		*out = new(string)
		**out = **in
	}
	if in.TdeStatus != nil {
		in, out := &in.TdeStatus, &out.TdeStatus
		*out = new(string)
		**out = **in
	}
	if in.UpgradeType != nil {
		in, out := &in.UpgradeType, &out.UpgradeType
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterObservation.
func (in *ClusterObservation) DeepCopy() *ClusterObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterParameters) DeepCopyInto(out *ClusterParameters) {
	*out = *in
	if in.AllowShutDown != nil {
		in, out := &in.AllowShutDown, &out.AllowShutDown
		*out = new(string)
		**out = **in
	}
	if in.AutoRenewPeriod != nil {
		in, out := &in.AutoRenewPeriod, &out.AutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.BackupRetentionPolicyOnClusterDeletion != nil {
		in, out := &in.BackupRetentionPolicyOnClusterDeletion, &out.BackupRetentionPolicyOnClusterDeletion
		*out = new(string)
		**out = **in
	}
	if in.CloneDataPoint != nil {
		in, out := &in.CloneDataPoint, &out.CloneDataPoint
		*out = new(string)
		**out = **in
	}
	if in.CollectorStatus != nil {
		in, out := &in.CollectorStatus, &out.CollectorStatus
		*out = new(string)
		**out = **in
	}
	if in.CompressStorage != nil {
		in, out := &in.CompressStorage, &out.CompressStorage
		*out = new(string)
		**out = **in
	}
	if in.CreationCategory != nil {
		in, out := &in.CreationCategory, &out.CreationCategory
		*out = new(string)
		**out = **in
	}
	if in.CreationOption != nil {
		in, out := &in.CreationOption, &out.CreationOption
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIPArray != nil {
		in, out := &in.DBClusterIPArray, &out.DBClusterIPArray
		*out = make([]DBClusterIPArrayParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DBMinorVersion != nil {
		in, out := &in.DBMinorVersion, &out.DBMinorVersion
		*out = new(string)
		**out = **in
	}
	if in.DBNodeClass != nil {
		in, out := &in.DBNodeClass, &out.DBNodeClass
		*out = new(string)
		**out = **in
	}
	if in.DBNodeCount != nil {
		in, out := &in.DBNodeCount, &out.DBNodeCount
		*out = new(float64)
		**out = **in
	}
	if in.DBNodeID != nil {
		in, out := &in.DBNodeID, &out.DBNodeID
		*out = new(string)
		**out = **in
	}
	if in.DBNodeNum != nil {
		in, out := &in.DBNodeNum, &out.DBNodeNum
		*out = new(float64)
		**out = **in
	}
	if in.DBType != nil {
		in, out := &in.DBType, &out.DBType
		*out = new(string)
		**out = **in
	}
	if in.DBVersion != nil {
		in, out := &in.DBVersion, &out.DBVersion
		*out = new(string)
		**out = **in
	}
	if in.DefaultTimeZone != nil {
		in, out := &in.DefaultTimeZone, &out.DefaultTimeZone
		*out = new(string)
		**out = **in
	}
	if in.DeletionLock != nil {
		in, out := &in.DeletionLock, &out.DeletionLock
		*out = new(float64)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.EncryptNewTables != nil {
		in, out := &in.EncryptNewTables, &out.EncryptNewTables
		*out = new(string)
		**out = **in
	}
	if in.EncryptionKey != nil {
		in, out := &in.EncryptionKey, &out.EncryptionKey
		*out = new(string)
		**out = **in
	}
	if in.FromTimeService != nil {
		in, out := &in.FromTimeService, &out.FromTimeService
		*out = new(string)
		**out = **in
	}
	if in.GdnID != nil {
		in, out := &in.GdnID, &out.GdnID
		*out = new(string)
		**out = **in
	}
	if in.HotReplicaMode != nil {
		in, out := &in.HotReplicaMode, &out.HotReplicaMode
		*out = new(string)
		**out = **in
	}
	if in.HotStandbyCluster != nil {
		in, out := &in.HotStandbyCluster, &out.HotStandbyCluster
		*out = new(string)
		**out = **in
	}
	if in.ImciSwitch != nil {
		in, out := &in.ImciSwitch, &out.ImciSwitch
		*out = new(string)
		**out = **in
	}
	if in.LoosePolarLogBin != nil {
		in, out := &in.LoosePolarLogBin, &out.LoosePolarLogBin
		*out = new(string)
		**out = **in
	}
	if in.LooseXengine != nil {
		in, out := &in.LooseXengine, &out.LooseXengine
		*out = new(string)
		**out = **in
	}
	if in.LooseXengineUseMemoryPct != nil {
		in, out := &in.LooseXengineUseMemoryPct, &out.LooseXengineUseMemoryPct
		*out = new(float64)
		**out = **in
	}
	if in.LowerCaseTableNames != nil {
		in, out := &in.LowerCaseTableNames, &out.LowerCaseTableNames
		*out = new(float64)
		**out = **in
	}
	if in.MaintainTime != nil {
		in, out := &in.MaintainTime, &out.MaintainTime
		*out = new(string)
		**out = **in
	}
	if in.ModifyType != nil {
		in, out := &in.ModifyType, &out.ModifyType
		*out = new(string)
		**out = **in
	}
	if in.ParameterGroupID != nil {
		in, out := &in.ParameterGroupID, &out.ParameterGroupID
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]ParametersParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PayType != nil {
		in, out := &in.PayType, &out.PayType
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PlannedEndTime != nil {
		in, out := &in.PlannedEndTime, &out.PlannedEndTime
		*out = new(string)
		**out = **in
	}
	if in.PlannedStartTime != nil {
		in, out := &in.PlannedStartTime, &out.PlannedStartTime
		*out = new(string)
		**out = **in
	}
	if in.ProvisionedIops != nil {
		in, out := &in.ProvisionedIops, &out.ProvisionedIops
		*out = new(string)
		**out = **in
	}
	if in.ProxyClass != nil {
		in, out := &in.ProxyClass, &out.ProxyClass
		*out = new(string)
		**out = **in
	}
	if in.ProxyType != nil {
		in, out := &in.ProxyType, &out.ProxyType
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.RenewalStatus != nil {
		in, out := &in.RenewalStatus, &out.RenewalStatus
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RoleArn != nil {
		in, out := &in.RoleArn, &out.RoleArn
		*out = new(string)
		**out = **in
	}
	if in.RoleArnRef != nil {
		in, out := &in.RoleArnRef, &out.RoleArnRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RoleArnSelector != nil {
		in, out := &in.RoleArnSelector, &out.RoleArnSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ScaleApRoNumMax != nil {
		in, out := &in.ScaleApRoNumMax, &out.ScaleApRoNumMax
		*out = new(float64)
		**out = **in
	}
	if in.ScaleApRoNumMin != nil {
		in, out := &in.ScaleApRoNumMin, &out.ScaleApRoNumMin
		*out = new(float64)
		**out = **in
	}
	if in.ScaleMax != nil {
		in, out := &in.ScaleMax, &out.ScaleMax
		*out = new(float64)
		**out = **in
	}
	if in.ScaleMin != nil {
		in, out := &in.ScaleMin, &out.ScaleMin
		*out = new(float64)
		**out = **in
	}
	if in.ScaleRoNumMax != nil {
		in, out := &in.ScaleRoNumMax, &out.ScaleRoNumMax
		*out = new(float64)
		**out = **in
	}
	if in.ScaleRoNumMin != nil {
		in, out := &in.ScaleRoNumMin, &out.ScaleRoNumMin
		*out = new(float64)
		**out = **in
	}
	if in.SecondsUntilAutoPause != nil {
		in, out := &in.SecondsUntilAutoPause, &out.SecondsUntilAutoPause
		*out = new(float64)
		**out = **in
	}
	if in.SecurityGroupIDRefs != nil {
		in, out := &in.SecurityGroupIDRefs, &out.SecurityGroupIDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityIps != nil {
		in, out := &in.SecurityIps, &out.SecurityIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ServerlessRuleCPUEnlargeThreshold != nil {
		in, out := &in.ServerlessRuleCPUEnlargeThreshold, &out.ServerlessRuleCPUEnlargeThreshold
		*out = new(float64)
		**out = **in
	}
	if in.ServerlessRuleCPUShrinkThreshold != nil {
		in, out := &in.ServerlessRuleCPUShrinkThreshold, &out.ServerlessRuleCPUShrinkThreshold
		*out = new(float64)
		**out = **in
	}
	if in.ServerlessRuleMode != nil {
		in, out := &in.ServerlessRuleMode, &out.ServerlessRuleMode
		*out = new(string)
		**out = **in
	}
	if in.ServerlessSteadySwitch != nil {
		in, out := &in.ServerlessSteadySwitch, &out.ServerlessSteadySwitch
		*out = new(string)
		**out = **in
	}
	if in.ServerlessType != nil {
		in, out := &in.ServerlessType, &out.ServerlessType
		*out = new(string)
		**out = **in
	}
	if in.SourceResourceID != nil {
		in, out := &in.SourceResourceID, &out.SourceResourceID
		*out = new(string)
		**out = **in
	}
	if in.StandbyAz != nil {
		in, out := &in.StandbyAz, &out.StandbyAz
		*out = new(string)
		**out = **in
	}
	if in.StoragePayType != nil {
		in, out := &in.StoragePayType, &out.StoragePayType
		*out = new(string)
		**out = **in
	}
	if in.StorageSpace != nil {
		in, out := &in.StorageSpace, &out.StorageSpace
		*out = new(float64)
		**out = **in
	}
	if in.StorageType != nil {
		in, out := &in.StorageType, &out.StorageType
		*out = new(string)
		**out = **in
	}
	if in.StrictConsistency != nil {
		in, out := &in.StrictConsistency, &out.StrictConsistency
		*out = new(string)
		**out = **in
	}
	if in.SubCategory != nil {
		in, out := &in.SubCategory, &out.SubCategory
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TargetDBRevisionVersionCode != nil {
		in, out := &in.TargetDBRevisionVersionCode, &out.TargetDBRevisionVersionCode
		*out = new(string)
		**out = **in
	}
	if in.TdeStatus != nil {
		in, out := &in.TdeStatus, &out.TdeStatus
		*out = new(string)
		**out = **in
	}
	if in.UpgradeType != nil {
		in, out := &in.UpgradeType, &out.UpgradeType
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIDRef != nil {
		in, out := &in.VswitchIDRef, &out.VswitchIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchIDSelector != nil {
		in, out := &in.VswitchIDSelector, &out.VswitchIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterParameters.
func (in *ClusterParameters) DeepCopy() *ClusterParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterSpec) DeepCopyInto(out *ClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterSpec.
func (in *ClusterSpec) DeepCopy() *ClusterSpec {
	if in == nil {
		return nil
	}
	out := new(ClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterStatus) DeepCopyInto(out *ClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterStatus.
func (in *ClusterStatus) DeepCopy() *ClusterStatus {
	if in == nil {
		return nil
	}
	out := new(ClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBClusterIPArrayInitParameters) DeepCopyInto(out *DBClusterIPArrayInitParameters) {
	*out = *in
	if in.DBClusterIPArrayName != nil {
		in, out := &in.DBClusterIPArrayName, &out.DBClusterIPArrayName
		*out = new(string)
		**out = **in
	}
	if in.ModifyMode != nil {
		in, out := &in.ModifyMode, &out.ModifyMode
		*out = new(string)
		**out = **in
	}
	if in.SecurityIps != nil {
		in, out := &in.SecurityIps, &out.SecurityIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBClusterIPArrayInitParameters.
func (in *DBClusterIPArrayInitParameters) DeepCopy() *DBClusterIPArrayInitParameters {
	if in == nil {
		return nil
	}
	out := new(DBClusterIPArrayInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBClusterIPArrayObservation) DeepCopyInto(out *DBClusterIPArrayObservation) {
	*out = *in
	if in.DBClusterIPArrayName != nil {
		in, out := &in.DBClusterIPArrayName, &out.DBClusterIPArrayName
		*out = new(string)
		**out = **in
	}
	if in.ModifyMode != nil {
		in, out := &in.ModifyMode, &out.ModifyMode
		*out = new(string)
		**out = **in
	}
	if in.SecurityIps != nil {
		in, out := &in.SecurityIps, &out.SecurityIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBClusterIPArrayObservation.
func (in *DBClusterIPArrayObservation) DeepCopy() *DBClusterIPArrayObservation {
	if in == nil {
		return nil
	}
	out := new(DBClusterIPArrayObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBClusterIPArrayParameters) DeepCopyInto(out *DBClusterIPArrayParameters) {
	*out = *in
	if in.DBClusterIPArrayName != nil {
		in, out := &in.DBClusterIPArrayName, &out.DBClusterIPArrayName
		*out = new(string)
		**out = **in
	}
	if in.ModifyMode != nil {
		in, out := &in.ModifyMode, &out.ModifyMode
		*out = new(string)
		**out = **in
	}
	if in.SecurityIps != nil {
		in, out := &in.SecurityIps, &out.SecurityIps
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBClusterIPArrayParameters.
func (in *DBClusterIPArrayParameters) DeepCopy() *DBClusterIPArrayParameters {
	if in == nil {
		return nil
	}
	out := new(DBClusterIPArrayParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBRevisionVersionListInitParameters) DeepCopyInto(out *DBRevisionVersionListInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBRevisionVersionListInitParameters.
func (in *DBRevisionVersionListInitParameters) DeepCopy() *DBRevisionVersionListInitParameters {
	if in == nil {
		return nil
	}
	out := new(DBRevisionVersionListInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBRevisionVersionListObservation) DeepCopyInto(out *DBRevisionVersionListObservation) {
	*out = *in
	if in.ReleaseNote != nil {
		in, out := &in.ReleaseNote, &out.ReleaseNote
		*out = new(string)
		**out = **in
	}
	if in.ReleaseType != nil {
		in, out := &in.ReleaseType, &out.ReleaseType
		*out = new(string)
		**out = **in
	}
	if in.RevisionVersionCode != nil {
		in, out := &in.RevisionVersionCode, &out.RevisionVersionCode
		*out = new(string)
		**out = **in
	}
	if in.RevisionVersionName != nil {
		in, out := &in.RevisionVersionName, &out.RevisionVersionName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBRevisionVersionListObservation.
func (in *DBRevisionVersionListObservation) DeepCopy() *DBRevisionVersionListObservation {
	if in == nil {
		return nil
	}
	out := new(DBRevisionVersionListObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DBRevisionVersionListParameters) DeepCopyInto(out *DBRevisionVersionListParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DBRevisionVersionListParameters.
func (in *DBRevisionVersionListParameters) DeepCopy() *DBRevisionVersionListParameters {
	if in == nil {
		return nil
	}
	out := new(DBRevisionVersionListParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Database) DeepCopyInto(out *Database) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Database.
func (in *Database) DeepCopy() *Database {
	if in == nil {
		return nil
	}
	out := new(Database)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Database) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseInitParameters) DeepCopyInto(out *DatabaseInitParameters) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.CharacterSetName != nil {
		in, out := &in.CharacterSetName, &out.CharacterSetName
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DBDescription != nil {
		in, out := &in.DBDescription, &out.DBDescription
		*out = new(string)
		**out = **in
	}
	if in.DBName != nil {
		in, out := &in.DBName, &out.DBName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseInitParameters.
func (in *DatabaseInitParameters) DeepCopy() *DatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseList) DeepCopyInto(out *DatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Database, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseList.
func (in *DatabaseList) DeepCopy() *DatabaseList {
	if in == nil {
		return nil
	}
	out := new(DatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObservation) DeepCopyInto(out *DatabaseObservation) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.CharacterSetName != nil {
		in, out := &in.CharacterSetName, &out.CharacterSetName
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBDescription != nil {
		in, out := &in.DBDescription, &out.DBDescription
		*out = new(string)
		**out = **in
	}
	if in.DBName != nil {
		in, out := &in.DBName, &out.DBName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObservation.
func (in *DatabaseObservation) DeepCopy() *DatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseParameters) DeepCopyInto(out *DatabaseParameters) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.CharacterSetName != nil {
		in, out := &in.CharacterSetName, &out.CharacterSetName
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DBDescription != nil {
		in, out := &in.DBDescription, &out.DBDescription
		*out = new(string)
		**out = **in
	}
	if in.DBName != nil {
		in, out := &in.DBName, &out.DBName
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseParameters.
func (in *DatabaseParameters) DeepCopy() *DatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpec) DeepCopyInto(out *DatabaseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpec.
func (in *DatabaseSpec) DeepCopy() *DatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseStatus) DeepCopyInto(out *DatabaseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseStatus.
func (in *DatabaseStatus) DeepCopy() *DatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Endpoint) DeepCopyInto(out *Endpoint) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Endpoint.
func (in *Endpoint) DeepCopy() *Endpoint {
	if in == nil {
		return nil
	}
	out := new(Endpoint)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Endpoint) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointAddress) DeepCopyInto(out *EndpointAddress) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointAddress.
func (in *EndpointAddress) DeepCopy() *EndpointAddress {
	if in == nil {
		return nil
	}
	out := new(EndpointAddress)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EndpointAddress) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointAddressInitParameters) DeepCopyInto(out *EndpointAddressInitParameters) {
	*out = *in
	if in.ConnectionPrefix != nil {
		in, out := &in.ConnectionPrefix, &out.ConnectionPrefix
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DBEndpointID != nil {
		in, out := &in.DBEndpointID, &out.DBEndpointID
		*out = new(string)
		**out = **in
	}
	if in.DBEndpointIDRef != nil {
		in, out := &in.DBEndpointIDRef, &out.DBEndpointIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBEndpointIDSelector != nil {
		in, out := &in.DBEndpointIDSelector, &out.DBEndpointIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointAddressInitParameters.
func (in *EndpointAddressInitParameters) DeepCopy() *EndpointAddressInitParameters {
	if in == nil {
		return nil
	}
	out := new(EndpointAddressInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointAddressList) DeepCopyInto(out *EndpointAddressList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]EndpointAddress, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointAddressList.
func (in *EndpointAddressList) DeepCopy() *EndpointAddressList {
	if in == nil {
		return nil
	}
	out := new(EndpointAddressList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EndpointAddressList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointAddressObservation) DeepCopyInto(out *EndpointAddressObservation) {
	*out = *in
	if in.ConnectionPrefix != nil {
		in, out := &in.ConnectionPrefix, &out.ConnectionPrefix
		*out = new(string)
		**out = **in
	}
	if in.ConnectionString != nil {
		in, out := &in.ConnectionString, &out.ConnectionString
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBEndpointID != nil {
		in, out := &in.DBEndpointID, &out.DBEndpointID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPAddress != nil {
		in, out := &in.IPAddress, &out.IPAddress
		*out = new(string)
		**out = **in
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointAddressObservation.
func (in *EndpointAddressObservation) DeepCopy() *EndpointAddressObservation {
	if in == nil {
		return nil
	}
	out := new(EndpointAddressObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointAddressParameters) DeepCopyInto(out *EndpointAddressParameters) {
	*out = *in
	if in.ConnectionPrefix != nil {
		in, out := &in.ConnectionPrefix, &out.ConnectionPrefix
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DBEndpointID != nil {
		in, out := &in.DBEndpointID, &out.DBEndpointID
		*out = new(string)
		**out = **in
	}
	if in.DBEndpointIDRef != nil {
		in, out := &in.DBEndpointIDRef, &out.DBEndpointIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBEndpointIDSelector != nil {
		in, out := &in.DBEndpointIDSelector, &out.DBEndpointIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointAddressParameters.
func (in *EndpointAddressParameters) DeepCopy() *EndpointAddressParameters {
	if in == nil {
		return nil
	}
	out := new(EndpointAddressParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointAddressSpec) DeepCopyInto(out *EndpointAddressSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointAddressSpec.
func (in *EndpointAddressSpec) DeepCopy() *EndpointAddressSpec {
	if in == nil {
		return nil
	}
	out := new(EndpointAddressSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointAddressStatus) DeepCopyInto(out *EndpointAddressStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointAddressStatus.
func (in *EndpointAddressStatus) DeepCopy() *EndpointAddressStatus {
	if in == nil {
		return nil
	}
	out := new(EndpointAddressStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointInitParameters) DeepCopyInto(out *EndpointInitParameters) {
	*out = *in
	if in.AutoAddNewNodes != nil {
		in, out := &in.AutoAddNewNodes, &out.AutoAddNewNodes
		*out = new(string)
		**out = **in
	}
	if in.ConnectionPrefix != nil {
		in, out := &in.ConnectionPrefix, &out.ConnectionPrefix
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DBEndpointDescription != nil {
		in, out := &in.DBEndpointDescription, &out.DBEndpointDescription
		*out = new(string)
		**out = **in
	}
	if in.EndpointConfig != nil {
		in, out := &in.EndpointConfig, &out.EndpointConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.ReadWriteMode != nil {
		in, out := &in.ReadWriteMode, &out.ReadWriteMode
		*out = new(string)
		**out = **in
	}
	if in.SSLAutoRotate != nil {
		in, out := &in.SSLAutoRotate, &out.SSLAutoRotate
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointInitParameters.
func (in *EndpointInitParameters) DeepCopy() *EndpointInitParameters {
	if in == nil {
		return nil
	}
	out := new(EndpointInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointList) DeepCopyInto(out *EndpointList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Endpoint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointList.
func (in *EndpointList) DeepCopy() *EndpointList {
	if in == nil {
		return nil
	}
	out := new(EndpointList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EndpointList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointObservation) DeepCopyInto(out *EndpointObservation) {
	*out = *in
	if in.AutoAddNewNodes != nil {
		in, out := &in.AutoAddNewNodes, &out.AutoAddNewNodes
		*out = new(string)
		**out = **in
	}
	if in.ConnectionPrefix != nil {
		in, out := &in.ConnectionPrefix, &out.ConnectionPrefix
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBEndpointDescription != nil {
		in, out := &in.DBEndpointDescription, &out.DBEndpointDescription
		*out = new(string)
		**out = **in
	}
	if in.DBEndpointID != nil {
		in, out := &in.DBEndpointID, &out.DBEndpointID
		*out = new(string)
		**out = **in
	}
	if in.EndpointConfig != nil {
		in, out := &in.EndpointConfig, &out.EndpointConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.ReadWriteMode != nil {
		in, out := &in.ReadWriteMode, &out.ReadWriteMode
		*out = new(string)
		**out = **in
	}
	if in.SSLAutoRotate != nil {
		in, out := &in.SSLAutoRotate, &out.SSLAutoRotate
		*out = new(string)
		**out = **in
	}
	if in.SSLCertificateURL != nil {
		in, out := &in.SSLCertificateURL, &out.SSLCertificateURL
		*out = new(string)
		**out = **in
	}
	if in.SSLConnectionString != nil {
		in, out := &in.SSLConnectionString, &out.SSLConnectionString
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(string)
		**out = **in
	}
	if in.SSLExpireTime != nil {
		in, out := &in.SSLExpireTime, &out.SSLExpireTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointObservation.
func (in *EndpointObservation) DeepCopy() *EndpointObservation {
	if in == nil {
		return nil
	}
	out := new(EndpointObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointParameters) DeepCopyInto(out *EndpointParameters) {
	*out = *in
	if in.AutoAddNewNodes != nil {
		in, out := &in.AutoAddNewNodes, &out.AutoAddNewNodes
		*out = new(string)
		**out = **in
	}
	if in.ConnectionPrefix != nil {
		in, out := &in.ConnectionPrefix, &out.ConnectionPrefix
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DBEndpointDescription != nil {
		in, out := &in.DBEndpointDescription, &out.DBEndpointDescription
		*out = new(string)
		**out = **in
	}
	if in.EndpointConfig != nil {
		in, out := &in.EndpointConfig, &out.EndpointConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.ReadWriteMode != nil {
		in, out := &in.ReadWriteMode, &out.ReadWriteMode
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SSLAutoRotate != nil {
		in, out := &in.SSLAutoRotate, &out.SSLAutoRotate
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointParameters.
func (in *EndpointParameters) DeepCopy() *EndpointParameters {
	if in == nil {
		return nil
	}
	out := new(EndpointParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointSpec) DeepCopyInto(out *EndpointSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointSpec.
func (in *EndpointSpec) DeepCopy() *EndpointSpec {
	if in == nil {
		return nil
	}
	out := new(EndpointSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EndpointStatus) DeepCopyInto(out *EndpointStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EndpointStatus.
func (in *EndpointStatus) DeepCopy() *EndpointStatus {
	if in == nil {
		return nil
	}
	out := new(EndpointStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GlobalDatabaseNetwork) DeepCopyInto(out *GlobalDatabaseNetwork) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GlobalDatabaseNetwork.
func (in *GlobalDatabaseNetwork) DeepCopy() *GlobalDatabaseNetwork {
	if in == nil {
		return nil
	}
	out := new(GlobalDatabaseNetwork)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GlobalDatabaseNetwork) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GlobalDatabaseNetworkInitParameters) DeepCopyInto(out *GlobalDatabaseNetworkInitParameters) {
	*out = *in
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GlobalDatabaseNetworkInitParameters.
func (in *GlobalDatabaseNetworkInitParameters) DeepCopy() *GlobalDatabaseNetworkInitParameters {
	if in == nil {
		return nil
	}
	out := new(GlobalDatabaseNetworkInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GlobalDatabaseNetworkList) DeepCopyInto(out *GlobalDatabaseNetworkList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GlobalDatabaseNetwork, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GlobalDatabaseNetworkList.
func (in *GlobalDatabaseNetworkList) DeepCopy() *GlobalDatabaseNetworkList {
	if in == nil {
		return nil
	}
	out := new(GlobalDatabaseNetworkList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GlobalDatabaseNetworkList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GlobalDatabaseNetworkObservation) DeepCopyInto(out *GlobalDatabaseNetworkObservation) {
	*out = *in
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GlobalDatabaseNetworkObservation.
func (in *GlobalDatabaseNetworkObservation) DeepCopy() *GlobalDatabaseNetworkObservation {
	if in == nil {
		return nil
	}
	out := new(GlobalDatabaseNetworkObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GlobalDatabaseNetworkParameters) DeepCopyInto(out *GlobalDatabaseNetworkParameters) {
	*out = *in
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GlobalDatabaseNetworkParameters.
func (in *GlobalDatabaseNetworkParameters) DeepCopy() *GlobalDatabaseNetworkParameters {
	if in == nil {
		return nil
	}
	out := new(GlobalDatabaseNetworkParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GlobalDatabaseNetworkSpec) DeepCopyInto(out *GlobalDatabaseNetworkSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GlobalDatabaseNetworkSpec.
func (in *GlobalDatabaseNetworkSpec) DeepCopy() *GlobalDatabaseNetworkSpec {
	if in == nil {
		return nil
	}
	out := new(GlobalDatabaseNetworkSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GlobalDatabaseNetworkStatus) DeepCopyInto(out *GlobalDatabaseNetworkStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GlobalDatabaseNetworkStatus.
func (in *GlobalDatabaseNetworkStatus) DeepCopy() *GlobalDatabaseNetworkStatus {
	if in == nil {
		return nil
	}
	out := new(GlobalDatabaseNetworkStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterGroup) DeepCopyInto(out *ParameterGroup) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterGroup.
func (in *ParameterGroup) DeepCopy() *ParameterGroup {
	if in == nil {
		return nil
	}
	out := new(ParameterGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ParameterGroup) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterGroupInitParameters) DeepCopyInto(out *ParameterGroupInitParameters) {
	*out = *in
	if in.DBType != nil {
		in, out := &in.DBType, &out.DBType
		*out = new(string)
		**out = **in
	}
	if in.DBVersion != nil {
		in, out := &in.DBVersion, &out.DBVersion
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]ParameterGroupParametersInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterGroupInitParameters.
func (in *ParameterGroupInitParameters) DeepCopy() *ParameterGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(ParameterGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterGroupList) DeepCopyInto(out *ParameterGroupList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ParameterGroup, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterGroupList.
func (in *ParameterGroupList) DeepCopy() *ParameterGroupList {
	if in == nil {
		return nil
	}
	out := new(ParameterGroupList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ParameterGroupList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterGroupObservation) DeepCopyInto(out *ParameterGroupObservation) {
	*out = *in
	if in.DBType != nil {
		in, out := &in.DBType, &out.DBType
		*out = new(string)
		**out = **in
	}
	if in.DBVersion != nil {
		in, out := &in.DBVersion, &out.DBVersion
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]ParameterGroupParametersObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterGroupObservation.
func (in *ParameterGroupObservation) DeepCopy() *ParameterGroupObservation {
	if in == nil {
		return nil
	}
	out := new(ParameterGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterGroupParameters) DeepCopyInto(out *ParameterGroupParameters) {
	*out = *in
	if in.DBType != nil {
		in, out := &in.DBType, &out.DBType
		*out = new(string)
		**out = **in
	}
	if in.DBVersion != nil {
		in, out := &in.DBVersion, &out.DBVersion
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Parameters != nil {
		in, out := &in.Parameters, &out.Parameters
		*out = make([]ParameterGroupParametersParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterGroupParameters.
func (in *ParameterGroupParameters) DeepCopy() *ParameterGroupParameters {
	if in == nil {
		return nil
	}
	out := new(ParameterGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterGroupParametersInitParameters) DeepCopyInto(out *ParameterGroupParametersInitParameters) {
	*out = *in
	if in.ParamName != nil {
		in, out := &in.ParamName, &out.ParamName
		*out = new(string)
		**out = **in
	}
	if in.ParamValue != nil {
		in, out := &in.ParamValue, &out.ParamValue
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterGroupParametersInitParameters.
func (in *ParameterGroupParametersInitParameters) DeepCopy() *ParameterGroupParametersInitParameters {
	if in == nil {
		return nil
	}
	out := new(ParameterGroupParametersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterGroupParametersObservation) DeepCopyInto(out *ParameterGroupParametersObservation) {
	*out = *in
	if in.ParamName != nil {
		in, out := &in.ParamName, &out.ParamName
		*out = new(string)
		**out = **in
	}
	if in.ParamValue != nil {
		in, out := &in.ParamValue, &out.ParamValue
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterGroupParametersObservation.
func (in *ParameterGroupParametersObservation) DeepCopy() *ParameterGroupParametersObservation {
	if in == nil {
		return nil
	}
	out := new(ParameterGroupParametersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterGroupParametersParameters) DeepCopyInto(out *ParameterGroupParametersParameters) {
	*out = *in
	if in.ParamName != nil {
		in, out := &in.ParamName, &out.ParamName
		*out = new(string)
		**out = **in
	}
	if in.ParamValue != nil {
		in, out := &in.ParamValue, &out.ParamValue
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterGroupParametersParameters.
func (in *ParameterGroupParametersParameters) DeepCopy() *ParameterGroupParametersParameters {
	if in == nil {
		return nil
	}
	out := new(ParameterGroupParametersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterGroupSpec) DeepCopyInto(out *ParameterGroupSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterGroupSpec.
func (in *ParameterGroupSpec) DeepCopy() *ParameterGroupSpec {
	if in == nil {
		return nil
	}
	out := new(ParameterGroupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParameterGroupStatus) DeepCopyInto(out *ParameterGroupStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParameterGroupStatus.
func (in *ParameterGroupStatus) DeepCopy() *ParameterGroupStatus {
	if in == nil {
		return nil
	}
	out := new(ParameterGroupStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParametersInitParameters) DeepCopyInto(out *ParametersInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParametersInitParameters.
func (in *ParametersInitParameters) DeepCopy() *ParametersInitParameters {
	if in == nil {
		return nil
	}
	out := new(ParametersInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParametersObservation) DeepCopyInto(out *ParametersObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParametersObservation.
func (in *ParametersObservation) DeepCopy() *ParametersObservation {
	if in == nil {
		return nil
	}
	out := new(ParametersObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ParametersParameters) DeepCopyInto(out *ParametersParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ParametersParameters.
func (in *ParametersParameters) DeepCopy() *ParametersParameters {
	if in == nil {
		return nil
	}
	out := new(ParametersParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrimaryEndpoint) DeepCopyInto(out *PrimaryEndpoint) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrimaryEndpoint.
func (in *PrimaryEndpoint) DeepCopy() *PrimaryEndpoint {
	if in == nil {
		return nil
	}
	out := new(PrimaryEndpoint)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrimaryEndpoint) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrimaryEndpointInitParameters) DeepCopyInto(out *PrimaryEndpointInitParameters) {
	*out = *in
	if in.ConnectionPrefix != nil {
		in, out := &in.ConnectionPrefix, &out.ConnectionPrefix
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DBEndpointDescription != nil {
		in, out := &in.DBEndpointDescription, &out.DBEndpointDescription
		*out = new(string)
		**out = **in
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.SSLAutoRotate != nil {
		in, out := &in.SSLAutoRotate, &out.SSLAutoRotate
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrimaryEndpointInitParameters.
func (in *PrimaryEndpointInitParameters) DeepCopy() *PrimaryEndpointInitParameters {
	if in == nil {
		return nil
	}
	out := new(PrimaryEndpointInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrimaryEndpointList) DeepCopyInto(out *PrimaryEndpointList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PrimaryEndpoint, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrimaryEndpointList.
func (in *PrimaryEndpointList) DeepCopy() *PrimaryEndpointList {
	if in == nil {
		return nil
	}
	out := new(PrimaryEndpointList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrimaryEndpointList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrimaryEndpointObservation) DeepCopyInto(out *PrimaryEndpointObservation) {
	*out = *in
	if in.ConnectionPrefix != nil {
		in, out := &in.ConnectionPrefix, &out.ConnectionPrefix
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBEndpointDescription != nil {
		in, out := &in.DBEndpointDescription, &out.DBEndpointDescription
		*out = new(string)
		**out = **in
	}
	if in.DBEndpointID != nil {
		in, out := &in.DBEndpointID, &out.DBEndpointID
		*out = new(string)
		**out = **in
	}
	if in.EndpointType != nil {
		in, out := &in.EndpointType, &out.EndpointType
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.SSLAutoRotate != nil {
		in, out := &in.SSLAutoRotate, &out.SSLAutoRotate
		*out = new(string)
		**out = **in
	}
	if in.SSLCertificateURL != nil {
		in, out := &in.SSLCertificateURL, &out.SSLCertificateURL
		*out = new(string)
		**out = **in
	}
	if in.SSLConnectionString != nil {
		in, out := &in.SSLConnectionString, &out.SSLConnectionString
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(string)
		**out = **in
	}
	if in.SSLExpireTime != nil {
		in, out := &in.SSLExpireTime, &out.SSLExpireTime
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrimaryEndpointObservation.
func (in *PrimaryEndpointObservation) DeepCopy() *PrimaryEndpointObservation {
	if in == nil {
		return nil
	}
	out := new(PrimaryEndpointObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrimaryEndpointParameters) DeepCopyInto(out *PrimaryEndpointParameters) {
	*out = *in
	if in.ConnectionPrefix != nil {
		in, out := &in.ConnectionPrefix, &out.ConnectionPrefix
		*out = new(string)
		**out = **in
	}
	if in.DBClusterID != nil {
		in, out := &in.DBClusterID, &out.DBClusterID
		*out = new(string)
		**out = **in
	}
	if in.DBClusterIDRef != nil {
		in, out := &in.DBClusterIDRef, &out.DBClusterIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.DBClusterIDSelector != nil {
		in, out := &in.DBClusterIDSelector, &out.DBClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.DBEndpointDescription != nil {
		in, out := &in.DBEndpointDescription, &out.DBEndpointDescription
		*out = new(string)
		**out = **in
	}
	if in.NetType != nil {
		in, out := &in.NetType, &out.NetType
		*out = new(string)
		**out = **in
	}
	if in.Port != nil {
		in, out := &in.Port, &out.Port
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.SSLAutoRotate != nil {
		in, out := &in.SSLAutoRotate, &out.SSLAutoRotate
		*out = new(string)
		**out = **in
	}
	if in.SSLEnabled != nil {
		in, out := &in.SSLEnabled, &out.SSLEnabled
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrimaryEndpointParameters.
func (in *PrimaryEndpointParameters) DeepCopy() *PrimaryEndpointParameters {
	if in == nil {
		return nil
	}
	out := new(PrimaryEndpointParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrimaryEndpointSpec) DeepCopyInto(out *PrimaryEndpointSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrimaryEndpointSpec.
func (in *PrimaryEndpointSpec) DeepCopy() *PrimaryEndpointSpec {
	if in == nil {
		return nil
	}
	out := new(PrimaryEndpointSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrimaryEndpointStatus) DeepCopyInto(out *PrimaryEndpointStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrimaryEndpointStatus.
func (in *PrimaryEndpointStatus) DeepCopy() *PrimaryEndpointStatus {
	if in == nil {
		return nil
	}
	out := new(PrimaryEndpointStatus)
	in.DeepCopyInto(out)
	return out
}
