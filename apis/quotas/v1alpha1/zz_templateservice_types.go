// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TemplateServiceInitParameters struct {

	// Status of the quota template. Valid values:
	ServiceStatus *float64 `json:"serviceStatus,omitempty" tf:"service_status,omitempty"`
}

type TemplateServiceObservation struct {

	// The ID of the resource supplied above.The value is formulated as â€œ.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Status of the quota template. Valid values:
	ServiceStatus *float64 `json:"serviceStatus,omitempty" tf:"service_status,omitempty"`
}

type TemplateServiceParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// Status of the quota template. Valid values:
	// +kubebuilder:validation:Optional
	ServiceStatus *float64 `json:"serviceStatus,omitempty" tf:"service_status,omitempty"`
}

// TemplateServiceSpec defines the desired state of TemplateService
type TemplateServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TemplateServiceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TemplateServiceInitParameters `json:"initProvider,omitempty"`
}

// TemplateServiceStatus defines the observed state of TemplateService.
type TemplateServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TemplateServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TemplateService is the Schema for the TemplateServices API. Provides a Alicloud Quotas Template Service resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type TemplateService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceStatus) || (has(self.initProvider) && has(self.initProvider.serviceStatus))",message="spec.forProvider.serviceStatus is a required parameter"
	Spec   TemplateServiceSpec   `json:"spec"`
	Status TemplateServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TemplateServiceList contains a list of TemplateServices
type TemplateServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TemplateService `json:"items"`
}

// Repository type metadata.
var (
	TemplateService_Kind             = "TemplateService"
	TemplateService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TemplateService_Kind}.String()
	TemplateService_KindAPIVersion   = TemplateService_Kind + "." + CRDGroupVersion.String()
	TemplateService_GroupVersionKind = CRDGroupVersion.WithKind(TemplateService_Kind)
)

func init() {
	SchemeBuilder.Register(&TemplateService{}, &TemplateServiceList{})
}
