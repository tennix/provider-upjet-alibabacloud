// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPv4GatewayInitParameters struct {

	// Whether to PreCheck only this request. Value:-true: The check request is sent without creating an IPv4 Gateway. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.-false (default): Sends a normal request, returns an HTTP 2xx status code and directly creates an IPv4 Gateway.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// Whether the IPv4 gateway is active or not. Valid values are true and false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The description of the IPv4 gateway. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	IPv4GatewayDescription *string `json:"ipv4GatewayDescription,omitempty" tf:"ipv4_gateway_description,omitempty"`

	// The name of the IPv4 gateway. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter.
	IPv4GatewayName *string `json:"ipv4GatewayName,omitempty" tf:"ipv4_gateway_name,omitempty"`

	// The public network traffic mode of the VPC after the IPv4 Gateway is deleted:
	InternetMode *string `json:"internetMode,omitempty" tf:"internet_mode,omitempty"`

	// The ID of the resource group to which the instance belongs.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The ID of the virtual private cloud (VPC) where you want to create the IPv4 gateway. You can create only one IPv4 gateway in a VPC.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/vpc/v1alpha1.VPC
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

type IPv4GatewayObservation struct {

	// The creation time of the resource
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Whether to PreCheck only this request. Value:-true: The check request is sent without creating an IPv4 Gateway. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.-false (default): Sends a normal request, returns an HTTP 2xx status code and directly creates an IPv4 Gateway.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// Whether the IPv4 gateway is active or not. Valid values are true and false.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The ID of the resource supplied above.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The description of the IPv4 gateway. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	IPv4GatewayDescription *string `json:"ipv4GatewayDescription,omitempty" tf:"ipv4_gateway_description,omitempty"`

	// Resource primary key field.
	IPv4GatewayID *string `json:"ipv4GatewayId,omitempty" tf:"ipv4_gateway_id,omitempty"`

	// The name of the IPv4 gateway. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter.
	IPv4GatewayName *string `json:"ipv4GatewayName,omitempty" tf:"ipv4_gateway_name,omitempty"`

	// ID of the route table associated with IPv4 Gateway
	IPv4GatewayRouteTableID *string `json:"ipv4GatewayRouteTableId,omitempty" tf:"ipv4_gateway_route_table_id,omitempty"`

	// The public network traffic mode of the VPC after the IPv4 Gateway is deleted:
	InternetMode *string `json:"internetMode,omitempty" tf:"internet_mode,omitempty"`

	// The ID of the resource group to which the instance belongs.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The status of the resource
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The ID of the virtual private cloud (VPC) where you want to create the IPv4 gateway. You can create only one IPv4 gateway in a VPC.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type IPv4GatewayParameters struct {

	// Whether to PreCheck only this request. Value:-true: The check request is sent without creating an IPv4 Gateway. Check items include whether required parameters, request format, and business restrictions are filled in. If the check does not pass, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.-false (default): Sends a normal request, returns an HTTP 2xx status code and directly creates an IPv4 Gateway.
	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// Whether the IPv4 gateway is active or not. Valid values are true and false.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The description of the IPv4 gateway. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	// +kubebuilder:validation:Optional
	IPv4GatewayDescription *string `json:"ipv4GatewayDescription,omitempty" tf:"ipv4_gateway_description,omitempty"`

	// The name of the IPv4 gateway. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter.
	// +kubebuilder:validation:Optional
	IPv4GatewayName *string `json:"ipv4GatewayName,omitempty" tf:"ipv4_gateway_name,omitempty"`

	// The public network traffic mode of the VPC after the IPv4 Gateway is deleted:
	// +kubebuilder:validation:Optional
	InternetMode *string `json:"internetMode,omitempty" tf:"internet_mode,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The ID of the resource group to which the instance belongs.
	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The ID of the virtual private cloud (VPC) where you want to create the IPv4 gateway. You can create only one IPv4 gateway in a VPC.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`
}

// IPv4GatewaySpec defines the desired state of IPv4Gateway
type IPv4GatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPv4GatewayParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IPv4GatewayInitParameters `json:"initProvider,omitempty"`
}

// IPv4GatewayStatus defines the observed state of IPv4Gateway.
type IPv4GatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPv4GatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IPv4Gateway is the Schema for the IPv4Gateways API. Provides a Alicloud VPC Ipv4 Gateway resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type IPv4Gateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IPv4GatewaySpec   `json:"spec"`
	Status            IPv4GatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPv4GatewayList contains a list of IPv4Gateways
type IPv4GatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPv4Gateway `json:"items"`
}

// Repository type metadata.
var (
	IPv4Gateway_Kind             = "IPv4Gateway"
	IPv4Gateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPv4Gateway_Kind}.String()
	IPv4Gateway_KindAPIVersion   = IPv4Gateway_Kind + "." + CRDGroupVersion.String()
	IPv4Gateway_GroupVersionKind = CRDGroupVersion.WithKind(IPv4Gateway_Kind)
)

func init() {
	SchemeBuilder.Register(&IPv4Gateway{}, &IPv4GatewayList{})
}
