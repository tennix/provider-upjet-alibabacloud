// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NextHopRelatedInfoInitParameters struct {
}

type NextHopRelatedInfoObservation struct {

	// InstanceId
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// InstanceType
	InstanceType *string `json:"instanceType,omitempty" tf:"instance_type,omitempty"`

	// The region of the instance associated with the next hop.
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`
}

type NextHopRelatedInfoParameters struct {
}

type NextHopsInitParameters struct {

	// ID of next hop
	NexthopID *string `json:"nexthopId,omitempty" tf:"nexthop_id,omitempty"`

	// type of next hop
	NexthopType *string `json:"nexthopType,omitempty" tf:"nexthop_type,omitempty"`

	// The weight of the route entry.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type NextHopsObservation struct {

	// Whether the route is available.
	Enabled *float64 `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The region of the next instance.
	NextHopRegionID *string `json:"nextHopRegionId,omitempty" tf:"next_hop_region_id,omitempty"`

	// Next hop information.
	NextHopRelatedInfo []NextHopRelatedInfoObservation `json:"nextHopRelatedInfo,omitempty" tf:"next_hop_related_info,omitempty"`

	// ID of next hop
	NexthopID *string `json:"nexthopId,omitempty" tf:"nexthop_id,omitempty"`

	// type of next hop
	NexthopType *string `json:"nexthopType,omitempty" tf:"nexthop_type,omitempty"`

	// The weight of the route entry.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type NextHopsParameters struct {

	// ID of next hop
	// +kubebuilder:validation:Optional
	NexthopID *string `json:"nexthopId,omitempty" tf:"nexthop_id,omitempty"`

	// type of next hop
	// +kubebuilder:validation:Optional
	NexthopType *string `json:"nexthopType,omitempty" tf:"nexthop_type,omitempty"`

	// The weight of the route entry.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RoutePublishTargetsInitParameters struct {

	// Route publish target instance id.
	TargetInstanceID *string `json:"targetInstanceId,omitempty" tf:"target_instance_id,omitempty"`

	// Route publish target type
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`
}

type RoutePublishTargetsObservation struct {

	// Route Publish Status
	PublishStatus *string `json:"publishStatus,omitempty" tf:"publish_status,omitempty"`

	// Route publish target instance id.
	TargetInstanceID *string `json:"targetInstanceId,omitempty" tf:"target_instance_id,omitempty"`

	// Route publish target type
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`
}

type RoutePublishTargetsParameters struct {

	// Route publish target instance id.
	// +kubebuilder:validation:Optional
	TargetInstanceID *string `json:"targetInstanceId,omitempty" tf:"target_instance_id,omitempty"`

	// Route publish target type
	// +kubebuilder:validation:Optional
	TargetType *string `json:"targetType" tf:"target_type,omitempty"`
}

type VPCRouteEntryInitParameters struct {

	// Description of the route entry.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The destination network segment of the routing entry.
	DestinationCidrBlock *string `json:"destinationCidrBlock,omitempty" tf:"destination_cidr_block,omitempty"`

	// Next jump See next_hops below.
	NextHops []NextHopsInitParameters `json:"nextHops,omitempty" tf:"next_hops,omitempty"`

	// The ID of the next hop instance of the custom route entry.
	NexthopID *string `json:"nexthopId,omitempty" tf:"nexthop_id,omitempty"`

	// The type of the next hop of the custom route entry. Valid values:
	NexthopType *string `json:"nexthopType,omitempty" tf:"nexthop_type,omitempty"`

	// The name of the route entry.
	RouteEntryName *string `json:"routeEntryName,omitempty" tf:"route_entry_name,omitempty"`

	// Route publish status and publish target type See route_publish_targets below.
	RoutePublishTargets []RoutePublishTargetsInitParameters `json:"routePublishTargets,omitempty" tf:"route_publish_targets,omitempty"`

	// Routing table ID
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`
}

type VPCRouteEntryObservation struct {

	// Description of the route entry.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The destination network segment of the routing entry.
	DestinationCidrBlock *string `json:"destinationCidrBlock,omitempty" tf:"destination_cidr_block,omitempty"`

	// The ID of the resource supplied above.The value is formulated as <route_table_id>:<destination_cidr_block>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Next jump See next_hops below.
	NextHops []NextHopsObservation `json:"nextHops,omitempty" tf:"next_hops,omitempty"`

	// The ID of the next hop instance of the custom route entry.
	NexthopID *string `json:"nexthopId,omitempty" tf:"nexthop_id,omitempty"`

	// The type of the next hop of the custom route entry. Valid values:
	NexthopType *string `json:"nexthopType,omitempty" tf:"nexthop_type,omitempty"`

	// The name of the route entry.
	RouteEntryName *string `json:"routeEntryName,omitempty" tf:"route_entry_name,omitempty"`

	// Route publish status and publish target type See route_publish_targets below.
	RoutePublishTargets []RoutePublishTargetsObservation `json:"routePublishTargets,omitempty" tf:"route_publish_targets,omitempty"`

	// Routing table ID
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// The status of the route entry.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type VPCRouteEntryParameters struct {

	// Description of the route entry.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The destination network segment of the routing entry.
	// +kubebuilder:validation:Optional
	DestinationCidrBlock *string `json:"destinationCidrBlock,omitempty" tf:"destination_cidr_block,omitempty"`

	// Next jump See next_hops below.
	// +kubebuilder:validation:Optional
	NextHops []NextHopsParameters `json:"nextHops,omitempty" tf:"next_hops,omitempty"`

	// The ID of the next hop instance of the custom route entry.
	// +kubebuilder:validation:Optional
	NexthopID *string `json:"nexthopId,omitempty" tf:"nexthop_id,omitempty"`

	// The type of the next hop of the custom route entry. Valid values:
	// +kubebuilder:validation:Optional
	NexthopType *string `json:"nexthopType,omitempty" tf:"nexthop_type,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The name of the route entry.
	// +kubebuilder:validation:Optional
	RouteEntryName *string `json:"routeEntryName,omitempty" tf:"route_entry_name,omitempty"`

	// Route publish status and publish target type See route_publish_targets below.
	// +kubebuilder:validation:Optional
	RoutePublishTargets []RoutePublishTargetsParameters `json:"routePublishTargets,omitempty" tf:"route_publish_targets,omitempty"`

	// Routing table ID
	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`
}

// VPCRouteEntrySpec defines the desired state of VPCRouteEntry
type VPCRouteEntrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCRouteEntryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPCRouteEntryInitParameters `json:"initProvider,omitempty"`
}

// VPCRouteEntryStatus defines the observed state of VPCRouteEntry.
type VPCRouteEntryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCRouteEntryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VPCRouteEntry is the Schema for the VPCRouteEntrys API. Provides a Alicloud VPC Route Entry resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type VPCRouteEntry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destinationCidrBlock) || (has(self.initProvider) && has(self.initProvider.destinationCidrBlock))",message="spec.forProvider.destinationCidrBlock is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.routeTableId) || (has(self.initProvider) && has(self.initProvider.routeTableId))",message="spec.forProvider.routeTableId is a required parameter"
	Spec   VPCRouteEntrySpec   `json:"spec"`
	Status VPCRouteEntryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCRouteEntryList contains a list of VPCRouteEntrys
type VPCRouteEntryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCRouteEntry `json:"items"`
}

// Repository type metadata.
var (
	VPCRouteEntry_Kind             = "VPCRouteEntry"
	VPCRouteEntry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCRouteEntry_Kind}.String()
	VPCRouteEntry_KindAPIVersion   = VPCRouteEntry_Kind + "." + CRDGroupVersion.String()
	VPCRouteEntry_GroupVersionKind = CRDGroupVersion.WithKind(VPCRouteEntry_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCRouteEntry{}, &VPCRouteEntryList{})
}
