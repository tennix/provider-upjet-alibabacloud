// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NATIPCidrInitParameters struct {

	// Specifies whether to precheck this request only. Valid values: true and false.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// The ID of the Virtual Private Cloud (VPC) NAT gateway where you want to create the NAT CIDR block.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/nat/v1alpha1.Gateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Reference to a Gateway in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDRef *v1.Reference `json:"natGatewayIdRef,omitempty" tf:"-"`

	// Selector for a Gateway in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDSelector *v1.Selector `json:"natGatewayIdSelector,omitempty" tf:"-"`

	// The NAT CIDR block to be created. The CIDR block must meet the following conditions: It must be 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, or one of their subnets. The subnet mask must be 16 to 32 bits in lengths. To use a public CIDR block as the NAT CIDR block, the VPC to which the VPC NAT gateway belongs must be authorized to use public CIDR blocks. For more information, see Create a VPC NAT gateway.
	NATIPCidr *string `json:"natIpCidr,omitempty" tf:"nat_ip_cidr,omitempty"`

	// The description of the NAT CIDR block. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	NATIPCidrDescription *string `json:"natIpCidrDescription,omitempty" tf:"nat_ip_cidr_description,omitempty"`

	// The name of the NAT CIDR block. The name must be 2 to 128 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. It must start with a letter but cannot start with http:// or https://.
	NATIPCidrName *string `json:"natIpCidrName,omitempty" tf:"nat_ip_cidr_name,omitempty"`
}

type NATIPCidrObservation struct {

	// Specifies whether to precheck this request only. Valid values: true and false.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// The resource ID of Nat Ip Cidr. The value formats as <nat_gateway_id>:<nat_ip_cidr>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the Virtual Private Cloud (VPC) NAT gateway where you want to create the NAT CIDR block.
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// The NAT CIDR block to be created. The CIDR block must meet the following conditions: It must be 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, or one of their subnets. The subnet mask must be 16 to 32 bits in lengths. To use a public CIDR block as the NAT CIDR block, the VPC to which the VPC NAT gateway belongs must be authorized to use public CIDR blocks. For more information, see Create a VPC NAT gateway.
	NATIPCidr *string `json:"natIpCidr,omitempty" tf:"nat_ip_cidr,omitempty"`

	// The description of the NAT CIDR block. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	NATIPCidrDescription *string `json:"natIpCidrDescription,omitempty" tf:"nat_ip_cidr_description,omitempty"`

	// The name of the NAT CIDR block. The name must be 2 to 128 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. It must start with a letter but cannot start with http:// or https://.
	NATIPCidrName *string `json:"natIpCidrName,omitempty" tf:"nat_ip_cidr_name,omitempty"`

	// The status of the CIDR block of the NAT gateway. Valid values: Available.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type NATIPCidrParameters struct {

	// Specifies whether to precheck this request only. Valid values: true and false.
	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// The ID of the Virtual Private Cloud (VPC) NAT gateway where you want to create the NAT CIDR block.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/nat/v1alpha1.Gateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Reference to a Gateway in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDRef *v1.Reference `json:"natGatewayIdRef,omitempty" tf:"-"`

	// Selector for a Gateway in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDSelector *v1.Selector `json:"natGatewayIdSelector,omitempty" tf:"-"`

	// The NAT CIDR block to be created. The CIDR block must meet the following conditions: It must be 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, or one of their subnets. The subnet mask must be 16 to 32 bits in lengths. To use a public CIDR block as the NAT CIDR block, the VPC to which the VPC NAT gateway belongs must be authorized to use public CIDR blocks. For more information, see Create a VPC NAT gateway.
	// +kubebuilder:validation:Optional
	NATIPCidr *string `json:"natIpCidr,omitempty" tf:"nat_ip_cidr,omitempty"`

	// The description of the NAT CIDR block. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	// +kubebuilder:validation:Optional
	NATIPCidrDescription *string `json:"natIpCidrDescription,omitempty" tf:"nat_ip_cidr_description,omitempty"`

	// The name of the NAT CIDR block. The name must be 2 to 128 characters in length and can contain digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. It must start with a letter but cannot start with http:// or https://.
	// +kubebuilder:validation:Optional
	NATIPCidrName *string `json:"natIpCidrName,omitempty" tf:"nat_ip_cidr_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`
}

// NATIPCidrSpec defines the desired state of NATIPCidr
type NATIPCidrSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NATIPCidrParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NATIPCidrInitParameters `json:"initProvider,omitempty"`
}

// NATIPCidrStatus defines the observed state of NATIPCidr.
type NATIPCidrStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NATIPCidrObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NATIPCidr is the Schema for the NATIPCidrs API. Provides a Alicloud VPC Nat Ip Cidr resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type NATIPCidr struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NATIPCidrSpec   `json:"spec"`
	Status            NATIPCidrStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NATIPCidrList contains a list of NATIPCidrs
type NATIPCidrList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NATIPCidr `json:"items"`
}

// Repository type metadata.
var (
	NATIPCidr_Kind             = "NATIPCidr"
	NATIPCidr_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NATIPCidr_Kind}.String()
	NATIPCidr_KindAPIVersion   = NATIPCidr_Kind + "." + CRDGroupVersion.String()
	NATIPCidr_GroupVersionKind = CRDGroupVersion.WithKind(NATIPCidr_Kind)
)

func init() {
	SchemeBuilder.Register(&NATIPCidr{}, &NATIPCidrList{})
}
