// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NATIPInitParameters struct {

	// Specifies whether to check the validity of the request without actually making the request.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// The ID of the Virtual Private Cloud (VPC) NAT gateway for which you want to create the NAT IP address.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/nat/v1alpha1.Gateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Reference to a Gateway in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDRef *v1.Reference `json:"natGatewayIdRef,omitempty" tf:"-"`

	// Selector for a Gateway in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDSelector *v1.Selector `json:"natGatewayIdSelector,omitempty" tf:"-"`

	// The NAT IP address that you want to create. If you do not specify an IP address, the system selects a random IP address from the specified CIDR block.
	NATIP *string `json:"natIp,omitempty" tf:"nat_ip,omitempty"`

	// NAT IP ADDRESS of the address segment.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/vpc/v1alpha1.NATIPCidr
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("nat_ip_cidr",false)
	NATIPCidr *string `json:"natIpCidr,omitempty" tf:"nat_ip_cidr,omitempty"`

	// The ID of the CIDR block to which the NAT IP address belongs.
	NATIPCidrID *string `json:"natIpCidrId,omitempty" tf:"nat_ip_cidr_id,omitempty"`

	// Reference to a NATIPCidr in vpc to populate natIpCidr.
	// +kubebuilder:validation:Optional
	NATIPCidrRef *v1.Reference `json:"natIpCidrRef,omitempty" tf:"-"`

	// Selector for a NATIPCidr in vpc to populate natIpCidr.
	// +kubebuilder:validation:Optional
	NATIPCidrSelector *v1.Selector `json:"natIpCidrSelector,omitempty" tf:"-"`

	// NAT IP ADDRESS description of information. Length is from 2 to 256 characters, must start with a letter or the Chinese at the beginning, but not at the http:// Or https:// at the beginning.
	NATIPDescription *string `json:"natIpDescription,omitempty" tf:"nat_ip_description,omitempty"`

	// NAT IP ADDRESS the name of the root directory. Length is from 2 to 128 characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with http:// or https:// at the beginning.
	NATIPName *string `json:"natIpName,omitempty" tf:"nat_ip_name,omitempty"`
}

type NATIPObservation struct {

	// Specifies whether to check the validity of the request without actually making the request.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// The value formats as <nat_gateway_id>:<nat_ip_id>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the Virtual Private Cloud (VPC) NAT gateway for which you want to create the NAT IP address.
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// The NAT IP address that you want to create. If you do not specify an IP address, the system selects a random IP address from the specified CIDR block.
	NATIP *string `json:"natIp,omitempty" tf:"nat_ip,omitempty"`

	// NAT IP ADDRESS of the address segment.
	NATIPCidr *string `json:"natIpCidr,omitempty" tf:"nat_ip_cidr,omitempty"`

	// The ID of the CIDR block to which the NAT IP address belongs.
	NATIPCidrID *string `json:"natIpCidrId,omitempty" tf:"nat_ip_cidr_id,omitempty"`

	// NAT IP ADDRESS description of information. Length is from 2 to 256 characters, must start with a letter or the Chinese at the beginning, but not at the http:// Or https:// at the beginning.
	NATIPDescription *string `json:"natIpDescription,omitempty" tf:"nat_ip_description,omitempty"`

	// Ihe ID of the Nat Ip.
	NATIPID *string `json:"natIpId,omitempty" tf:"nat_ip_id,omitempty"`

	// NAT IP ADDRESS the name of the root directory. Length is from 2 to 128 characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with http:// or https:// at the beginning.
	NATIPName *string `json:"natIpName,omitempty" tf:"nat_ip_name,omitempty"`

	// The status of the NAT IP address. Valid values: Available, Deleting, Creating and Deleted.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type NATIPParameters struct {

	// Specifies whether to check the validity of the request without actually making the request.
	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// The ID of the Virtual Private Cloud (VPC) NAT gateway for which you want to create the NAT IP address.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/nat/v1alpha1.Gateway
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	NATGatewayID *string `json:"natGatewayId,omitempty" tf:"nat_gateway_id,omitempty"`

	// Reference to a Gateway in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDRef *v1.Reference `json:"natGatewayIdRef,omitempty" tf:"-"`

	// Selector for a Gateway in nat to populate natGatewayId.
	// +kubebuilder:validation:Optional
	NATGatewayIDSelector *v1.Selector `json:"natGatewayIdSelector,omitempty" tf:"-"`

	// The NAT IP address that you want to create. If you do not specify an IP address, the system selects a random IP address from the specified CIDR block.
	// +kubebuilder:validation:Optional
	NATIP *string `json:"natIp,omitempty" tf:"nat_ip,omitempty"`

	// NAT IP ADDRESS of the address segment.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/vpc/v1alpha1.NATIPCidr
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("nat_ip_cidr",false)
	// +kubebuilder:validation:Optional
	NATIPCidr *string `json:"natIpCidr,omitempty" tf:"nat_ip_cidr,omitempty"`

	// The ID of the CIDR block to which the NAT IP address belongs.
	// +kubebuilder:validation:Optional
	NATIPCidrID *string `json:"natIpCidrId,omitempty" tf:"nat_ip_cidr_id,omitempty"`

	// Reference to a NATIPCidr in vpc to populate natIpCidr.
	// +kubebuilder:validation:Optional
	NATIPCidrRef *v1.Reference `json:"natIpCidrRef,omitempty" tf:"-"`

	// Selector for a NATIPCidr in vpc to populate natIpCidr.
	// +kubebuilder:validation:Optional
	NATIPCidrSelector *v1.Selector `json:"natIpCidrSelector,omitempty" tf:"-"`

	// NAT IP ADDRESS description of information. Length is from 2 to 256 characters, must start with a letter or the Chinese at the beginning, but not at the http:// Or https:// at the beginning.
	// +kubebuilder:validation:Optional
	NATIPDescription *string `json:"natIpDescription,omitempty" tf:"nat_ip_description,omitempty"`

	// NAT IP ADDRESS the name of the root directory. Length is from 2 to 128 characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with http:// or https:// at the beginning.
	// +kubebuilder:validation:Optional
	NATIPName *string `json:"natIpName,omitempty" tf:"nat_ip_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`
}

// NATIPSpec defines the desired state of NATIP
type NATIPSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NATIPParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NATIPInitParameters `json:"initProvider,omitempty"`
}

// NATIPStatus defines the observed state of NATIP.
type NATIPStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NATIPObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NATIP is the Schema for the NATIPs API. Provides a Alicloud VPC Nat Ip resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type NATIP struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NATIPSpec   `json:"spec"`
	Status            NATIPStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NATIPList contains a list of NATIPs
type NATIPList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NATIP `json:"items"`
}

// Repository type metadata.
var (
	NATIP_Kind             = "NATIP"
	NATIP_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NATIP_Kind}.String()
	NATIP_KindAPIVersion   = NATIP_Kind + "." + CRDGroupVersion.String()
	NATIP_GroupVersionKind = CRDGroupVersion.WithKind(NATIP_Kind)
)

func init() {
	SchemeBuilder.Register(&NATIP{}, &NATIPList{})
}
