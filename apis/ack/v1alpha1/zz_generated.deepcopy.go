//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonsInitParameters) DeepCopyInto(out *AddonsInitParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonsInitParameters.
func (in *AddonsInitParameters) DeepCopy() *AddonsInitParameters {
	if in == nil {
		return nil
	}
	out := new(AddonsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonsObservation) DeepCopyInto(out *AddonsObservation) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonsObservation.
func (in *AddonsObservation) DeepCopy() *AddonsObservation {
	if in == nil {
		return nil
	}
	out := new(AddonsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AddonsParameters) DeepCopyInto(out *AddonsParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AddonsParameters.
func (in *AddonsParameters) DeepCopy() *AddonsParameters {
	if in == nil {
		return nil
	}
	out := new(AddonsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuditLogConfigInitParameters) DeepCopyInto(out *AuditLogConfigInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.SlsProjectName != nil {
		in, out := &in.SlsProjectName, &out.SlsProjectName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuditLogConfigInitParameters.
func (in *AuditLogConfigInitParameters) DeepCopy() *AuditLogConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(AuditLogConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuditLogConfigObservation) DeepCopyInto(out *AuditLogConfigObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.SlsProjectName != nil {
		in, out := &in.SlsProjectName, &out.SlsProjectName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuditLogConfigObservation.
func (in *AuditLogConfigObservation) DeepCopy() *AuditLogConfigObservation {
	if in == nil {
		return nil
	}
	out := new(AuditLogConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AuditLogConfigParameters) DeepCopyInto(out *AuditLogConfigParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.SlsProjectName != nil {
		in, out := &in.SlsProjectName, &out.SlsProjectName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AuditLogConfigParameters.
func (in *AuditLogConfigParameters) DeepCopy() *AuditLogConfigParameters {
	if in == nil {
		return nil
	}
	out := new(AuditLogConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoModeInitParameters) DeepCopyInto(out *AutoModeInitParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoModeInitParameters.
func (in *AutoModeInitParameters) DeepCopy() *AutoModeInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutoModeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoModeObservation) DeepCopyInto(out *AutoModeObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoModeObservation.
func (in *AutoModeObservation) DeepCopy() *AutoModeObservation {
	if in == nil {
		return nil
	}
	out := new(AutoModeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoModeParameters) DeepCopyInto(out *AutoModeParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoModeParameters.
func (in *AutoModeParameters) DeepCopy() *AutoModeParameters {
	if in == nil {
		return nil
	}
	out := new(AutoModeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoRepairPolicyInitParameters) DeepCopyInto(out *AutoRepairPolicyInitParameters) {
	*out = *in
	if in.RestartNode != nil {
		in, out := &in.RestartNode, &out.RestartNode
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoRepairPolicyInitParameters.
func (in *AutoRepairPolicyInitParameters) DeepCopy() *AutoRepairPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutoRepairPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoRepairPolicyObservation) DeepCopyInto(out *AutoRepairPolicyObservation) {
	*out = *in
	if in.RestartNode != nil {
		in, out := &in.RestartNode, &out.RestartNode
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoRepairPolicyObservation.
func (in *AutoRepairPolicyObservation) DeepCopy() *AutoRepairPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(AutoRepairPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoRepairPolicyParameters) DeepCopyInto(out *AutoRepairPolicyParameters) {
	*out = *in
	if in.RestartNode != nil {
		in, out := &in.RestartNode, &out.RestartNode
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoRepairPolicyParameters.
func (in *AutoRepairPolicyParameters) DeepCopy() *AutoRepairPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(AutoRepairPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoUpgradePolicyInitParameters) DeepCopyInto(out *AutoUpgradePolicyInitParameters) {
	*out = *in
	if in.AutoUpgradeKubelet != nil {
		in, out := &in.AutoUpgradeKubelet, &out.AutoUpgradeKubelet
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoUpgradePolicyInitParameters.
func (in *AutoUpgradePolicyInitParameters) DeepCopy() *AutoUpgradePolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutoUpgradePolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoUpgradePolicyObservation) DeepCopyInto(out *AutoUpgradePolicyObservation) {
	*out = *in
	if in.AutoUpgradeKubelet != nil {
		in, out := &in.AutoUpgradeKubelet, &out.AutoUpgradeKubelet
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoUpgradePolicyObservation.
func (in *AutoUpgradePolicyObservation) DeepCopy() *AutoUpgradePolicyObservation {
	if in == nil {
		return nil
	}
	out := new(AutoUpgradePolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoUpgradePolicyParameters) DeepCopyInto(out *AutoUpgradePolicyParameters) {
	*out = *in
	if in.AutoUpgradeKubelet != nil {
		in, out := &in.AutoUpgradeKubelet, &out.AutoUpgradeKubelet
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoUpgradePolicyParameters.
func (in *AutoUpgradePolicyParameters) DeepCopy() *AutoUpgradePolicyParameters {
	if in == nil {
		return nil
	}
	out := new(AutoUpgradePolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoVulFixPolicyInitParameters) DeepCopyInto(out *AutoVulFixPolicyInitParameters) {
	*out = *in
	if in.RestartNode != nil {
		in, out := &in.RestartNode, &out.RestartNode
		*out = new(bool)
		**out = **in
	}
	if in.VulLevel != nil {
		in, out := &in.VulLevel, &out.VulLevel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoVulFixPolicyInitParameters.
func (in *AutoVulFixPolicyInitParameters) DeepCopy() *AutoVulFixPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutoVulFixPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoVulFixPolicyObservation) DeepCopyInto(out *AutoVulFixPolicyObservation) {
	*out = *in
	if in.RestartNode != nil {
		in, out := &in.RestartNode, &out.RestartNode
		*out = new(bool)
		**out = **in
	}
	if in.VulLevel != nil {
		in, out := &in.VulLevel, &out.VulLevel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoVulFixPolicyObservation.
func (in *AutoVulFixPolicyObservation) DeepCopy() *AutoVulFixPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(AutoVulFixPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoVulFixPolicyParameters) DeepCopyInto(out *AutoVulFixPolicyParameters) {
	*out = *in
	if in.RestartNode != nil {
		in, out := &in.RestartNode, &out.RestartNode
		*out = new(bool)
		**out = **in
	}
	if in.VulLevel != nil {
		in, out := &in.VulLevel, &out.VulLevel
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoVulFixPolicyParameters.
func (in *AutoVulFixPolicyParameters) DeepCopy() *AutoVulFixPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(AutoVulFixPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfig) DeepCopyInto(out *AutoscalingConfig) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfig.
func (in *AutoscalingConfig) DeepCopy() *AutoscalingConfig {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AutoscalingConfig) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigInitParameters) DeepCopyInto(out *AutoscalingConfigInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRefs != nil {
		in, out := &in.ClusterIDRefs, &out.ClusterIDRefs
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CoolDownDuration != nil {
		in, out := &in.CoolDownDuration, &out.CoolDownDuration
		*out = new(string)
		**out = **in
	}
	if in.DaemonsetEvictionForNodes != nil {
		in, out := &in.DaemonsetEvictionForNodes, &out.DaemonsetEvictionForNodes
		*out = new(bool)
		**out = **in
	}
	if in.Expander != nil {
		in, out := &in.Expander, &out.Expander
		*out = new(string)
		**out = **in
	}
	if in.GpuUtilizationThreshold != nil {
		in, out := &in.GpuUtilizationThreshold, &out.GpuUtilizationThreshold
		*out = new(string)
		**out = **in
	}
	if in.MaxGracefulTerminationSec != nil {
		in, out := &in.MaxGracefulTerminationSec, &out.MaxGracefulTerminationSec
		*out = new(float64)
		**out = **in
	}
	if in.MinReplicaCount != nil {
		in, out := &in.MinReplicaCount, &out.MinReplicaCount
		*out = new(float64)
		**out = **in
	}
	if in.RecycleNodeDeletionEnabled != nil {
		in, out := &in.RecycleNodeDeletionEnabled, &out.RecycleNodeDeletionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ScaleDownEnabled != nil {
		in, out := &in.ScaleDownEnabled, &out.ScaleDownEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ScaleUpFromZero != nil {
		in, out := &in.ScaleUpFromZero, &out.ScaleUpFromZero
		*out = new(bool)
		**out = **in
	}
	if in.ScalerType != nil {
		in, out := &in.ScalerType, &out.ScalerType
		*out = new(string)
		**out = **in
	}
	if in.ScanInterval != nil {
		in, out := &in.ScanInterval, &out.ScanInterval
		*out = new(string)
		**out = **in
	}
	if in.SkipNodesWithLocalStorage != nil {
		in, out := &in.SkipNodesWithLocalStorage, &out.SkipNodesWithLocalStorage
		*out = new(bool)
		**out = **in
	}
	if in.SkipNodesWithSystemPods != nil {
		in, out := &in.SkipNodesWithSystemPods, &out.SkipNodesWithSystemPods
		*out = new(bool)
		**out = **in
	}
	if in.UnneededDuration != nil {
		in, out := &in.UnneededDuration, &out.UnneededDuration
		*out = new(string)
		**out = **in
	}
	if in.UtilizationThreshold != nil {
		in, out := &in.UtilizationThreshold, &out.UtilizationThreshold
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigInitParameters.
func (in *AutoscalingConfigInitParameters) DeepCopy() *AutoscalingConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigList) DeepCopyInto(out *AutoscalingConfigList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AutoscalingConfig, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigList.
func (in *AutoscalingConfigList) DeepCopy() *AutoscalingConfigList {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AutoscalingConfigList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigObservation) DeepCopyInto(out *AutoscalingConfigObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CoolDownDuration != nil {
		in, out := &in.CoolDownDuration, &out.CoolDownDuration
		*out = new(string)
		**out = **in
	}
	if in.DaemonsetEvictionForNodes != nil {
		in, out := &in.DaemonsetEvictionForNodes, &out.DaemonsetEvictionForNodes
		*out = new(bool)
		**out = **in
	}
	if in.Expander != nil {
		in, out := &in.Expander, &out.Expander
		*out = new(string)
		**out = **in
	}
	if in.GpuUtilizationThreshold != nil {
		in, out := &in.GpuUtilizationThreshold, &out.GpuUtilizationThreshold
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.MaxGracefulTerminationSec != nil {
		in, out := &in.MaxGracefulTerminationSec, &out.MaxGracefulTerminationSec
		*out = new(float64)
		**out = **in
	}
	if in.MinReplicaCount != nil {
		in, out := &in.MinReplicaCount, &out.MinReplicaCount
		*out = new(float64)
		**out = **in
	}
	if in.RecycleNodeDeletionEnabled != nil {
		in, out := &in.RecycleNodeDeletionEnabled, &out.RecycleNodeDeletionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ScaleDownEnabled != nil {
		in, out := &in.ScaleDownEnabled, &out.ScaleDownEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ScaleUpFromZero != nil {
		in, out := &in.ScaleUpFromZero, &out.ScaleUpFromZero
		*out = new(bool)
		**out = **in
	}
	if in.ScalerType != nil {
		in, out := &in.ScalerType, &out.ScalerType
		*out = new(string)
		**out = **in
	}
	if in.ScanInterval != nil {
		in, out := &in.ScanInterval, &out.ScanInterval
		*out = new(string)
		**out = **in
	}
	if in.SkipNodesWithLocalStorage != nil {
		in, out := &in.SkipNodesWithLocalStorage, &out.SkipNodesWithLocalStorage
		*out = new(bool)
		**out = **in
	}
	if in.SkipNodesWithSystemPods != nil {
		in, out := &in.SkipNodesWithSystemPods, &out.SkipNodesWithSystemPods
		*out = new(bool)
		**out = **in
	}
	if in.UnneededDuration != nil {
		in, out := &in.UnneededDuration, &out.UnneededDuration
		*out = new(string)
		**out = **in
	}
	if in.UtilizationThreshold != nil {
		in, out := &in.UtilizationThreshold, &out.UtilizationThreshold
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigObservation.
func (in *AutoscalingConfigObservation) DeepCopy() *AutoscalingConfigObservation {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigParameters) DeepCopyInto(out *AutoscalingConfigParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRefs != nil {
		in, out := &in.ClusterIDRefs, &out.ClusterIDRefs
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CoolDownDuration != nil {
		in, out := &in.CoolDownDuration, &out.CoolDownDuration
		*out = new(string)
		**out = **in
	}
	if in.DaemonsetEvictionForNodes != nil {
		in, out := &in.DaemonsetEvictionForNodes, &out.DaemonsetEvictionForNodes
		*out = new(bool)
		**out = **in
	}
	if in.Expander != nil {
		in, out := &in.Expander, &out.Expander
		*out = new(string)
		**out = **in
	}
	if in.GpuUtilizationThreshold != nil {
		in, out := &in.GpuUtilizationThreshold, &out.GpuUtilizationThreshold
		*out = new(string)
		**out = **in
	}
	if in.MaxGracefulTerminationSec != nil {
		in, out := &in.MaxGracefulTerminationSec, &out.MaxGracefulTerminationSec
		*out = new(float64)
		**out = **in
	}
	if in.MinReplicaCount != nil {
		in, out := &in.MinReplicaCount, &out.MinReplicaCount
		*out = new(float64)
		**out = **in
	}
	if in.RecycleNodeDeletionEnabled != nil {
		in, out := &in.RecycleNodeDeletionEnabled, &out.RecycleNodeDeletionEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.ScaleDownEnabled != nil {
		in, out := &in.ScaleDownEnabled, &out.ScaleDownEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ScaleUpFromZero != nil {
		in, out := &in.ScaleUpFromZero, &out.ScaleUpFromZero
		*out = new(bool)
		**out = **in
	}
	if in.ScalerType != nil {
		in, out := &in.ScalerType, &out.ScalerType
		*out = new(string)
		**out = **in
	}
	if in.ScanInterval != nil {
		in, out := &in.ScanInterval, &out.ScanInterval
		*out = new(string)
		**out = **in
	}
	if in.SkipNodesWithLocalStorage != nil {
		in, out := &in.SkipNodesWithLocalStorage, &out.SkipNodesWithLocalStorage
		*out = new(bool)
		**out = **in
	}
	if in.SkipNodesWithSystemPods != nil {
		in, out := &in.SkipNodesWithSystemPods, &out.SkipNodesWithSystemPods
		*out = new(bool)
		**out = **in
	}
	if in.UnneededDuration != nil {
		in, out := &in.UnneededDuration, &out.UnneededDuration
		*out = new(string)
		**out = **in
	}
	if in.UtilizationThreshold != nil {
		in, out := &in.UtilizationThreshold, &out.UtilizationThreshold
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigParameters.
func (in *AutoscalingConfigParameters) DeepCopy() *AutoscalingConfigParameters {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigSpec) DeepCopyInto(out *AutoscalingConfigSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigSpec.
func (in *AutoscalingConfigSpec) DeepCopy() *AutoscalingConfigSpec {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AutoscalingConfigStatus) DeepCopyInto(out *AutoscalingConfigStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AutoscalingConfigStatus.
func (in *AutoscalingConfigStatus) DeepCopy() *AutoscalingConfigStatus {
	if in == nil {
		return nil
	}
	out := new(AutoscalingConfigStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAutoUpgradeInitParameters) DeepCopyInto(out *ClusterAutoUpgradeInitParameters) {
	*out = *in
	if in.Channel != nil {
		in, out := &in.Channel, &out.Channel
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAutoUpgradeInitParameters.
func (in *ClusterAutoUpgradeInitParameters) DeepCopy() *ClusterAutoUpgradeInitParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterAutoUpgradeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAutoUpgradeObservation) DeepCopyInto(out *ClusterAutoUpgradeObservation) {
	*out = *in
	if in.Channel != nil {
		in, out := &in.Channel, &out.Channel
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAutoUpgradeObservation.
func (in *ClusterAutoUpgradeObservation) DeepCopy() *ClusterAutoUpgradeObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterAutoUpgradeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterAutoUpgradeParameters) DeepCopyInto(out *ClusterAutoUpgradeParameters) {
	*out = *in
	if in.Channel != nil {
		in, out := &in.Channel, &out.Channel
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterAutoUpgradeParameters.
func (in *ClusterAutoUpgradeParameters) DeepCopy() *ClusterAutoUpgradeParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterAutoUpgradeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDisksInitParameters) DeepCopyInto(out *DataDisksInitParameters) {
	*out = *in
	if in.AutoFormat != nil {
		in, out := &in.AutoFormat, &out.AutoFormat
		*out = new(string)
		**out = **in
	}
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.BurstingEnabled != nil {
		in, out := &in.BurstingEnabled, &out.BurstingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.ProvisionedIops != nil {
		in, out := &in.ProvisionedIops, &out.ProvisionedIops
		*out = new(float64)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDisksInitParameters.
func (in *DataDisksInitParameters) DeepCopy() *DataDisksInitParameters {
	if in == nil {
		return nil
	}
	out := new(DataDisksInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDisksObservation) DeepCopyInto(out *DataDisksObservation) {
	*out = *in
	if in.AutoFormat != nil {
		in, out := &in.AutoFormat, &out.AutoFormat
		*out = new(string)
		**out = **in
	}
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.BurstingEnabled != nil {
		in, out := &in.BurstingEnabled, &out.BurstingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.ProvisionedIops != nil {
		in, out := &in.ProvisionedIops, &out.ProvisionedIops
		*out = new(float64)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDisksObservation.
func (in *DataDisksObservation) DeepCopy() *DataDisksObservation {
	if in == nil {
		return nil
	}
	out := new(DataDisksObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataDisksParameters) DeepCopyInto(out *DataDisksParameters) {
	*out = *in
	if in.AutoFormat != nil {
		in, out := &in.AutoFormat, &out.AutoFormat
		*out = new(string)
		**out = **in
	}
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.BurstingEnabled != nil {
		in, out := &in.BurstingEnabled, &out.BurstingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.FileSystem != nil {
		in, out := &in.FileSystem, &out.FileSystem
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.MountTarget != nil {
		in, out := &in.MountTarget, &out.MountTarget
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.ProvisionedIops != nil {
		in, out := &in.ProvisionedIops, &out.ProvisionedIops
		*out = new(float64)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(float64)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataDisksParameters.
func (in *DataDisksParameters) DeepCopy() *DataDisksParameters {
	if in == nil {
		return nil
	}
	out := new(DataDisksParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeleteOptionsInitParameters) DeepCopyInto(out *DeleteOptionsInitParameters) {
	*out = *in
	if in.DeleteMode != nil {
		in, out := &in.DeleteMode, &out.DeleteMode
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeleteOptionsInitParameters.
func (in *DeleteOptionsInitParameters) DeepCopy() *DeleteOptionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(DeleteOptionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeleteOptionsObservation) DeepCopyInto(out *DeleteOptionsObservation) {
	*out = *in
	if in.DeleteMode != nil {
		in, out := &in.DeleteMode, &out.DeleteMode
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeleteOptionsObservation.
func (in *DeleteOptionsObservation) DeepCopy() *DeleteOptionsObservation {
	if in == nil {
		return nil
	}
	out := new(DeleteOptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DeleteOptionsParameters) DeepCopyInto(out *DeleteOptionsParameters) {
	*out = *in
	if in.DeleteMode != nil {
		in, out := &in.DeleteMode, &out.DeleteMode
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DeleteOptionsParameters.
func (in *DeleteOptionsParameters) DeepCopy() *DeleteOptionsParameters {
	if in == nil {
		return nil
	}
	out := new(DeleteOptionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetes) DeepCopyInto(out *EdgeKubernetes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetes.
func (in *EdgeKubernetes) DeepCopy() *EdgeKubernetes {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EdgeKubernetes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesInitParameters) DeepCopyInto(out *EdgeKubernetesInitParameters) {
	*out = *in
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]AddonsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterSpec != nil {
		in, out := &in.ClusterSpec, &out.ClusterSpec
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = make([]LogConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCidrMask != nil {
		in, out := &in.NodeCidrMask, &out.NodeCidrMask
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.SkipSetCertificateAuthority != nil {
		in, out := &in.SkipSetCertificateAuthority, &out.SkipSetCertificateAuthority
		*out = new(bool)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]WorkerDataDisksInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(float64)
		**out = **in
	}
	if in.WorkerVswitchIDsRefs != nil {
		in, out := &in.WorkerVswitchIDsRefs, &out.WorkerVswitchIDsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerVswitchIDsSelector != nil {
		in, out := &in.WorkerVswitchIDsSelector, &out.WorkerVswitchIDsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkerVswitchIds != nil {
		in, out := &in.WorkerVswitchIds, &out.WorkerVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesInitParameters.
func (in *EdgeKubernetesInitParameters) DeepCopy() *EdgeKubernetesInitParameters {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesList) DeepCopyInto(out *EdgeKubernetesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]EdgeKubernetes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesList.
func (in *EdgeKubernetesList) DeepCopy() *EdgeKubernetesList {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EdgeKubernetesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesObservation) DeepCopyInto(out *EdgeKubernetesObservation) {
	*out = *in
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]AddonsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.CertificateAuthority != nil {
		in, out := &in.CertificateAuthority, &out.CertificateAuthority
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterSpec != nil {
		in, out := &in.ClusterSpec, &out.ClusterSpec
		*out = new(string)
		**out = **in
	}
	if in.Connections != nil {
		in, out := &in.Connections, &out.Connections
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = make([]LogConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NATGatewayID != nil {
		in, out := &in.NATGatewayID, &out.NATGatewayID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCidrMask != nil {
		in, out := &in.NodeCidrMask, &out.NodeCidrMask
		*out = new(float64)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.SkipSetCertificateAuthority != nil {
		in, out := &in.SkipSetCertificateAuthority, &out.SkipSetCertificateAuthority
		*out = new(bool)
		**out = **in
	}
	if in.SlbInternet != nil {
		in, out := &in.SlbInternet, &out.SlbInternet
		*out = new(string)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SlbIntranet != nil {
		in, out := &in.SlbIntranet, &out.SlbIntranet
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]WorkerDataDisksObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]WorkerNodesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(float64)
		**out = **in
	}
	if in.WorkerRAMRoleName != nil {
		in, out := &in.WorkerRAMRoleName, &out.WorkerRAMRoleName
		*out = new(string)
		**out = **in
	}
	if in.WorkerVswitchIds != nil {
		in, out := &in.WorkerVswitchIds, &out.WorkerVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesObservation.
func (in *EdgeKubernetesObservation) DeepCopy() *EdgeKubernetesObservation {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesParameters) DeepCopyInto(out *EdgeKubernetesParameters) {
	*out = *in
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]AddonsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterSpec != nil {
		in, out := &in.ClusterSpec, &out.ClusterSpec
		*out = new(string)
		**out = **in
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = make([]LogConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCidrMask != nil {
		in, out := &in.NodeCidrMask, &out.NodeCidrMask
		*out = new(float64)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.SkipSetCertificateAuthority != nil {
		in, out := &in.SkipSetCertificateAuthority, &out.SkipSetCertificateAuthority
		*out = new(bool)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]WorkerDataDisksParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(float64)
		**out = **in
	}
	if in.WorkerVswitchIDsRefs != nil {
		in, out := &in.WorkerVswitchIDsRefs, &out.WorkerVswitchIDsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerVswitchIDsSelector != nil {
		in, out := &in.WorkerVswitchIDsSelector, &out.WorkerVswitchIDsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkerVswitchIds != nil {
		in, out := &in.WorkerVswitchIds, &out.WorkerVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesParameters.
func (in *EdgeKubernetesParameters) DeepCopy() *EdgeKubernetesParameters {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesSpec) DeepCopyInto(out *EdgeKubernetesSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesSpec.
func (in *EdgeKubernetesSpec) DeepCopy() *EdgeKubernetesSpec {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeKubernetesStatus) DeepCopyInto(out *EdgeKubernetesStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeKubernetesStatus.
func (in *EdgeKubernetesStatus) DeepCopy() *EdgeKubernetesStatus {
	if in == nil {
		return nil
	}
	out := new(EdgeKubernetesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EfloNodeGroupInitParameters) DeepCopyInto(out *EfloNodeGroupInitParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EfloNodeGroupInitParameters.
func (in *EfloNodeGroupInitParameters) DeepCopy() *EfloNodeGroupInitParameters {
	if in == nil {
		return nil
	}
	out := new(EfloNodeGroupInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EfloNodeGroupObservation) DeepCopyInto(out *EfloNodeGroupObservation) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EfloNodeGroupObservation.
func (in *EfloNodeGroupObservation) DeepCopy() *EfloNodeGroupObservation {
	if in == nil {
		return nil
	}
	out := new(EfloNodeGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EfloNodeGroupParameters) DeepCopyInto(out *EfloNodeGroupParameters) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EfloNodeGroupParameters.
func (in *EfloNodeGroupParameters) DeepCopy() *EfloNodeGroupParameters {
	if in == nil {
		return nil
	}
	out := new(EfloNodeGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubeletConfigurationInitParameters) DeepCopyInto(out *KubeletConfigurationInitParameters) {
	*out = *in
	if in.AllowedUnsafeSysctls != nil {
		in, out := &in.AllowedUnsafeSysctls, &out.AllowedUnsafeSysctls
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CPUCfsQuota != nil {
		in, out := &in.CPUCfsQuota, &out.CPUCfsQuota
		*out = new(string)
		**out = **in
	}
	if in.CPUCfsQuotaPeriod != nil {
		in, out := &in.CPUCfsQuotaPeriod, &out.CPUCfsQuotaPeriod
		*out = new(string)
		**out = **in
	}
	if in.CPUManagerPolicy != nil {
		in, out := &in.CPUManagerPolicy, &out.CPUManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClusterDNS != nil {
		in, out := &in.ClusterDNS, &out.ClusterDNS
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContainerLogMaxFiles != nil {
		in, out := &in.ContainerLogMaxFiles, &out.ContainerLogMaxFiles
		*out = new(string)
		**out = **in
	}
	if in.ContainerLogMaxSize != nil {
		in, out := &in.ContainerLogMaxSize, &out.ContainerLogMaxSize
		*out = new(string)
		**out = **in
	}
	if in.ContainerLogMaxWorkers != nil {
		in, out := &in.ContainerLogMaxWorkers, &out.ContainerLogMaxWorkers
		*out = new(string)
		**out = **in
	}
	if in.ContainerLogMonitorInterval != nil {
		in, out := &in.ContainerLogMonitorInterval, &out.ContainerLogMonitorInterval
		*out = new(string)
		**out = **in
	}
	if in.EventBurst != nil {
		in, out := &in.EventBurst, &out.EventBurst
		*out = new(string)
		**out = **in
	}
	if in.EventRecordQPS != nil {
		in, out := &in.EventRecordQPS, &out.EventRecordQPS
		*out = new(string)
		**out = **in
	}
	if in.EvictionHard != nil {
		in, out := &in.EvictionHard, &out.EvictionHard
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EvictionSoft != nil {
		in, out := &in.EvictionSoft, &out.EvictionSoft
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EvictionSoftGracePeriod != nil {
		in, out := &in.EvictionSoftGracePeriod, &out.EvictionSoftGracePeriod
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.FeatureGates != nil {
		in, out := &in.FeatureGates, &out.FeatureGates
		*out = make(map[string]*bool, len(*in))
		for key, val := range *in {
			var outVal *bool
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(bool)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ImageGcHighThresholdPercent != nil {
		in, out := &in.ImageGcHighThresholdPercent, &out.ImageGcHighThresholdPercent
		*out = new(string)
		**out = **in
	}
	if in.ImageGcLowThresholdPercent != nil {
		in, out := &in.ImageGcLowThresholdPercent, &out.ImageGcLowThresholdPercent
		*out = new(string)
		**out = **in
	}
	if in.KubeAPIBurst != nil {
		in, out := &in.KubeAPIBurst, &out.KubeAPIBurst
		*out = new(string)
		**out = **in
	}
	if in.KubeAPIQPS != nil {
		in, out := &in.KubeAPIQPS, &out.KubeAPIQPS
		*out = new(string)
		**out = **in
	}
	if in.KubeReserved != nil {
		in, out := &in.KubeReserved, &out.KubeReserved
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(string)
		**out = **in
	}
	if in.MemoryManagerPolicy != nil {
		in, out := &in.MemoryManagerPolicy, &out.MemoryManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.PodPidsLimit != nil {
		in, out := &in.PodPidsLimit, &out.PodPidsLimit
		*out = new(string)
		**out = **in
	}
	if in.ReadOnlyPort != nil {
		in, out := &in.ReadOnlyPort, &out.ReadOnlyPort
		*out = new(string)
		**out = **in
	}
	if in.RegistryBurst != nil {
		in, out := &in.RegistryBurst, &out.RegistryBurst
		*out = new(string)
		**out = **in
	}
	if in.RegistryPullQPS != nil {
		in, out := &in.RegistryPullQPS, &out.RegistryPullQPS
		*out = new(string)
		**out = **in
	}
	if in.ReservedMemory != nil {
		in, out := &in.ReservedMemory, &out.ReservedMemory
		*out = make([]ReservedMemoryInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SerializeImagePulls != nil {
		in, out := &in.SerializeImagePulls, &out.SerializeImagePulls
		*out = new(string)
		**out = **in
	}
	if in.SystemReserved != nil {
		in, out := &in.SystemReserved, &out.SystemReserved
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TopologyManagerPolicy != nil {
		in, out := &in.TopologyManagerPolicy, &out.TopologyManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.Tracing != nil {
		in, out := &in.Tracing, &out.Tracing
		*out = make([]TracingInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubeletConfigurationInitParameters.
func (in *KubeletConfigurationInitParameters) DeepCopy() *KubeletConfigurationInitParameters {
	if in == nil {
		return nil
	}
	out := new(KubeletConfigurationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubeletConfigurationObservation) DeepCopyInto(out *KubeletConfigurationObservation) {
	*out = *in
	if in.AllowedUnsafeSysctls != nil {
		in, out := &in.AllowedUnsafeSysctls, &out.AllowedUnsafeSysctls
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CPUCfsQuota != nil {
		in, out := &in.CPUCfsQuota, &out.CPUCfsQuota
		*out = new(string)
		**out = **in
	}
	if in.CPUCfsQuotaPeriod != nil {
		in, out := &in.CPUCfsQuotaPeriod, &out.CPUCfsQuotaPeriod
		*out = new(string)
		**out = **in
	}
	if in.CPUManagerPolicy != nil {
		in, out := &in.CPUManagerPolicy, &out.CPUManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClusterDNS != nil {
		in, out := &in.ClusterDNS, &out.ClusterDNS
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContainerLogMaxFiles != nil {
		in, out := &in.ContainerLogMaxFiles, &out.ContainerLogMaxFiles
		*out = new(string)
		**out = **in
	}
	if in.ContainerLogMaxSize != nil {
		in, out := &in.ContainerLogMaxSize, &out.ContainerLogMaxSize
		*out = new(string)
		**out = **in
	}
	if in.ContainerLogMaxWorkers != nil {
		in, out := &in.ContainerLogMaxWorkers, &out.ContainerLogMaxWorkers
		*out = new(string)
		**out = **in
	}
	if in.ContainerLogMonitorInterval != nil {
		in, out := &in.ContainerLogMonitorInterval, &out.ContainerLogMonitorInterval
		*out = new(string)
		**out = **in
	}
	if in.EventBurst != nil {
		in, out := &in.EventBurst, &out.EventBurst
		*out = new(string)
		**out = **in
	}
	if in.EventRecordQPS != nil {
		in, out := &in.EventRecordQPS, &out.EventRecordQPS
		*out = new(string)
		**out = **in
	}
	if in.EvictionHard != nil {
		in, out := &in.EvictionHard, &out.EvictionHard
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EvictionSoft != nil {
		in, out := &in.EvictionSoft, &out.EvictionSoft
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EvictionSoftGracePeriod != nil {
		in, out := &in.EvictionSoftGracePeriod, &out.EvictionSoftGracePeriod
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.FeatureGates != nil {
		in, out := &in.FeatureGates, &out.FeatureGates
		*out = make(map[string]*bool, len(*in))
		for key, val := range *in {
			var outVal *bool
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(bool)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ImageGcHighThresholdPercent != nil {
		in, out := &in.ImageGcHighThresholdPercent, &out.ImageGcHighThresholdPercent
		*out = new(string)
		**out = **in
	}
	if in.ImageGcLowThresholdPercent != nil {
		in, out := &in.ImageGcLowThresholdPercent, &out.ImageGcLowThresholdPercent
		*out = new(string)
		**out = **in
	}
	if in.KubeAPIBurst != nil {
		in, out := &in.KubeAPIBurst, &out.KubeAPIBurst
		*out = new(string)
		**out = **in
	}
	if in.KubeAPIQPS != nil {
		in, out := &in.KubeAPIQPS, &out.KubeAPIQPS
		*out = new(string)
		**out = **in
	}
	if in.KubeReserved != nil {
		in, out := &in.KubeReserved, &out.KubeReserved
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(string)
		**out = **in
	}
	if in.MemoryManagerPolicy != nil {
		in, out := &in.MemoryManagerPolicy, &out.MemoryManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.PodPidsLimit != nil {
		in, out := &in.PodPidsLimit, &out.PodPidsLimit
		*out = new(string)
		**out = **in
	}
	if in.ReadOnlyPort != nil {
		in, out := &in.ReadOnlyPort, &out.ReadOnlyPort
		*out = new(string)
		**out = **in
	}
	if in.RegistryBurst != nil {
		in, out := &in.RegistryBurst, &out.RegistryBurst
		*out = new(string)
		**out = **in
	}
	if in.RegistryPullQPS != nil {
		in, out := &in.RegistryPullQPS, &out.RegistryPullQPS
		*out = new(string)
		**out = **in
	}
	if in.ReservedMemory != nil {
		in, out := &in.ReservedMemory, &out.ReservedMemory
		*out = make([]ReservedMemoryObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SerializeImagePulls != nil {
		in, out := &in.SerializeImagePulls, &out.SerializeImagePulls
		*out = new(string)
		**out = **in
	}
	if in.SystemReserved != nil {
		in, out := &in.SystemReserved, &out.SystemReserved
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TopologyManagerPolicy != nil {
		in, out := &in.TopologyManagerPolicy, &out.TopologyManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.Tracing != nil {
		in, out := &in.Tracing, &out.Tracing
		*out = make([]TracingObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubeletConfigurationObservation.
func (in *KubeletConfigurationObservation) DeepCopy() *KubeletConfigurationObservation {
	if in == nil {
		return nil
	}
	out := new(KubeletConfigurationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubeletConfigurationParameters) DeepCopyInto(out *KubeletConfigurationParameters) {
	*out = *in
	if in.AllowedUnsafeSysctls != nil {
		in, out := &in.AllowedUnsafeSysctls, &out.AllowedUnsafeSysctls
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CPUCfsQuota != nil {
		in, out := &in.CPUCfsQuota, &out.CPUCfsQuota
		*out = new(string)
		**out = **in
	}
	if in.CPUCfsQuotaPeriod != nil {
		in, out := &in.CPUCfsQuotaPeriod, &out.CPUCfsQuotaPeriod
		*out = new(string)
		**out = **in
	}
	if in.CPUManagerPolicy != nil {
		in, out := &in.CPUManagerPolicy, &out.CPUManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClusterDNS != nil {
		in, out := &in.ClusterDNS, &out.ClusterDNS
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ContainerLogMaxFiles != nil {
		in, out := &in.ContainerLogMaxFiles, &out.ContainerLogMaxFiles
		*out = new(string)
		**out = **in
	}
	if in.ContainerLogMaxSize != nil {
		in, out := &in.ContainerLogMaxSize, &out.ContainerLogMaxSize
		*out = new(string)
		**out = **in
	}
	if in.ContainerLogMaxWorkers != nil {
		in, out := &in.ContainerLogMaxWorkers, &out.ContainerLogMaxWorkers
		*out = new(string)
		**out = **in
	}
	if in.ContainerLogMonitorInterval != nil {
		in, out := &in.ContainerLogMonitorInterval, &out.ContainerLogMonitorInterval
		*out = new(string)
		**out = **in
	}
	if in.EventBurst != nil {
		in, out := &in.EventBurst, &out.EventBurst
		*out = new(string)
		**out = **in
	}
	if in.EventRecordQPS != nil {
		in, out := &in.EventRecordQPS, &out.EventRecordQPS
		*out = new(string)
		**out = **in
	}
	if in.EvictionHard != nil {
		in, out := &in.EvictionHard, &out.EvictionHard
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EvictionSoft != nil {
		in, out := &in.EvictionSoft, &out.EvictionSoft
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.EvictionSoftGracePeriod != nil {
		in, out := &in.EvictionSoftGracePeriod, &out.EvictionSoftGracePeriod
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.FeatureGates != nil {
		in, out := &in.FeatureGates, &out.FeatureGates
		*out = make(map[string]*bool, len(*in))
		for key, val := range *in {
			var outVal *bool
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(bool)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ImageGcHighThresholdPercent != nil {
		in, out := &in.ImageGcHighThresholdPercent, &out.ImageGcHighThresholdPercent
		*out = new(string)
		**out = **in
	}
	if in.ImageGcLowThresholdPercent != nil {
		in, out := &in.ImageGcLowThresholdPercent, &out.ImageGcLowThresholdPercent
		*out = new(string)
		**out = **in
	}
	if in.KubeAPIBurst != nil {
		in, out := &in.KubeAPIBurst, &out.KubeAPIBurst
		*out = new(string)
		**out = **in
	}
	if in.KubeAPIQPS != nil {
		in, out := &in.KubeAPIQPS, &out.KubeAPIQPS
		*out = new(string)
		**out = **in
	}
	if in.KubeReserved != nil {
		in, out := &in.KubeReserved, &out.KubeReserved
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaxPods != nil {
		in, out := &in.MaxPods, &out.MaxPods
		*out = new(string)
		**out = **in
	}
	if in.MemoryManagerPolicy != nil {
		in, out := &in.MemoryManagerPolicy, &out.MemoryManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.PodPidsLimit != nil {
		in, out := &in.PodPidsLimit, &out.PodPidsLimit
		*out = new(string)
		**out = **in
	}
	if in.ReadOnlyPort != nil {
		in, out := &in.ReadOnlyPort, &out.ReadOnlyPort
		*out = new(string)
		**out = **in
	}
	if in.RegistryBurst != nil {
		in, out := &in.RegistryBurst, &out.RegistryBurst
		*out = new(string)
		**out = **in
	}
	if in.RegistryPullQPS != nil {
		in, out := &in.RegistryPullQPS, &out.RegistryPullQPS
		*out = new(string)
		**out = **in
	}
	if in.ReservedMemory != nil {
		in, out := &in.ReservedMemory, &out.ReservedMemory
		*out = make([]ReservedMemoryParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SerializeImagePulls != nil {
		in, out := &in.SerializeImagePulls, &out.SerializeImagePulls
		*out = new(string)
		**out = **in
	}
	if in.SystemReserved != nil {
		in, out := &in.SystemReserved, &out.SystemReserved
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TopologyManagerPolicy != nil {
		in, out := &in.TopologyManagerPolicy, &out.TopologyManagerPolicy
		*out = new(string)
		**out = **in
	}
	if in.Tracing != nil {
		in, out := &in.Tracing, &out.Tracing
		*out = make([]TracingParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubeletConfigurationParameters.
func (in *KubeletConfigurationParameters) DeepCopy() *KubeletConfigurationParameters {
	if in == nil {
		return nil
	}
	out := new(KubeletConfigurationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Kubernetes) DeepCopyInto(out *Kubernetes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Kubernetes.
func (in *Kubernetes) DeepCopy() *Kubernetes {
	if in == nil {
		return nil
	}
	out := new(Kubernetes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Kubernetes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddon) DeepCopyInto(out *KubernetesAddon) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddon.
func (in *KubernetesAddon) DeepCopy() *KubernetesAddon {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddon)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesAddon) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonInitParameters) DeepCopyInto(out *KubernetesAddonInitParameters) {
	*out = *in
	if in.CleanupCloudResources != nil {
		in, out := &in.CleanupCloudResources, &out.CleanupCloudResources
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRefs != nil {
		in, out := &in.ClusterIDRefs, &out.ClusterIDRefs
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonInitParameters.
func (in *KubernetesAddonInitParameters) DeepCopy() *KubernetesAddonInitParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonList) DeepCopyInto(out *KubernetesAddonList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KubernetesAddon, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonList.
func (in *KubernetesAddonList) DeepCopy() *KubernetesAddonList {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesAddonList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonObservation) DeepCopyInto(out *KubernetesAddonObservation) {
	*out = *in
	if in.CanUpgrade != nil {
		in, out := &in.CanUpgrade, &out.CanUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.CleanupCloudResources != nil {
		in, out := &in.CleanupCloudResources, &out.CleanupCloudResources
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NextVersion != nil {
		in, out := &in.NextVersion, &out.NextVersion
		*out = new(string)
		**out = **in
	}
	if in.Required != nil {
		in, out := &in.Required, &out.Required
		*out = new(bool)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonObservation.
func (in *KubernetesAddonObservation) DeepCopy() *KubernetesAddonObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonParameters) DeepCopyInto(out *KubernetesAddonParameters) {
	*out = *in
	if in.CleanupCloudResources != nil {
		in, out := &in.CleanupCloudResources, &out.CleanupCloudResources
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRefs != nil {
		in, out := &in.ClusterIDRefs, &out.ClusterIDRefs
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonParameters.
func (in *KubernetesAddonParameters) DeepCopy() *KubernetesAddonParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonSpec) DeepCopyInto(out *KubernetesAddonSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonSpec.
func (in *KubernetesAddonSpec) DeepCopy() *KubernetesAddonSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonStatus) DeepCopyInto(out *KubernetesAddonStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonStatus.
func (in *KubernetesAddonStatus) DeepCopy() *KubernetesAddonStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonsInitParameters) DeepCopyInto(out *KubernetesAddonsInitParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonsInitParameters.
func (in *KubernetesAddonsInitParameters) DeepCopy() *KubernetesAddonsInitParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonsObservation) DeepCopyInto(out *KubernetesAddonsObservation) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonsObservation.
func (in *KubernetesAddonsObservation) DeepCopy() *KubernetesAddonsObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesAddonsParameters) DeepCopyInto(out *KubernetesAddonsParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesAddonsParameters.
func (in *KubernetesAddonsParameters) DeepCopy() *KubernetesAddonsParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesAddonsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesInitParameters) DeepCopyInto(out *KubernetesInitParameters) {
	*out = *in
	if in.APIAudiences != nil {
		in, out := &in.APIAudiences, &out.APIAudiences
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]KubernetesAddonsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.CPUPolicy != nil {
		in, out := &in.CPUPolicy, &out.CPUPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterDomain != nil {
		in, out := &in.ClusterDomain, &out.ClusterDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterNetworkType != nil {
		in, out := &in.ClusterNetworkType, &out.ClusterNetworkType
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeleteOptions != nil {
		in, out := &in.DeleteOptions, &out.DeleteOptions
		*out = make([]DeleteOptionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.ExcludeAutoscalerNodes != nil {
		in, out := &in.ExcludeAutoscalerNodes, &out.ExcludeAutoscalerNodes
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KMSEncryptedPassword != nil {
		in, out := &in.KMSEncryptedPassword, &out.KMSEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = make([]KubernetesLogConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MasterAutoRenew != nil {
		in, out := &in.MasterAutoRenew, &out.MasterAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.MasterAutoRenewPeriod != nil {
		in, out := &in.MasterAutoRenewPeriod, &out.MasterAutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MasterDiskCategory != nil {
		in, out := &in.MasterDiskCategory, &out.MasterDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.MasterDiskPerformanceLevel != nil {
		in, out := &in.MasterDiskPerformanceLevel, &out.MasterDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.MasterDiskSize != nil {
		in, out := &in.MasterDiskSize, &out.MasterDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.MasterDiskSnapshotPolicyID != nil {
		in, out := &in.MasterDiskSnapshotPolicyID, &out.MasterDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceChargeType != nil {
		in, out := &in.MasterInstanceChargeType, &out.MasterInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceType != nil {
		in, out := &in.MasterInstanceType, &out.MasterInstanceType
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceTypes != nil {
		in, out := &in.MasterInstanceTypes, &out.MasterInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterPeriod != nil {
		in, out := &in.MasterPeriod, &out.MasterPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MasterPeriodUnit != nil {
		in, out := &in.MasterPeriodUnit, &out.MasterPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.MasterVswitchIds != nil {
		in, out := &in.MasterVswitchIds, &out.MasterVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterVswitchIdsRefs != nil {
		in, out := &in.MasterVswitchIdsRefs, &out.MasterVswitchIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MasterVswitchIdsSelector != nil {
		in, out := &in.MasterVswitchIdsSelector, &out.MasterVswitchIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCidrMask != nil {
		in, out := &in.NodeCidrMask, &out.NodeCidrMask
		*out = new(float64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePortRange != nil {
		in, out := &in.NodePortRange, &out.NodePortRange
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.PodVswitchIds != nil {
		in, out := &in.PodVswitchIds, &out.PodVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PodVswitchIdsRefs != nil {
		in, out := &in.PodVswitchIdsRefs, &out.PodVswitchIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PodVswitchIdsSelector != nil {
		in, out := &in.PodVswitchIdsSelector, &out.PodVswitchIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountIssuer != nil {
		in, out := &in.ServiceAccountIssuer, &out.ServiceAccountIssuer
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.SkipSetCertificateAuthority != nil {
		in, out := &in.SkipSetCertificateAuthority, &out.SkipSetCertificateAuthority
		*out = new(bool)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.UserCA != nil {
		in, out := &in.UserCA, &out.UserCA
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIDRef != nil {
		in, out := &in.VswitchIDRef, &out.VswitchIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchIDSelector != nil {
		in, out := &in.VswitchIDSelector, &out.VswitchIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchIDsRefs != nil {
		in, out := &in.VswitchIDsRefs, &out.VswitchIDsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VswitchIDsSelector != nil {
		in, out := &in.VswitchIDsSelector, &out.VswitchIDsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerAutoRenew != nil {
		in, out := &in.WorkerAutoRenew, &out.WorkerAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.WorkerAutoRenewPeriod != nil {
		in, out := &in.WorkerAutoRenewPeriod, &out.WorkerAutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDiskCategory != nil {
		in, out := &in.WorkerDataDiskCategory, &out.WorkerDataDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDiskSize != nil {
		in, out := &in.WorkerDataDiskSize, &out.WorkerDataDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]KubernetesWorkerDataDisksInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceType != nil {
		in, out := &in.WorkerInstanceType, &out.WorkerInstanceType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]KubernetesWorkerNodesInitParameters, len(*in))
		copy(*out, *in)
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(float64)
		**out = **in
	}
	if in.WorkerNumbers != nil {
		in, out := &in.WorkerNumbers, &out.WorkerNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.WorkerPeriod != nil {
		in, out := &in.WorkerPeriod, &out.WorkerPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerPeriodUnit != nil {
		in, out := &in.WorkerPeriodUnit, &out.WorkerPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.WorkerVswitchIds != nil {
		in, out := &in.WorkerVswitchIds, &out.WorkerVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesInitParameters.
func (in *KubernetesInitParameters) DeepCopy() *KubernetesInitParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesList) DeepCopyInto(out *KubernetesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Kubernetes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesList.
func (in *KubernetesList) DeepCopy() *KubernetesList {
	if in == nil {
		return nil
	}
	out := new(KubernetesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesLogConfigInitParameters) DeepCopyInto(out *KubernetesLogConfigInitParameters) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesLogConfigInitParameters.
func (in *KubernetesLogConfigInitParameters) DeepCopy() *KubernetesLogConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesLogConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesLogConfigObservation) DeepCopyInto(out *KubernetesLogConfigObservation) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesLogConfigObservation.
func (in *KubernetesLogConfigObservation) DeepCopy() *KubernetesLogConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesLogConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesLogConfigParameters) DeepCopyInto(out *KubernetesLogConfigParameters) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesLogConfigParameters.
func (in *KubernetesLogConfigParameters) DeepCopy() *KubernetesLogConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesLogConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePool) DeepCopyInto(out *KubernetesNodePool) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePool.
func (in *KubernetesNodePool) DeepCopy() *KubernetesNodePool {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePool)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesNodePool) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolInitParameters) DeepCopyInto(out *KubernetesNodePoolInitParameters) {
	*out = *in
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.AutoRenewPeriod != nil {
		in, out := &in.AutoRenewPeriod, &out.AutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.CPUPolicy != nil {
		in, out := &in.CPUPolicy, &out.CPUPolicy
		*out = new(string)
		**out = **in
	}
	if in.CisEnabled != nil {
		in, out := &in.CisEnabled, &out.CisEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRefs != nil {
		in, out := &in.ClusterIDRefs, &out.ClusterIDRefs
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CompensateWithOnDemand != nil {
		in, out := &in.CompensateWithOnDemand, &out.CompensateWithOnDemand
		*out = new(bool)
		**out = **in
	}
	if in.DataDisks != nil {
		in, out := &in.DataDisks, &out.DataDisks
		*out = make([]DataDisksInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeploymentSetID != nil {
		in, out := &in.DeploymentSetID, &out.DeploymentSetID
		*out = new(string)
		**out = **in
	}
	if in.DesiredSize != nil {
		in, out := &in.DesiredSize, &out.DesiredSize
		*out = new(string)
		**out = **in
	}
	if in.EfloNodeGroup != nil {
		in, out := &in.EfloNodeGroup, &out.EfloNodeGroup
		*out = make([]EfloNodeGroupInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ForceDelete != nil {
		in, out := &in.ForceDelete, &out.ForceDelete
		*out = new(bool)
		**out = **in
	}
	if in.FormatDisk != nil {
		in, out := &in.FormatDisk, &out.FormatDisk
		*out = new(bool)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.ImageType != nil {
		in, out := &in.ImageType, &out.ImageType
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceTypes != nil {
		in, out := &in.InstanceTypes, &out.InstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Instances != nil {
		in, out := &in.Instances, &out.Instances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KMSEncryptedPasswordSecretRef != nil {
		in, out := &in.KMSEncryptedPasswordSecretRef, &out.KMSEncryptedPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.KeepInstanceName != nil {
		in, out := &in.KeepInstanceName, &out.KeepInstanceName
		*out = new(bool)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KeyNameRef != nil {
		in, out := &in.KeyNameRef, &out.KeyNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KeyNameSelector != nil {
		in, out := &in.KeyNameSelector, &out.KeyNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.KubeletConfiguration != nil {
		in, out := &in.KubeletConfiguration, &out.KubeletConfiguration
		*out = make([]KubeletConfigurationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]LabelsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LoginAsNonRoot != nil {
		in, out := &in.LoginAsNonRoot, &out.LoginAsNonRoot
		*out = new(bool)
		**out = **in
	}
	if in.Management != nil {
		in, out := &in.Management, &out.Management
		*out = make([]ManagementInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MultiAzPolicy != nil {
		in, out := &in.MultiAzPolicy, &out.MultiAzPolicy
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePoolName != nil {
		in, out := &in.NodePoolName, &out.NodePoolName
		*out = new(string)
		**out = **in
	}
	if in.OnDemandBaseCapacity != nil {
		in, out := &in.OnDemandBaseCapacity, &out.OnDemandBaseCapacity
		*out = new(string)
		**out = **in
	}
	if in.OnDemandPercentageAboveBaseCapacity != nil {
		in, out := &in.OnDemandPercentageAboveBaseCapacity, &out.OnDemandPercentageAboveBaseCapacity
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PreUserData != nil {
		in, out := &in.PreUserData, &out.PreUserData
		*out = new(string)
		**out = **in
	}
	if in.PrivatePoolOptions != nil {
		in, out := &in.PrivatePoolOptions, &out.PrivatePoolOptions
		*out = make([]PrivatePoolOptionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RAMRoleName != nil {
		in, out := &in.RAMRoleName, &out.RAMRoleName
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RollingPolicy != nil {
		in, out := &in.RollingPolicy, &out.RollingPolicy
		*out = make([]RollingPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RolloutPolicy != nil {
		in, out := &in.RolloutPolicy, &out.RolloutPolicy
		*out = make([]RolloutPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RuntimeName != nil {
		in, out := &in.RuntimeName, &out.RuntimeName
		*out = new(string)
		**out = **in
	}
	if in.RuntimeVersion != nil {
		in, out := &in.RuntimeVersion, &out.RuntimeVersion
		*out = new(string)
		**out = **in
	}
	if in.ScalingConfig != nil {
		in, out := &in.ScalingConfig, &out.ScalingConfig
		*out = make([]ScalingConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ScalingPolicy != nil {
		in, out := &in.ScalingPolicy, &out.ScalingPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRefs != nil {
		in, out := &in.SecurityGroupIDRefs, &out.SecurityGroupIDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityHardeningOs != nil {
		in, out := &in.SecurityHardeningOs, &out.SecurityHardeningOs
		*out = new(bool)
		**out = **in
	}
	if in.SocEnabled != nil {
		in, out := &in.SocEnabled, &out.SocEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SpotInstancePools != nil {
		in, out := &in.SpotInstancePools, &out.SpotInstancePools
		*out = new(float64)
		**out = **in
	}
	if in.SpotInstanceRemedy != nil {
		in, out := &in.SpotInstanceRemedy, &out.SpotInstanceRemedy
		*out = new(bool)
		**out = **in
	}
	if in.SpotPriceLimit != nil {
		in, out := &in.SpotPriceLimit, &out.SpotPriceLimit
		*out = make([]SpotPriceLimitInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SpotStrategy != nil {
		in, out := &in.SpotStrategy, &out.SpotStrategy
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskBurstingEnabled != nil {
		in, out := &in.SystemDiskBurstingEnabled, &out.SystemDiskBurstingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SystemDiskCategories != nil {
		in, out := &in.SystemDiskCategories, &out.SystemDiskCategories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SystemDiskCategory != nil {
		in, out := &in.SystemDiskCategory, &out.SystemDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskEncryptAlgorithm != nil {
		in, out := &in.SystemDiskEncryptAlgorithm, &out.SystemDiskEncryptAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskEncrypted != nil {
		in, out := &in.SystemDiskEncrypted, &out.SystemDiskEncrypted
		*out = new(bool)
		**out = **in
	}
	if in.SystemDiskKMSKey != nil {
		in, out := &in.SystemDiskKMSKey, &out.SystemDiskKMSKey
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskPerformanceLevel != nil {
		in, out := &in.SystemDiskPerformanceLevel, &out.SystemDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskProvisionedIops != nil {
		in, out := &in.SystemDiskProvisionedIops, &out.SystemDiskProvisionedIops
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskSnapshotPolicyID != nil {
		in, out := &in.SystemDiskSnapshotPolicyID, &out.SystemDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]KubernetesNodePoolTaintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TeeConfig != nil {
		in, out := &in.TeeConfig, &out.TeeConfig
		*out = make([]TeeConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(bool)
		**out = **in
	}
	if in.UpdateNodes != nil {
		in, out := &in.UpdateNodes, &out.UpdateNodes
		*out = new(bool)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VswitchIdsRefs != nil {
		in, out := &in.VswitchIdsRefs, &out.VswitchIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VswitchIdsSelector != nil {
		in, out := &in.VswitchIdsSelector, &out.VswitchIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolInitParameters.
func (in *KubernetesNodePoolInitParameters) DeepCopy() *KubernetesNodePoolInitParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolList) DeepCopyInto(out *KubernetesNodePoolList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KubernetesNodePool, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolList.
func (in *KubernetesNodePoolList) DeepCopy() *KubernetesNodePoolList {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesNodePoolList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolObservation) DeepCopyInto(out *KubernetesNodePoolObservation) {
	*out = *in
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.AutoRenewPeriod != nil {
		in, out := &in.AutoRenewPeriod, &out.AutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.CPUPolicy != nil {
		in, out := &in.CPUPolicy, &out.CPUPolicy
		*out = new(string)
		**out = **in
	}
	if in.CisEnabled != nil {
		in, out := &in.CisEnabled, &out.CisEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.CompensateWithOnDemand != nil {
		in, out := &in.CompensateWithOnDemand, &out.CompensateWithOnDemand
		*out = new(bool)
		**out = **in
	}
	if in.DataDisks != nil {
		in, out := &in.DataDisks, &out.DataDisks
		*out = make([]DataDisksObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeploymentSetID != nil {
		in, out := &in.DeploymentSetID, &out.DeploymentSetID
		*out = new(string)
		**out = **in
	}
	if in.DesiredSize != nil {
		in, out := &in.DesiredSize, &out.DesiredSize
		*out = new(string)
		**out = **in
	}
	if in.EfloNodeGroup != nil {
		in, out := &in.EfloNodeGroup, &out.EfloNodeGroup
		*out = make([]EfloNodeGroupObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ForceDelete != nil {
		in, out := &in.ForceDelete, &out.ForceDelete
		*out = new(bool)
		**out = **in
	}
	if in.FormatDisk != nil {
		in, out := &in.FormatDisk, &out.FormatDisk
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.ImageType != nil {
		in, out := &in.ImageType, &out.ImageType
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceTypes != nil {
		in, out := &in.InstanceTypes, &out.InstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Instances != nil {
		in, out := &in.Instances, &out.Instances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.KeepInstanceName != nil {
		in, out := &in.KeepInstanceName, &out.KeepInstanceName
		*out = new(bool)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeletConfiguration != nil {
		in, out := &in.KubeletConfiguration, &out.KubeletConfiguration
		*out = make([]KubeletConfigurationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]LabelsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LoginAsNonRoot != nil {
		in, out := &in.LoginAsNonRoot, &out.LoginAsNonRoot
		*out = new(bool)
		**out = **in
	}
	if in.Management != nil {
		in, out := &in.Management, &out.Management
		*out = make([]ManagementObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MultiAzPolicy != nil {
		in, out := &in.MultiAzPolicy, &out.MultiAzPolicy
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePoolID != nil {
		in, out := &in.NodePoolID, &out.NodePoolID
		*out = new(string)
		**out = **in
	}
	if in.NodePoolName != nil {
		in, out := &in.NodePoolName, &out.NodePoolName
		*out = new(string)
		**out = **in
	}
	if in.OnDemandBaseCapacity != nil {
		in, out := &in.OnDemandBaseCapacity, &out.OnDemandBaseCapacity
		*out = new(string)
		**out = **in
	}
	if in.OnDemandPercentageAboveBaseCapacity != nil {
		in, out := &in.OnDemandPercentageAboveBaseCapacity, &out.OnDemandPercentageAboveBaseCapacity
		*out = new(string)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PreUserData != nil {
		in, out := &in.PreUserData, &out.PreUserData
		*out = new(string)
		**out = **in
	}
	if in.PrivatePoolOptions != nil {
		in, out := &in.PrivatePoolOptions, &out.PrivatePoolOptions
		*out = make([]PrivatePoolOptionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RAMRoleName != nil {
		in, out := &in.RAMRoleName, &out.RAMRoleName
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RollingPolicy != nil {
		in, out := &in.RollingPolicy, &out.RollingPolicy
		*out = make([]RollingPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RolloutPolicy != nil {
		in, out := &in.RolloutPolicy, &out.RolloutPolicy
		*out = make([]RolloutPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RuntimeName != nil {
		in, out := &in.RuntimeName, &out.RuntimeName
		*out = new(string)
		**out = **in
	}
	if in.RuntimeVersion != nil {
		in, out := &in.RuntimeVersion, &out.RuntimeVersion
		*out = new(string)
		**out = **in
	}
	if in.ScalingConfig != nil {
		in, out := &in.ScalingConfig, &out.ScalingConfig
		*out = make([]ScalingConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ScalingGroupID != nil {
		in, out := &in.ScalingGroupID, &out.ScalingGroupID
		*out = new(string)
		**out = **in
	}
	if in.ScalingPolicy != nil {
		in, out := &in.ScalingPolicy, &out.ScalingPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityHardeningOs != nil {
		in, out := &in.SecurityHardeningOs, &out.SecurityHardeningOs
		*out = new(bool)
		**out = **in
	}
	if in.SocEnabled != nil {
		in, out := &in.SocEnabled, &out.SocEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SpotInstancePools != nil {
		in, out := &in.SpotInstancePools, &out.SpotInstancePools
		*out = new(float64)
		**out = **in
	}
	if in.SpotInstanceRemedy != nil {
		in, out := &in.SpotInstanceRemedy, &out.SpotInstanceRemedy
		*out = new(bool)
		**out = **in
	}
	if in.SpotPriceLimit != nil {
		in, out := &in.SpotPriceLimit, &out.SpotPriceLimit
		*out = make([]SpotPriceLimitObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SpotStrategy != nil {
		in, out := &in.SpotStrategy, &out.SpotStrategy
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskBurstingEnabled != nil {
		in, out := &in.SystemDiskBurstingEnabled, &out.SystemDiskBurstingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SystemDiskCategories != nil {
		in, out := &in.SystemDiskCategories, &out.SystemDiskCategories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SystemDiskCategory != nil {
		in, out := &in.SystemDiskCategory, &out.SystemDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskEncryptAlgorithm != nil {
		in, out := &in.SystemDiskEncryptAlgorithm, &out.SystemDiskEncryptAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskEncrypted != nil {
		in, out := &in.SystemDiskEncrypted, &out.SystemDiskEncrypted
		*out = new(bool)
		**out = **in
	}
	if in.SystemDiskKMSKey != nil {
		in, out := &in.SystemDiskKMSKey, &out.SystemDiskKMSKey
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskPerformanceLevel != nil {
		in, out := &in.SystemDiskPerformanceLevel, &out.SystemDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskProvisionedIops != nil {
		in, out := &in.SystemDiskProvisionedIops, &out.SystemDiskProvisionedIops
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskSnapshotPolicyID != nil {
		in, out := &in.SystemDiskSnapshotPolicyID, &out.SystemDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]KubernetesNodePoolTaintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TeeConfig != nil {
		in, out := &in.TeeConfig, &out.TeeConfig
		*out = make([]TeeConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(bool)
		**out = **in
	}
	if in.UpdateNodes != nil {
		in, out := &in.UpdateNodes, &out.UpdateNodes
		*out = new(bool)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolObservation.
func (in *KubernetesNodePoolObservation) DeepCopy() *KubernetesNodePoolObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolParameters) DeepCopyInto(out *KubernetesNodePoolParameters) {
	*out = *in
	if in.AutoRenew != nil {
		in, out := &in.AutoRenew, &out.AutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.AutoRenewPeriod != nil {
		in, out := &in.AutoRenewPeriod, &out.AutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.CPUPolicy != nil {
		in, out := &in.CPUPolicy, &out.CPUPolicy
		*out = new(string)
		**out = **in
	}
	if in.CisEnabled != nil {
		in, out := &in.CisEnabled, &out.CisEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRefs != nil {
		in, out := &in.ClusterIDRefs, &out.ClusterIDRefs
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.CompensateWithOnDemand != nil {
		in, out := &in.CompensateWithOnDemand, &out.CompensateWithOnDemand
		*out = new(bool)
		**out = **in
	}
	if in.DataDisks != nil {
		in, out := &in.DataDisks, &out.DataDisks
		*out = make([]DataDisksParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeploymentSetID != nil {
		in, out := &in.DeploymentSetID, &out.DeploymentSetID
		*out = new(string)
		**out = **in
	}
	if in.DesiredSize != nil {
		in, out := &in.DesiredSize, &out.DesiredSize
		*out = new(string)
		**out = **in
	}
	if in.EfloNodeGroup != nil {
		in, out := &in.EfloNodeGroup, &out.EfloNodeGroup
		*out = make([]EfloNodeGroupParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ForceDelete != nil {
		in, out := &in.ForceDelete, &out.ForceDelete
		*out = new(bool)
		**out = **in
	}
	if in.FormatDisk != nil {
		in, out := &in.FormatDisk, &out.FormatDisk
		*out = new(bool)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.ImageType != nil {
		in, out := &in.ImageType, &out.ImageType
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.InstanceChargeType != nil {
		in, out := &in.InstanceChargeType, &out.InstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.InstanceTypes != nil {
		in, out := &in.InstanceTypes, &out.InstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Instances != nil {
		in, out := &in.Instances, &out.Instances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.InternetChargeType != nil {
		in, out := &in.InternetChargeType, &out.InternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.InternetMaxBandwidthOut != nil {
		in, out := &in.InternetMaxBandwidthOut, &out.InternetMaxBandwidthOut
		*out = new(float64)
		**out = **in
	}
	if in.KMSEncryptedPasswordSecretRef != nil {
		in, out := &in.KMSEncryptedPasswordSecretRef, &out.KMSEncryptedPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.KeepInstanceName != nil {
		in, out := &in.KeepInstanceName, &out.KeepInstanceName
		*out = new(bool)
		**out = **in
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KeyNameRef != nil {
		in, out := &in.KeyNameRef, &out.KeyNameRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.KeyNameSelector != nil {
		in, out := &in.KeyNameSelector, &out.KeyNameSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.KubeletConfiguration != nil {
		in, out := &in.KubeletConfiguration, &out.KubeletConfiguration
		*out = make([]KubeletConfigurationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make([]LabelsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LoginAsNonRoot != nil {
		in, out := &in.LoginAsNonRoot, &out.LoginAsNonRoot
		*out = new(bool)
		**out = **in
	}
	if in.Management != nil {
		in, out := &in.Management, &out.Management
		*out = make([]ManagementParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MultiAzPolicy != nil {
		in, out := &in.MultiAzPolicy, &out.MultiAzPolicy
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NodeCount != nil {
		in, out := &in.NodeCount, &out.NodeCount
		*out = new(float64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePoolName != nil {
		in, out := &in.NodePoolName, &out.NodePoolName
		*out = new(string)
		**out = **in
	}
	if in.OnDemandBaseCapacity != nil {
		in, out := &in.OnDemandBaseCapacity, &out.OnDemandBaseCapacity
		*out = new(string)
		**out = **in
	}
	if in.OnDemandPercentageAboveBaseCapacity != nil {
		in, out := &in.OnDemandPercentageAboveBaseCapacity, &out.OnDemandPercentageAboveBaseCapacity
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Period != nil {
		in, out := &in.Period, &out.Period
		*out = new(float64)
		**out = **in
	}
	if in.PeriodUnit != nil {
		in, out := &in.PeriodUnit, &out.PeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PreUserData != nil {
		in, out := &in.PreUserData, &out.PreUserData
		*out = new(string)
		**out = **in
	}
	if in.PrivatePoolOptions != nil {
		in, out := &in.PrivatePoolOptions, &out.PrivatePoolOptions
		*out = make([]PrivatePoolOptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RAMRoleName != nil {
		in, out := &in.RAMRoleName, &out.RAMRoleName
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RollingPolicy != nil {
		in, out := &in.RollingPolicy, &out.RollingPolicy
		*out = make([]RollingPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RolloutPolicy != nil {
		in, out := &in.RolloutPolicy, &out.RolloutPolicy
		*out = make([]RolloutPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.RuntimeName != nil {
		in, out := &in.RuntimeName, &out.RuntimeName
		*out = new(string)
		**out = **in
	}
	if in.RuntimeVersion != nil {
		in, out := &in.RuntimeVersion, &out.RuntimeVersion
		*out = new(string)
		**out = **in
	}
	if in.ScalingConfig != nil {
		in, out := &in.ScalingConfig, &out.ScalingConfig
		*out = make([]ScalingConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ScalingPolicy != nil {
		in, out := &in.ScalingPolicy, &out.ScalingPolicy
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRefs != nil {
		in, out := &in.SecurityGroupIDRefs, &out.SecurityGroupIDRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityHardeningOs != nil {
		in, out := &in.SecurityHardeningOs, &out.SecurityHardeningOs
		*out = new(bool)
		**out = **in
	}
	if in.SocEnabled != nil {
		in, out := &in.SocEnabled, &out.SocEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SpotInstancePools != nil {
		in, out := &in.SpotInstancePools, &out.SpotInstancePools
		*out = new(float64)
		**out = **in
	}
	if in.SpotInstanceRemedy != nil {
		in, out := &in.SpotInstanceRemedy, &out.SpotInstanceRemedy
		*out = new(bool)
		**out = **in
	}
	if in.SpotPriceLimit != nil {
		in, out := &in.SpotPriceLimit, &out.SpotPriceLimit
		*out = make([]SpotPriceLimitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SpotStrategy != nil {
		in, out := &in.SpotStrategy, &out.SpotStrategy
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskBurstingEnabled != nil {
		in, out := &in.SystemDiskBurstingEnabled, &out.SystemDiskBurstingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SystemDiskCategories != nil {
		in, out := &in.SystemDiskCategories, &out.SystemDiskCategories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SystemDiskCategory != nil {
		in, out := &in.SystemDiskCategory, &out.SystemDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskEncryptAlgorithm != nil {
		in, out := &in.SystemDiskEncryptAlgorithm, &out.SystemDiskEncryptAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskEncrypted != nil {
		in, out := &in.SystemDiskEncrypted, &out.SystemDiskEncrypted
		*out = new(bool)
		**out = **in
	}
	if in.SystemDiskKMSKey != nil {
		in, out := &in.SystemDiskKMSKey, &out.SystemDiskKMSKey
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskPerformanceLevel != nil {
		in, out := &in.SystemDiskPerformanceLevel, &out.SystemDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.SystemDiskProvisionedIops != nil {
		in, out := &in.SystemDiskProvisionedIops, &out.SystemDiskProvisionedIops
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskSize != nil {
		in, out := &in.SystemDiskSize, &out.SystemDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.SystemDiskSnapshotPolicyID != nil {
		in, out := &in.SystemDiskSnapshotPolicyID, &out.SystemDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]KubernetesNodePoolTaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TeeConfig != nil {
		in, out := &in.TeeConfig, &out.TeeConfig
		*out = make([]TeeConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Unschedulable != nil {
		in, out := &in.Unschedulable, &out.Unschedulable
		*out = new(bool)
		**out = **in
	}
	if in.UpdateNodes != nil {
		in, out := &in.UpdateNodes, &out.UpdateNodes
		*out = new(bool)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VswitchIdsRefs != nil {
		in, out := &in.VswitchIdsRefs, &out.VswitchIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VswitchIdsSelector != nil {
		in, out := &in.VswitchIdsSelector, &out.VswitchIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolParameters.
func (in *KubernetesNodePoolParameters) DeepCopy() *KubernetesNodePoolParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolSpec) DeepCopyInto(out *KubernetesNodePoolSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolSpec.
func (in *KubernetesNodePoolSpec) DeepCopy() *KubernetesNodePoolSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolStatus) DeepCopyInto(out *KubernetesNodePoolStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolStatus.
func (in *KubernetesNodePoolStatus) DeepCopy() *KubernetesNodePoolStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolTaintsInitParameters) DeepCopyInto(out *KubernetesNodePoolTaintsInitParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolTaintsInitParameters.
func (in *KubernetesNodePoolTaintsInitParameters) DeepCopy() *KubernetesNodePoolTaintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolTaintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolTaintsObservation) DeepCopyInto(out *KubernetesNodePoolTaintsObservation) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolTaintsObservation.
func (in *KubernetesNodePoolTaintsObservation) DeepCopy() *KubernetesNodePoolTaintsObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolTaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesNodePoolTaintsParameters) DeepCopyInto(out *KubernetesNodePoolTaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesNodePoolTaintsParameters.
func (in *KubernetesNodePoolTaintsParameters) DeepCopy() *KubernetesNodePoolTaintsParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesNodePoolTaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesObservation) DeepCopyInto(out *KubernetesObservation) {
	*out = *in
	if in.APIAudiences != nil {
		in, out := &in.APIAudiences, &out.APIAudiences
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]KubernetesAddonsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.CPUPolicy != nil {
		in, out := &in.CPUPolicy, &out.CPUPolicy
		*out = new(string)
		**out = **in
	}
	if in.CertificateAuthority != nil {
		in, out := &in.CertificateAuthority, &out.CertificateAuthority
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterDomain != nil {
		in, out := &in.ClusterDomain, &out.ClusterDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterNetworkType != nil {
		in, out := &in.ClusterNetworkType, &out.ClusterNetworkType
		*out = new(string)
		**out = **in
	}
	if in.Connections != nil {
		in, out := &in.Connections, &out.Connections
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeleteOptions != nil {
		in, out := &in.DeleteOptions, &out.DeleteOptions
		*out = make([]DeleteOptionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.ExcludeAutoscalerNodes != nil {
		in, out := &in.ExcludeAutoscalerNodes, &out.ExcludeAutoscalerNodes
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KMSEncryptedPassword != nil {
		in, out := &in.KMSEncryptedPassword, &out.KMSEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = make([]KubernetesLogConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MasterAutoRenew != nil {
		in, out := &in.MasterAutoRenew, &out.MasterAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.MasterAutoRenewPeriod != nil {
		in, out := &in.MasterAutoRenewPeriod, &out.MasterAutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MasterDiskCategory != nil {
		in, out := &in.MasterDiskCategory, &out.MasterDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.MasterDiskPerformanceLevel != nil {
		in, out := &in.MasterDiskPerformanceLevel, &out.MasterDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.MasterDiskSize != nil {
		in, out := &in.MasterDiskSize, &out.MasterDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.MasterDiskSnapshotPolicyID != nil {
		in, out := &in.MasterDiskSnapshotPolicyID, &out.MasterDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceChargeType != nil {
		in, out := &in.MasterInstanceChargeType, &out.MasterInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceType != nil {
		in, out := &in.MasterInstanceType, &out.MasterInstanceType
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceTypes != nil {
		in, out := &in.MasterInstanceTypes, &out.MasterInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterNodes != nil {
		in, out := &in.MasterNodes, &out.MasterNodes
		*out = make([]MasterNodesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MasterPeriod != nil {
		in, out := &in.MasterPeriod, &out.MasterPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MasterPeriodUnit != nil {
		in, out := &in.MasterPeriodUnit, &out.MasterPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.MasterVswitchIds != nil {
		in, out := &in.MasterVswitchIds, &out.MasterVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.NATGatewayID != nil {
		in, out := &in.NATGatewayID, &out.NATGatewayID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCidrMask != nil {
		in, out := &in.NodeCidrMask, &out.NodeCidrMask
		*out = new(float64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePortRange != nil {
		in, out := &in.NodePortRange, &out.NodePortRange
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.PodVswitchIds != nil {
		in, out := &in.PodVswitchIds, &out.PodVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountIssuer != nil {
		in, out := &in.ServiceAccountIssuer, &out.ServiceAccountIssuer
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.SkipSetCertificateAuthority != nil {
		in, out := &in.SkipSetCertificateAuthority, &out.SkipSetCertificateAuthority
		*out = new(bool)
		**out = **in
	}
	if in.SlbID != nil {
		in, out := &in.SlbID, &out.SlbID
		*out = new(string)
		**out = **in
	}
	if in.SlbInternet != nil {
		in, out := &in.SlbInternet, &out.SlbInternet
		*out = new(string)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SlbIntranet != nil {
		in, out := &in.SlbIntranet, &out.SlbIntranet
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.UserCA != nil {
		in, out := &in.UserCA, &out.UserCA
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerAutoRenew != nil {
		in, out := &in.WorkerAutoRenew, &out.WorkerAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.WorkerAutoRenewPeriod != nil {
		in, out := &in.WorkerAutoRenewPeriod, &out.WorkerAutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDiskCategory != nil {
		in, out := &in.WorkerDataDiskCategory, &out.WorkerDataDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDiskSize != nil {
		in, out := &in.WorkerDataDiskSize, &out.WorkerDataDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]KubernetesWorkerDataDisksObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceType != nil {
		in, out := &in.WorkerInstanceType, &out.WorkerInstanceType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]KubernetesWorkerNodesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(float64)
		**out = **in
	}
	if in.WorkerNumbers != nil {
		in, out := &in.WorkerNumbers, &out.WorkerNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.WorkerPeriod != nil {
		in, out := &in.WorkerPeriod, &out.WorkerPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerPeriodUnit != nil {
		in, out := &in.WorkerPeriodUnit, &out.WorkerPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.WorkerRAMRoleName != nil {
		in, out := &in.WorkerRAMRoleName, &out.WorkerRAMRoleName
		*out = new(string)
		**out = **in
	}
	if in.WorkerVswitchIds != nil {
		in, out := &in.WorkerVswitchIds, &out.WorkerVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesObservation.
func (in *KubernetesObservation) DeepCopy() *KubernetesObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesParameters) DeepCopyInto(out *KubernetesParameters) {
	*out = *in
	if in.APIAudiences != nil {
		in, out := &in.APIAudiences, &out.APIAudiences
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]KubernetesAddonsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.CPUPolicy != nil {
		in, out := &in.CPUPolicy, &out.CPUPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterDomain != nil {
		in, out := &in.ClusterDomain, &out.ClusterDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterNetworkType != nil {
		in, out := &in.ClusterNetworkType, &out.ClusterNetworkType
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeleteOptions != nil {
		in, out := &in.DeleteOptions, &out.DeleteOptions
		*out = make([]DeleteOptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.ExcludeAutoscalerNodes != nil {
		in, out := &in.ExcludeAutoscalerNodes, &out.ExcludeAutoscalerNodes
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KMSEncryptedPassword != nil {
		in, out := &in.KMSEncryptedPassword, &out.KMSEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = make([]KubernetesLogConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MasterAutoRenew != nil {
		in, out := &in.MasterAutoRenew, &out.MasterAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.MasterAutoRenewPeriod != nil {
		in, out := &in.MasterAutoRenewPeriod, &out.MasterAutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MasterDiskCategory != nil {
		in, out := &in.MasterDiskCategory, &out.MasterDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.MasterDiskPerformanceLevel != nil {
		in, out := &in.MasterDiskPerformanceLevel, &out.MasterDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.MasterDiskSize != nil {
		in, out := &in.MasterDiskSize, &out.MasterDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.MasterDiskSnapshotPolicyID != nil {
		in, out := &in.MasterDiskSnapshotPolicyID, &out.MasterDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceChargeType != nil {
		in, out := &in.MasterInstanceChargeType, &out.MasterInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceType != nil {
		in, out := &in.MasterInstanceType, &out.MasterInstanceType
		*out = new(string)
		**out = **in
	}
	if in.MasterInstanceTypes != nil {
		in, out := &in.MasterInstanceTypes, &out.MasterInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterPeriod != nil {
		in, out := &in.MasterPeriod, &out.MasterPeriod
		*out = new(float64)
		**out = **in
	}
	if in.MasterPeriodUnit != nil {
		in, out := &in.MasterPeriodUnit, &out.MasterPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.MasterVswitchIds != nil {
		in, out := &in.MasterVswitchIds, &out.MasterVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.MasterVswitchIdsRefs != nil {
		in, out := &in.MasterVswitchIdsRefs, &out.MasterVswitchIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MasterVswitchIdsSelector != nil {
		in, out := &in.MasterVswitchIdsSelector, &out.MasterVswitchIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCidrMask != nil {
		in, out := &in.NodeCidrMask, &out.NodeCidrMask
		*out = new(float64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePortRange != nil {
		in, out := &in.NodePortRange, &out.NodePortRange
		*out = new(string)
		**out = **in
	}
	if in.Nodes != nil {
		in, out := &in.Nodes, &out.Nodes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.PodVswitchIds != nil {
		in, out := &in.PodVswitchIds, &out.PodVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PodVswitchIdsRefs != nil {
		in, out := &in.PodVswitchIdsRefs, &out.PodVswitchIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PodVswitchIdsSelector != nil {
		in, out := &in.PodVswitchIdsSelector, &out.PodVswitchIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountIssuer != nil {
		in, out := &in.ServiceAccountIssuer, &out.ServiceAccountIssuer
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.SkipSetCertificateAuthority != nil {
		in, out := &in.SkipSetCertificateAuthority, &out.SkipSetCertificateAuthority
		*out = new(bool)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]TaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.UserCA != nil {
		in, out := &in.UserCA, &out.UserCA
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIDRef != nil {
		in, out := &in.VswitchIDRef, &out.VswitchIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchIDSelector != nil {
		in, out := &in.VswitchIDSelector, &out.VswitchIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchIDsRefs != nil {
		in, out := &in.VswitchIDsRefs, &out.VswitchIDsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VswitchIDsSelector != nil {
		in, out := &in.VswitchIDsSelector, &out.VswitchIDsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerAutoRenew != nil {
		in, out := &in.WorkerAutoRenew, &out.WorkerAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.WorkerAutoRenewPeriod != nil {
		in, out := &in.WorkerAutoRenewPeriod, &out.WorkerAutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDiskCategory != nil {
		in, out := &in.WorkerDataDiskCategory, &out.WorkerDataDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDiskSize != nil {
		in, out := &in.WorkerDataDiskSize, &out.WorkerDataDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]KubernetesWorkerDataDisksParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceType != nil {
		in, out := &in.WorkerInstanceType, &out.WorkerInstanceType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]KubernetesWorkerNodesParameters, len(*in))
		copy(*out, *in)
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(float64)
		**out = **in
	}
	if in.WorkerNumbers != nil {
		in, out := &in.WorkerNumbers, &out.WorkerNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.WorkerPeriod != nil {
		in, out := &in.WorkerPeriod, &out.WorkerPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerPeriodUnit != nil {
		in, out := &in.WorkerPeriodUnit, &out.WorkerPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.WorkerVswitchIds != nil {
		in, out := &in.WorkerVswitchIds, &out.WorkerVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesParameters.
func (in *KubernetesParameters) DeepCopy() *KubernetesParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissions) DeepCopyInto(out *KubernetesPermissions) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissions.
func (in *KubernetesPermissions) DeepCopy() *KubernetesPermissions {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissions)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesPermissions) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsInitParameters) DeepCopyInto(out *KubernetesPermissionsInitParameters) {
	*out = *in
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		*out = make([]PermissionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.UIDRef != nil {
		in, out := &in.UIDRef, &out.UIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.UIDSelector != nil {
		in, out := &in.UIDSelector, &out.UIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsInitParameters.
func (in *KubernetesPermissionsInitParameters) DeepCopy() *KubernetesPermissionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsList) DeepCopyInto(out *KubernetesPermissionsList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KubernetesPermissions, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsList.
func (in *KubernetesPermissionsList) DeepCopy() *KubernetesPermissionsList {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KubernetesPermissionsList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsObservation) DeepCopyInto(out *KubernetesPermissionsObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		*out = make([]PermissionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsObservation.
func (in *KubernetesPermissionsObservation) DeepCopy() *KubernetesPermissionsObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsParameters) DeepCopyInto(out *KubernetesPermissionsParameters) {
	*out = *in
	if in.Permissions != nil {
		in, out := &in.Permissions, &out.Permissions
		*out = make([]PermissionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.UID != nil {
		in, out := &in.UID, &out.UID
		*out = new(string)
		**out = **in
	}
	if in.UIDRef != nil {
		in, out := &in.UIDRef, &out.UIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.UIDSelector != nil {
		in, out := &in.UIDSelector, &out.UIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsParameters.
func (in *KubernetesPermissionsParameters) DeepCopy() *KubernetesPermissionsParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsSpec) DeepCopyInto(out *KubernetesPermissionsSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsSpec.
func (in *KubernetesPermissionsSpec) DeepCopy() *KubernetesPermissionsSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesPermissionsStatus) DeepCopyInto(out *KubernetesPermissionsStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesPermissionsStatus.
func (in *KubernetesPermissionsStatus) DeepCopy() *KubernetesPermissionsStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesPermissionsStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesSpec) DeepCopyInto(out *KubernetesSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesSpec.
func (in *KubernetesSpec) DeepCopy() *KubernetesSpec {
	if in == nil {
		return nil
	}
	out := new(KubernetesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesStatus) DeepCopyInto(out *KubernetesStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesStatus.
func (in *KubernetesStatus) DeepCopy() *KubernetesStatus {
	if in == nil {
		return nil
	}
	out := new(KubernetesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesWorkerDataDisksInitParameters) DeepCopyInto(out *KubernetesWorkerDataDisksInitParameters) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesWorkerDataDisksInitParameters.
func (in *KubernetesWorkerDataDisksInitParameters) DeepCopy() *KubernetesWorkerDataDisksInitParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesWorkerDataDisksInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesWorkerDataDisksObservation) DeepCopyInto(out *KubernetesWorkerDataDisksObservation) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesWorkerDataDisksObservation.
func (in *KubernetesWorkerDataDisksObservation) DeepCopy() *KubernetesWorkerDataDisksObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesWorkerDataDisksObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesWorkerDataDisksParameters) DeepCopyInto(out *KubernetesWorkerDataDisksParameters) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesWorkerDataDisksParameters.
func (in *KubernetesWorkerDataDisksParameters) DeepCopy() *KubernetesWorkerDataDisksParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesWorkerDataDisksParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesWorkerNodesInitParameters) DeepCopyInto(out *KubernetesWorkerNodesInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesWorkerNodesInitParameters.
func (in *KubernetesWorkerNodesInitParameters) DeepCopy() *KubernetesWorkerNodesInitParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesWorkerNodesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesWorkerNodesObservation) DeepCopyInto(out *KubernetesWorkerNodesObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesWorkerNodesObservation.
func (in *KubernetesWorkerNodesObservation) DeepCopy() *KubernetesWorkerNodesObservation {
	if in == nil {
		return nil
	}
	out := new(KubernetesWorkerNodesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KubernetesWorkerNodesParameters) DeepCopyInto(out *KubernetesWorkerNodesParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KubernetesWorkerNodesParameters.
func (in *KubernetesWorkerNodesParameters) DeepCopy() *KubernetesWorkerNodesParameters {
	if in == nil {
		return nil
	}
	out := new(KubernetesWorkerNodesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelsInitParameters) DeepCopyInto(out *LabelsInitParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelsInitParameters.
func (in *LabelsInitParameters) DeepCopy() *LabelsInitParameters {
	if in == nil {
		return nil
	}
	out := new(LabelsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelsObservation) DeepCopyInto(out *LabelsObservation) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelsObservation.
func (in *LabelsObservation) DeepCopy() *LabelsObservation {
	if in == nil {
		return nil
	}
	out := new(LabelsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LabelsParameters) DeepCopyInto(out *LabelsParameters) {
	*out = *in
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LabelsParameters.
func (in *LabelsParameters) DeepCopy() *LabelsParameters {
	if in == nil {
		return nil
	}
	out := new(LabelsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogConfigInitParameters) DeepCopyInto(out *LogConfigInitParameters) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogConfigInitParameters.
func (in *LogConfigInitParameters) DeepCopy() *LogConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(LogConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogConfigObservation) DeepCopyInto(out *LogConfigObservation) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogConfigObservation.
func (in *LogConfigObservation) DeepCopy() *LogConfigObservation {
	if in == nil {
		return nil
	}
	out := new(LogConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogConfigParameters) DeepCopyInto(out *LogConfigParameters) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogConfigParameters.
func (in *LogConfigParameters) DeepCopy() *LogConfigParameters {
	if in == nil {
		return nil
	}
	out := new(LogConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowInitParameters) DeepCopyInto(out *MaintenanceWindowInitParameters) {
	*out = *in
	if in.Duration != nil {
		in, out := &in.Duration, &out.Duration
		*out = new(string)
		**out = **in
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaintenanceTime != nil {
		in, out := &in.MaintenanceTime, &out.MaintenanceTime
		*out = new(string)
		**out = **in
	}
	if in.WeeklyPeriod != nil {
		in, out := &in.WeeklyPeriod, &out.WeeklyPeriod
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowInitParameters.
func (in *MaintenanceWindowInitParameters) DeepCopy() *MaintenanceWindowInitParameters {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowObservation) DeepCopyInto(out *MaintenanceWindowObservation) {
	*out = *in
	if in.Duration != nil {
		in, out := &in.Duration, &out.Duration
		*out = new(string)
		**out = **in
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaintenanceTime != nil {
		in, out := &in.MaintenanceTime, &out.MaintenanceTime
		*out = new(string)
		**out = **in
	}
	if in.WeeklyPeriod != nil {
		in, out := &in.WeeklyPeriod, &out.WeeklyPeriod
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowObservation.
func (in *MaintenanceWindowObservation) DeepCopy() *MaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowParameters) DeepCopyInto(out *MaintenanceWindowParameters) {
	*out = *in
	if in.Duration != nil {
		in, out := &in.Duration, &out.Duration
		*out = new(string)
		**out = **in
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaintenanceTime != nil {
		in, out := &in.MaintenanceTime, &out.MaintenanceTime
		*out = new(string)
		**out = **in
	}
	if in.WeeklyPeriod != nil {
		in, out := &in.WeeklyPeriod, &out.WeeklyPeriod
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowParameters.
func (in *MaintenanceWindowParameters) DeepCopy() *MaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetes) DeepCopyInto(out *ManagedKubernetes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetes.
func (in *ManagedKubernetes) DeepCopy() *ManagedKubernetes {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedKubernetes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesAddonsInitParameters) DeepCopyInto(out *ManagedKubernetesAddonsInitParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesAddonsInitParameters.
func (in *ManagedKubernetesAddonsInitParameters) DeepCopy() *ManagedKubernetesAddonsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesAddonsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesAddonsObservation) DeepCopyInto(out *ManagedKubernetesAddonsObservation) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesAddonsObservation.
func (in *ManagedKubernetesAddonsObservation) DeepCopy() *ManagedKubernetesAddonsObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesAddonsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesAddonsParameters) DeepCopyInto(out *ManagedKubernetesAddonsParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesAddonsParameters.
func (in *ManagedKubernetesAddonsParameters) DeepCopy() *ManagedKubernetesAddonsParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesAddonsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesDeleteOptionsInitParameters) DeepCopyInto(out *ManagedKubernetesDeleteOptionsInitParameters) {
	*out = *in
	if in.DeleteMode != nil {
		in, out := &in.DeleteMode, &out.DeleteMode
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesDeleteOptionsInitParameters.
func (in *ManagedKubernetesDeleteOptionsInitParameters) DeepCopy() *ManagedKubernetesDeleteOptionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesDeleteOptionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesDeleteOptionsObservation) DeepCopyInto(out *ManagedKubernetesDeleteOptionsObservation) {
	*out = *in
	if in.DeleteMode != nil {
		in, out := &in.DeleteMode, &out.DeleteMode
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesDeleteOptionsObservation.
func (in *ManagedKubernetesDeleteOptionsObservation) DeepCopy() *ManagedKubernetesDeleteOptionsObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesDeleteOptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesDeleteOptionsParameters) DeepCopyInto(out *ManagedKubernetesDeleteOptionsParameters) {
	*out = *in
	if in.DeleteMode != nil {
		in, out := &in.DeleteMode, &out.DeleteMode
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesDeleteOptionsParameters.
func (in *ManagedKubernetesDeleteOptionsParameters) DeepCopy() *ManagedKubernetesDeleteOptionsParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesDeleteOptionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesInitParameters) DeepCopyInto(out *ManagedKubernetesInitParameters) {
	*out = *in
	if in.APIAudiences != nil {
		in, out := &in.APIAudiences, &out.APIAudiences
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]ManagedKubernetesAddonsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AuditLogConfig != nil {
		in, out := &in.AuditLogConfig, &out.AuditLogConfig
		*out = make([]AuditLogConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoMode != nil {
		in, out := &in.AutoMode, &out.AutoMode
		*out = make([]AutoModeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.CPUPolicy != nil {
		in, out := &in.CPUPolicy, &out.CPUPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterDomain != nil {
		in, out := &in.ClusterDomain, &out.ClusterDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterNetworkType != nil {
		in, out := &in.ClusterNetworkType, &out.ClusterNetworkType
		*out = new(string)
		**out = **in
	}
	if in.ClusterSpec != nil {
		in, out := &in.ClusterSpec, &out.ClusterSpec
		*out = new(string)
		**out = **in
	}
	if in.ControlPlaneLogComponents != nil {
		in, out := &in.ControlPlaneLogComponents, &out.ControlPlaneLogComponents
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ControlPlaneLogProject != nil {
		in, out := &in.ControlPlaneLogProject, &out.ControlPlaneLogProject
		*out = new(string)
		**out = **in
	}
	if in.ControlPlaneLogTTL != nil {
		in, out := &in.ControlPlaneLogTTL, &out.ControlPlaneLogTTL
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeleteOptions != nil {
		in, out := &in.DeleteOptions, &out.DeleteOptions
		*out = make([]ManagedKubernetesDeleteOptionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableRrsa != nil {
		in, out := &in.EnableRrsa, &out.EnableRrsa
		*out = new(bool)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.EncryptionProviderKey != nil {
		in, out := &in.EncryptionProviderKey, &out.EncryptionProviderKey
		*out = new(string)
		**out = **in
	}
	if in.ExcludeAutoscalerNodes != nil {
		in, out := &in.ExcludeAutoscalerNodes, &out.ExcludeAutoscalerNodes
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.IPStack != nil {
		in, out := &in.IPStack, &out.IPStack
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KMSEncryptedPassword != nil {
		in, out := &in.KMSEncryptedPassword, &out.KMSEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = make([]ManagedKubernetesLogConfigInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MaintenanceWindowInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCidrMask != nil {
		in, out := &in.NodeCidrMask, &out.NodeCidrMask
		*out = new(float64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePortRange != nil {
		in, out := &in.NodePortRange, &out.NodePortRange
		*out = new(string)
		**out = **in
	}
	if in.OperationPolicy != nil {
		in, out := &in.OperationPolicy, &out.OperationPolicy
		*out = make([]OperationPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.PodVswitchIds != nil {
		in, out := &in.PodVswitchIds, &out.PodVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Profile != nil {
		in, out := &in.Profile, &out.Profile
		*out = new(string)
		**out = **in
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountIssuer != nil {
		in, out := &in.ServiceAccountIssuer, &out.ServiceAccountIssuer
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.SkipSetCertificateAuthority != nil {
		in, out := &in.SkipSetCertificateAuthority, &out.SkipSetCertificateAuthority
		*out = new(bool)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]ManagedKubernetesTaintsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.UserCA != nil {
		in, out := &in.UserCA, &out.UserCA
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VswitchIdsRefs != nil {
		in, out := &in.VswitchIdsRefs, &out.VswitchIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VswitchIdsSelector != nil {
		in, out := &in.VswitchIdsSelector, &out.VswitchIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkerAutoRenew != nil {
		in, out := &in.WorkerAutoRenew, &out.WorkerAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.WorkerAutoRenewPeriod != nil {
		in, out := &in.WorkerAutoRenewPeriod, &out.WorkerAutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDiskCategory != nil {
		in, out := &in.WorkerDataDiskCategory, &out.WorkerDataDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDiskSize != nil {
		in, out := &in.WorkerDataDiskSize, &out.WorkerDataDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]ManagedKubernetesWorkerDataDisksInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceType != nil {
		in, out := &in.WorkerInstanceType, &out.WorkerInstanceType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]ManagedKubernetesWorkerNodesInitParameters, len(*in))
		copy(*out, *in)
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(float64)
		**out = **in
	}
	if in.WorkerNumbers != nil {
		in, out := &in.WorkerNumbers, &out.WorkerNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.WorkerPeriod != nil {
		in, out := &in.WorkerPeriod, &out.WorkerPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerPeriodUnit != nil {
		in, out := &in.WorkerPeriodUnit, &out.WorkerPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.WorkerVswitchIds != nil {
		in, out := &in.WorkerVswitchIds, &out.WorkerVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ZoneIds != nil {
		in, out := &in.ZoneIds, &out.ZoneIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesInitParameters.
func (in *ManagedKubernetesInitParameters) DeepCopy() *ManagedKubernetesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesList) DeepCopyInto(out *ManagedKubernetesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ManagedKubernetes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesList.
func (in *ManagedKubernetesList) DeepCopy() *ManagedKubernetesList {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ManagedKubernetesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesLogConfigInitParameters) DeepCopyInto(out *ManagedKubernetesLogConfigInitParameters) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesLogConfigInitParameters.
func (in *ManagedKubernetesLogConfigInitParameters) DeepCopy() *ManagedKubernetesLogConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesLogConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesLogConfigObservation) DeepCopyInto(out *ManagedKubernetesLogConfigObservation) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesLogConfigObservation.
func (in *ManagedKubernetesLogConfigObservation) DeepCopy() *ManagedKubernetesLogConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesLogConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesLogConfigParameters) DeepCopyInto(out *ManagedKubernetesLogConfigParameters) {
	*out = *in
	if in.Project != nil {
		in, out := &in.Project, &out.Project
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesLogConfigParameters.
func (in *ManagedKubernetesLogConfigParameters) DeepCopy() *ManagedKubernetesLogConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesLogConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesObservation) DeepCopyInto(out *ManagedKubernetesObservation) {
	*out = *in
	if in.APIAudiences != nil {
		in, out := &in.APIAudiences, &out.APIAudiences
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]ManagedKubernetesAddonsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AuditLogConfig != nil {
		in, out := &in.AuditLogConfig, &out.AuditLogConfig
		*out = make([]AuditLogConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoMode != nil {
		in, out := &in.AutoMode, &out.AutoMode
		*out = make([]AutoModeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.CPUPolicy != nil {
		in, out := &in.CPUPolicy, &out.CPUPolicy
		*out = new(string)
		**out = **in
	}
	if in.CertificateAuthority != nil {
		in, out := &in.CertificateAuthority, &out.CertificateAuthority
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterDomain != nil {
		in, out := &in.ClusterDomain, &out.ClusterDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterNetworkType != nil {
		in, out := &in.ClusterNetworkType, &out.ClusterNetworkType
		*out = new(string)
		**out = **in
	}
	if in.ClusterSpec != nil {
		in, out := &in.ClusterSpec, &out.ClusterSpec
		*out = new(string)
		**out = **in
	}
	if in.Connections != nil {
		in, out := &in.Connections, &out.Connections
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.ControlPlaneLogComponents != nil {
		in, out := &in.ControlPlaneLogComponents, &out.ControlPlaneLogComponents
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ControlPlaneLogProject != nil {
		in, out := &in.ControlPlaneLogProject, &out.ControlPlaneLogProject
		*out = new(string)
		**out = **in
	}
	if in.ControlPlaneLogTTL != nil {
		in, out := &in.ControlPlaneLogTTL, &out.ControlPlaneLogTTL
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeleteOptions != nil {
		in, out := &in.DeleteOptions, &out.DeleteOptions
		*out = make([]ManagedKubernetesDeleteOptionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableRrsa != nil {
		in, out := &in.EnableRrsa, &out.EnableRrsa
		*out = new(bool)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.EncryptionProviderKey != nil {
		in, out := &in.EncryptionProviderKey, &out.EncryptionProviderKey
		*out = new(string)
		**out = **in
	}
	if in.ExcludeAutoscalerNodes != nil {
		in, out := &in.ExcludeAutoscalerNodes, &out.ExcludeAutoscalerNodes
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPStack != nil {
		in, out := &in.IPStack, &out.IPStack
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KMSEncryptedPassword != nil {
		in, out := &in.KMSEncryptedPassword, &out.KMSEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = make([]ManagedKubernetesLogConfigObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MaintenanceWindowObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.NATGatewayID != nil {
		in, out := &in.NATGatewayID, &out.NATGatewayID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCidrMask != nil {
		in, out := &in.NodeCidrMask, &out.NodeCidrMask
		*out = new(float64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePortRange != nil {
		in, out := &in.NodePortRange, &out.NodePortRange
		*out = new(string)
		**out = **in
	}
	if in.OperationPolicy != nil {
		in, out := &in.OperationPolicy, &out.OperationPolicy
		*out = make([]OperationPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.PodVswitchIds != nil {
		in, out := &in.PodVswitchIds, &out.PodVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Profile != nil {
		in, out := &in.Profile, &out.Profile
		*out = new(string)
		**out = **in
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RrsaMetadata != nil {
		in, out := &in.RrsaMetadata, &out.RrsaMetadata
		*out = make([]RrsaMetadataObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceAccountIssuer != nil {
		in, out := &in.ServiceAccountIssuer, &out.ServiceAccountIssuer
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.SkipSetCertificateAuthority != nil {
		in, out := &in.SkipSetCertificateAuthority, &out.SkipSetCertificateAuthority
		*out = new(bool)
		**out = **in
	}
	if in.SlbID != nil {
		in, out := &in.SlbID, &out.SlbID
		*out = new(string)
		**out = **in
	}
	if in.SlbInternet != nil {
		in, out := &in.SlbInternet, &out.SlbInternet
		*out = new(string)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.SlbIntranet != nil {
		in, out := &in.SlbIntranet, &out.SlbIntranet
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]ManagedKubernetesTaintsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.UserCA != nil {
		in, out := &in.UserCA, &out.UserCA
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerAutoRenew != nil {
		in, out := &in.WorkerAutoRenew, &out.WorkerAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.WorkerAutoRenewPeriod != nil {
		in, out := &in.WorkerAutoRenewPeriod, &out.WorkerAutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDiskCategory != nil {
		in, out := &in.WorkerDataDiskCategory, &out.WorkerDataDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDiskSize != nil {
		in, out := &in.WorkerDataDiskSize, &out.WorkerDataDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]ManagedKubernetesWorkerDataDisksObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceType != nil {
		in, out := &in.WorkerInstanceType, &out.WorkerInstanceType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]ManagedKubernetesWorkerNodesObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(float64)
		**out = **in
	}
	if in.WorkerNumbers != nil {
		in, out := &in.WorkerNumbers, &out.WorkerNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.WorkerPeriod != nil {
		in, out := &in.WorkerPeriod, &out.WorkerPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerPeriodUnit != nil {
		in, out := &in.WorkerPeriodUnit, &out.WorkerPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.WorkerRAMRoleName != nil {
		in, out := &in.WorkerRAMRoleName, &out.WorkerRAMRoleName
		*out = new(string)
		**out = **in
	}
	if in.WorkerVswitchIds != nil {
		in, out := &in.WorkerVswitchIds, &out.WorkerVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ZoneIds != nil {
		in, out := &in.ZoneIds, &out.ZoneIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesObservation.
func (in *ManagedKubernetesObservation) DeepCopy() *ManagedKubernetesObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesParameters) DeepCopyInto(out *ManagedKubernetesParameters) {
	*out = *in
	if in.APIAudiences != nil {
		in, out := &in.APIAudiences, &out.APIAudiences
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]ManagedKubernetesAddonsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AuditLogConfig != nil {
		in, out := &in.AuditLogConfig, &out.AuditLogConfig
		*out = make([]AuditLogConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoMode != nil {
		in, out := &in.AutoMode, &out.AutoMode
		*out = make([]AutoModeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AvailabilityZone != nil {
		in, out := &in.AvailabilityZone, &out.AvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.CPUPolicy != nil {
		in, out := &in.CPUPolicy, &out.CPUPolicy
		*out = new(string)
		**out = **in
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterDomain != nil {
		in, out := &in.ClusterDomain, &out.ClusterDomain
		*out = new(string)
		**out = **in
	}
	if in.ClusterNetworkType != nil {
		in, out := &in.ClusterNetworkType, &out.ClusterNetworkType
		*out = new(string)
		**out = **in
	}
	if in.ClusterSpec != nil {
		in, out := &in.ClusterSpec, &out.ClusterSpec
		*out = new(string)
		**out = **in
	}
	if in.ControlPlaneLogComponents != nil {
		in, out := &in.ControlPlaneLogComponents, &out.ControlPlaneLogComponents
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ControlPlaneLogProject != nil {
		in, out := &in.ControlPlaneLogProject, &out.ControlPlaneLogProject
		*out = new(string)
		**out = **in
	}
	if in.ControlPlaneLogTTL != nil {
		in, out := &in.ControlPlaneLogTTL, &out.ControlPlaneLogTTL
		*out = new(string)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeleteOptions != nil {
		in, out := &in.DeleteOptions, &out.DeleteOptions
		*out = make([]ManagedKubernetesDeleteOptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableRrsa != nil {
		in, out := &in.EnableRrsa, &out.EnableRrsa
		*out = new(bool)
		**out = **in
	}
	if in.EnableSSH != nil {
		in, out := &in.EnableSSH, &out.EnableSSH
		*out = new(bool)
		**out = **in
	}
	if in.EncryptionProviderKey != nil {
		in, out := &in.EncryptionProviderKey, &out.EncryptionProviderKey
		*out = new(string)
		**out = **in
	}
	if in.ExcludeAutoscalerNodes != nil {
		in, out := &in.ExcludeAutoscalerNodes, &out.ExcludeAutoscalerNodes
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.IPStack != nil {
		in, out := &in.IPStack, &out.IPStack
		*out = new(string)
		**out = **in
	}
	if in.ImageID != nil {
		in, out := &in.ImageID, &out.ImageID
		*out = new(string)
		**out = **in
	}
	if in.InstallCloudMonitor != nil {
		in, out := &in.InstallCloudMonitor, &out.InstallCloudMonitor
		*out = new(bool)
		**out = **in
	}
	if in.IsEnterpriseSecurityGroup != nil {
		in, out := &in.IsEnterpriseSecurityGroup, &out.IsEnterpriseSecurityGroup
		*out = new(bool)
		**out = **in
	}
	if in.KMSEncryptedPassword != nil {
		in, out := &in.KMSEncryptedPassword, &out.KMSEncryptedPassword
		*out = new(string)
		**out = **in
	}
	if in.KMSEncryptionContext != nil {
		in, out := &in.KMSEncryptionContext, &out.KMSEncryptionContext
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.KeyName != nil {
		in, out := &in.KeyName, &out.KeyName
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LogConfig != nil {
		in, out := &in.LogConfig, &out.LogConfig
		*out = make([]ManagedKubernetesLogConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.NodeCidrMask != nil {
		in, out := &in.NodeCidrMask, &out.NodeCidrMask
		*out = new(float64)
		**out = **in
	}
	if in.NodeNameMode != nil {
		in, out := &in.NodeNameMode, &out.NodeNameMode
		*out = new(string)
		**out = **in
	}
	if in.NodePortRange != nil {
		in, out := &in.NodePortRange, &out.NodePortRange
		*out = new(string)
		**out = **in
	}
	if in.OperationPolicy != nil {
		in, out := &in.OperationPolicy, &out.OperationPolicy
		*out = make([]OperationPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.OsType != nil {
		in, out := &in.OsType, &out.OsType
		*out = new(string)
		**out = **in
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Platform != nil {
		in, out := &in.Platform, &out.Platform
		*out = new(string)
		**out = **in
	}
	if in.PodCidr != nil {
		in, out := &in.PodCidr, &out.PodCidr
		*out = new(string)
		**out = **in
	}
	if in.PodVswitchIds != nil {
		in, out := &in.PodVswitchIds, &out.PodVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Profile != nil {
		in, out := &in.Profile, &out.Profile
		*out = new(string)
		**out = **in
	}
	if in.ProxyMode != nil {
		in, out := &in.ProxyMode, &out.ProxyMode
		*out = new(string)
		**out = **in
	}
	if in.RDSInstances != nil {
		in, out := &in.RDSInstances, &out.RDSInstances
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Runtime != nil {
		in, out := &in.Runtime, &out.Runtime
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceAccountIssuer != nil {
		in, out := &in.ServiceAccountIssuer, &out.ServiceAccountIssuer
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.SkipSetCertificateAuthority != nil {
		in, out := &in.SkipSetCertificateAuthority, &out.SkipSetCertificateAuthority
		*out = new(bool)
		**out = **in
	}
	if in.SlbInternetEnabled != nil {
		in, out := &in.SlbInternetEnabled, &out.SlbInternetEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Taints != nil {
		in, out := &in.Taints, &out.Taints
		*out = make([]ManagedKubernetesTaintsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.UserCA != nil {
		in, out := &in.UserCA, &out.UserCA
		*out = new(string)
		**out = **in
	}
	if in.UserData != nil {
		in, out := &in.UserData, &out.UserData
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VswitchIdsRefs != nil {
		in, out := &in.VswitchIdsRefs, &out.VswitchIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VswitchIdsSelector != nil {
		in, out := &in.VswitchIdsSelector, &out.VswitchIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.WorkerAutoRenew != nil {
		in, out := &in.WorkerAutoRenew, &out.WorkerAutoRenew
		*out = new(bool)
		**out = **in
	}
	if in.WorkerAutoRenewPeriod != nil {
		in, out := &in.WorkerAutoRenewPeriod, &out.WorkerAutoRenewPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDiskCategory != nil {
		in, out := &in.WorkerDataDiskCategory, &out.WorkerDataDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDataDiskSize != nil {
		in, out := &in.WorkerDataDiskSize, &out.WorkerDataDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDataDisks != nil {
		in, out := &in.WorkerDataDisks, &out.WorkerDataDisks
		*out = make([]ManagedKubernetesWorkerDataDisksParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.WorkerDiskCategory != nil {
		in, out := &in.WorkerDiskCategory, &out.WorkerDiskCategory
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskPerformanceLevel != nil {
		in, out := &in.WorkerDiskPerformanceLevel, &out.WorkerDiskPerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.WorkerDiskSize != nil {
		in, out := &in.WorkerDiskSize, &out.WorkerDiskSize
		*out = new(float64)
		**out = **in
	}
	if in.WorkerDiskSnapshotPolicyID != nil {
		in, out := &in.WorkerDiskSnapshotPolicyID, &out.WorkerDiskSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceChargeType != nil {
		in, out := &in.WorkerInstanceChargeType, &out.WorkerInstanceChargeType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceType != nil {
		in, out := &in.WorkerInstanceType, &out.WorkerInstanceType
		*out = new(string)
		**out = **in
	}
	if in.WorkerInstanceTypes != nil {
		in, out := &in.WorkerInstanceTypes, &out.WorkerInstanceTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.WorkerNodes != nil {
		in, out := &in.WorkerNodes, &out.WorkerNodes
		*out = make([]ManagedKubernetesWorkerNodesParameters, len(*in))
		copy(*out, *in)
	}
	if in.WorkerNumber != nil {
		in, out := &in.WorkerNumber, &out.WorkerNumber
		*out = new(float64)
		**out = **in
	}
	if in.WorkerNumbers != nil {
		in, out := &in.WorkerNumbers, &out.WorkerNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.WorkerPeriod != nil {
		in, out := &in.WorkerPeriod, &out.WorkerPeriod
		*out = new(float64)
		**out = **in
	}
	if in.WorkerPeriodUnit != nil {
		in, out := &in.WorkerPeriodUnit, &out.WorkerPeriodUnit
		*out = new(string)
		**out = **in
	}
	if in.WorkerVswitchIds != nil {
		in, out := &in.WorkerVswitchIds, &out.WorkerVswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ZoneIds != nil {
		in, out := &in.ZoneIds, &out.ZoneIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesParameters.
func (in *ManagedKubernetesParameters) DeepCopy() *ManagedKubernetesParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesSpec) DeepCopyInto(out *ManagedKubernetesSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesSpec.
func (in *ManagedKubernetesSpec) DeepCopy() *ManagedKubernetesSpec {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesStatus) DeepCopyInto(out *ManagedKubernetesStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesStatus.
func (in *ManagedKubernetesStatus) DeepCopy() *ManagedKubernetesStatus {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesTaintsInitParameters) DeepCopyInto(out *ManagedKubernetesTaintsInitParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesTaintsInitParameters.
func (in *ManagedKubernetesTaintsInitParameters) DeepCopy() *ManagedKubernetesTaintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesTaintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesTaintsObservation) DeepCopyInto(out *ManagedKubernetesTaintsObservation) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesTaintsObservation.
func (in *ManagedKubernetesTaintsObservation) DeepCopy() *ManagedKubernetesTaintsObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesTaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesTaintsParameters) DeepCopyInto(out *ManagedKubernetesTaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesTaintsParameters.
func (in *ManagedKubernetesTaintsParameters) DeepCopy() *ManagedKubernetesTaintsParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesTaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesWorkerDataDisksInitParameters) DeepCopyInto(out *ManagedKubernetesWorkerDataDisksInitParameters) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesWorkerDataDisksInitParameters.
func (in *ManagedKubernetesWorkerDataDisksInitParameters) DeepCopy() *ManagedKubernetesWorkerDataDisksInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesWorkerDataDisksInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesWorkerDataDisksObservation) DeepCopyInto(out *ManagedKubernetesWorkerDataDisksObservation) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesWorkerDataDisksObservation.
func (in *ManagedKubernetesWorkerDataDisksObservation) DeepCopy() *ManagedKubernetesWorkerDataDisksObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesWorkerDataDisksObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesWorkerDataDisksParameters) DeepCopyInto(out *ManagedKubernetesWorkerDataDisksParameters) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesWorkerDataDisksParameters.
func (in *ManagedKubernetesWorkerDataDisksParameters) DeepCopy() *ManagedKubernetesWorkerDataDisksParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesWorkerDataDisksParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesWorkerNodesInitParameters) DeepCopyInto(out *ManagedKubernetesWorkerNodesInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesWorkerNodesInitParameters.
func (in *ManagedKubernetesWorkerNodesInitParameters) DeepCopy() *ManagedKubernetesWorkerNodesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesWorkerNodesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesWorkerNodesObservation) DeepCopyInto(out *ManagedKubernetesWorkerNodesObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesWorkerNodesObservation.
func (in *ManagedKubernetesWorkerNodesObservation) DeepCopy() *ManagedKubernetesWorkerNodesObservation {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesWorkerNodesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagedKubernetesWorkerNodesParameters) DeepCopyInto(out *ManagedKubernetesWorkerNodesParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagedKubernetesWorkerNodesParameters.
func (in *ManagedKubernetesWorkerNodesParameters) DeepCopy() *ManagedKubernetesWorkerNodesParameters {
	if in == nil {
		return nil
	}
	out := new(ManagedKubernetesWorkerNodesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagementInitParameters) DeepCopyInto(out *ManagementInitParameters) {
	*out = *in
	if in.AutoRepair != nil {
		in, out := &in.AutoRepair, &out.AutoRepair
		*out = new(bool)
		**out = **in
	}
	if in.AutoRepairPolicy != nil {
		in, out := &in.AutoRepairPolicy, &out.AutoRepairPolicy
		*out = make([]AutoRepairPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoUpgrade != nil {
		in, out := &in.AutoUpgrade, &out.AutoUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.AutoUpgradePolicy != nil {
		in, out := &in.AutoUpgradePolicy, &out.AutoUpgradePolicy
		*out = make([]AutoUpgradePolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoVulFix != nil {
		in, out := &in.AutoVulFix, &out.AutoVulFix
		*out = new(bool)
		**out = **in
	}
	if in.AutoVulFixPolicy != nil {
		in, out := &in.AutoVulFixPolicy, &out.AutoVulFixPolicy
		*out = make([]AutoVulFixPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaxUnavailable != nil {
		in, out := &in.MaxUnavailable, &out.MaxUnavailable
		*out = new(float64)
		**out = **in
	}
	if in.Surge != nil {
		in, out := &in.Surge, &out.Surge
		*out = new(float64)
		**out = **in
	}
	if in.SurgePercentage != nil {
		in, out := &in.SurgePercentage, &out.SurgePercentage
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagementInitParameters.
func (in *ManagementInitParameters) DeepCopy() *ManagementInitParameters {
	if in == nil {
		return nil
	}
	out := new(ManagementInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagementObservation) DeepCopyInto(out *ManagementObservation) {
	*out = *in
	if in.AutoRepair != nil {
		in, out := &in.AutoRepair, &out.AutoRepair
		*out = new(bool)
		**out = **in
	}
	if in.AutoRepairPolicy != nil {
		in, out := &in.AutoRepairPolicy, &out.AutoRepairPolicy
		*out = make([]AutoRepairPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoUpgrade != nil {
		in, out := &in.AutoUpgrade, &out.AutoUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.AutoUpgradePolicy != nil {
		in, out := &in.AutoUpgradePolicy, &out.AutoUpgradePolicy
		*out = make([]AutoUpgradePolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoVulFix != nil {
		in, out := &in.AutoVulFix, &out.AutoVulFix
		*out = new(bool)
		**out = **in
	}
	if in.AutoVulFixPolicy != nil {
		in, out := &in.AutoVulFixPolicy, &out.AutoVulFixPolicy
		*out = make([]AutoVulFixPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaxUnavailable != nil {
		in, out := &in.MaxUnavailable, &out.MaxUnavailable
		*out = new(float64)
		**out = **in
	}
	if in.Surge != nil {
		in, out := &in.Surge, &out.Surge
		*out = new(float64)
		**out = **in
	}
	if in.SurgePercentage != nil {
		in, out := &in.SurgePercentage, &out.SurgePercentage
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagementObservation.
func (in *ManagementObservation) DeepCopy() *ManagementObservation {
	if in == nil {
		return nil
	}
	out := new(ManagementObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagementParameters) DeepCopyInto(out *ManagementParameters) {
	*out = *in
	if in.AutoRepair != nil {
		in, out := &in.AutoRepair, &out.AutoRepair
		*out = new(bool)
		**out = **in
	}
	if in.AutoRepairPolicy != nil {
		in, out := &in.AutoRepairPolicy, &out.AutoRepairPolicy
		*out = make([]AutoRepairPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoUpgrade != nil {
		in, out := &in.AutoUpgrade, &out.AutoUpgrade
		*out = new(bool)
		**out = **in
	}
	if in.AutoUpgradePolicy != nil {
		in, out := &in.AutoUpgradePolicy, &out.AutoUpgradePolicy
		*out = make([]AutoUpgradePolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AutoVulFix != nil {
		in, out := &in.AutoVulFix, &out.AutoVulFix
		*out = new(bool)
		**out = **in
	}
	if in.AutoVulFixPolicy != nil {
		in, out := &in.AutoVulFixPolicy, &out.AutoVulFixPolicy
		*out = make([]AutoVulFixPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaxUnavailable != nil {
		in, out := &in.MaxUnavailable, &out.MaxUnavailable
		*out = new(float64)
		**out = **in
	}
	if in.Surge != nil {
		in, out := &in.Surge, &out.Surge
		*out = new(float64)
		**out = **in
	}
	if in.SurgePercentage != nil {
		in, out := &in.SurgePercentage, &out.SurgePercentage
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagementParameters.
func (in *ManagementParameters) DeepCopy() *ManagementParameters {
	if in == nil {
		return nil
	}
	out := new(ManagementParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodesInitParameters) DeepCopyInto(out *MasterNodesInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodesInitParameters.
func (in *MasterNodesInitParameters) DeepCopy() *MasterNodesInitParameters {
	if in == nil {
		return nil
	}
	out := new(MasterNodesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodesObservation) DeepCopyInto(out *MasterNodesObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodesObservation.
func (in *MasterNodesObservation) DeepCopy() *MasterNodesObservation {
	if in == nil {
		return nil
	}
	out := new(MasterNodesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodesParameters) DeepCopyInto(out *MasterNodesParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodesParameters.
func (in *MasterNodesParameters) DeepCopy() *MasterNodesParameters {
	if in == nil {
		return nil
	}
	out := new(MasterNodesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OperationPolicyClusterAutoUpgradeInitParameters) DeepCopyInto(out *OperationPolicyClusterAutoUpgradeInitParameters) {
	*out = *in
	if in.Channel != nil {
		in, out := &in.Channel, &out.Channel
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OperationPolicyClusterAutoUpgradeInitParameters.
func (in *OperationPolicyClusterAutoUpgradeInitParameters) DeepCopy() *OperationPolicyClusterAutoUpgradeInitParameters {
	if in == nil {
		return nil
	}
	out := new(OperationPolicyClusterAutoUpgradeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OperationPolicyClusterAutoUpgradeObservation) DeepCopyInto(out *OperationPolicyClusterAutoUpgradeObservation) {
	*out = *in
	if in.Channel != nil {
		in, out := &in.Channel, &out.Channel
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OperationPolicyClusterAutoUpgradeObservation.
func (in *OperationPolicyClusterAutoUpgradeObservation) DeepCopy() *OperationPolicyClusterAutoUpgradeObservation {
	if in == nil {
		return nil
	}
	out := new(OperationPolicyClusterAutoUpgradeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OperationPolicyClusterAutoUpgradeParameters) DeepCopyInto(out *OperationPolicyClusterAutoUpgradeParameters) {
	*out = *in
	if in.Channel != nil {
		in, out := &in.Channel, &out.Channel
		*out = new(string)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OperationPolicyClusterAutoUpgradeParameters.
func (in *OperationPolicyClusterAutoUpgradeParameters) DeepCopy() *OperationPolicyClusterAutoUpgradeParameters {
	if in == nil {
		return nil
	}
	out := new(OperationPolicyClusterAutoUpgradeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OperationPolicyInitParameters) DeepCopyInto(out *OperationPolicyInitParameters) {
	*out = *in
	if in.ClusterAutoUpgrade != nil {
		in, out := &in.ClusterAutoUpgrade, &out.ClusterAutoUpgrade
		*out = make([]ClusterAutoUpgradeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OperationPolicyInitParameters.
func (in *OperationPolicyInitParameters) DeepCopy() *OperationPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(OperationPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OperationPolicyObservation) DeepCopyInto(out *OperationPolicyObservation) {
	*out = *in
	if in.ClusterAutoUpgrade != nil {
		in, out := &in.ClusterAutoUpgrade, &out.ClusterAutoUpgrade
		*out = make([]ClusterAutoUpgradeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OperationPolicyObservation.
func (in *OperationPolicyObservation) DeepCopy() *OperationPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(OperationPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OperationPolicyParameters) DeepCopyInto(out *OperationPolicyParameters) {
	*out = *in
	if in.ClusterAutoUpgrade != nil {
		in, out := &in.ClusterAutoUpgrade, &out.ClusterAutoUpgrade
		*out = make([]ClusterAutoUpgradeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OperationPolicyParameters.
func (in *OperationPolicyParameters) DeepCopy() *OperationPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(OperationPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionsInitParameters) DeepCopyInto(out *PermissionsInitParameters) {
	*out = *in
	if in.Cluster != nil {
		in, out := &in.Cluster, &out.Cluster
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRefs != nil {
		in, out := &in.ClusterIDRefs, &out.ClusterIDRefs
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.IsCustom != nil {
		in, out := &in.IsCustom, &out.IsCustom
		*out = new(bool)
		**out = **in
	}
	if in.IsRAMRole != nil {
		in, out := &in.IsRAMRole, &out.IsRAMRole
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.RoleIDRefs != nil {
		in, out := &in.RoleIDRefs, &out.RoleIDRefs
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RoleIDSelector != nil {
		in, out := &in.RoleIDSelector, &out.RoleIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.RoleName != nil {
		in, out := &in.RoleName, &out.RoleName
		*out = new(string)
		**out = **in
	}
	if in.RoleType != nil {
		in, out := &in.RoleType, &out.RoleType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionsInitParameters.
func (in *PermissionsInitParameters) DeepCopy() *PermissionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(PermissionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionsObservation) DeepCopyInto(out *PermissionsObservation) {
	*out = *in
	if in.Cluster != nil {
		in, out := &in.Cluster, &out.Cluster
		*out = new(string)
		**out = **in
	}
	if in.IsCustom != nil {
		in, out := &in.IsCustom, &out.IsCustom
		*out = new(bool)
		**out = **in
	}
	if in.IsRAMRole != nil {
		in, out := &in.IsRAMRole, &out.IsRAMRole
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.RoleName != nil {
		in, out := &in.RoleName, &out.RoleName
		*out = new(string)
		**out = **in
	}
	if in.RoleType != nil {
		in, out := &in.RoleType, &out.RoleType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionsObservation.
func (in *PermissionsObservation) DeepCopy() *PermissionsObservation {
	if in == nil {
		return nil
	}
	out := new(PermissionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionsParameters) DeepCopyInto(out *PermissionsParameters) {
	*out = *in
	if in.Cluster != nil {
		in, out := &in.Cluster, &out.Cluster
		*out = new(string)
		**out = **in
	}
	if in.ClusterIDRefs != nil {
		in, out := &in.ClusterIDRefs, &out.ClusterIDRefs
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.ClusterIDSelector != nil {
		in, out := &in.ClusterIDSelector, &out.ClusterIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.IsCustom != nil {
		in, out := &in.IsCustom, &out.IsCustom
		*out = new(bool)
		**out = **in
	}
	if in.IsRAMRole != nil {
		in, out := &in.IsRAMRole, &out.IsRAMRole
		*out = new(bool)
		**out = **in
	}
	if in.Namespace != nil {
		in, out := &in.Namespace, &out.Namespace
		*out = new(string)
		**out = **in
	}
	if in.RoleIDRefs != nil {
		in, out := &in.RoleIDRefs, &out.RoleIDRefs
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RoleIDSelector != nil {
		in, out := &in.RoleIDSelector, &out.RoleIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.RoleName != nil {
		in, out := &in.RoleName, &out.RoleName
		*out = new(string)
		**out = **in
	}
	if in.RoleType != nil {
		in, out := &in.RoleType, &out.RoleType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionsParameters.
func (in *PermissionsParameters) DeepCopy() *PermissionsParameters {
	if in == nil {
		return nil
	}
	out := new(PermissionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivatePoolOptionsInitParameters) DeepCopyInto(out *PrivatePoolOptionsInitParameters) {
	*out = *in
	if in.PrivatePoolOptionsID != nil {
		in, out := &in.PrivatePoolOptionsID, &out.PrivatePoolOptionsID
		*out = new(string)
		**out = **in
	}
	if in.PrivatePoolOptionsMatchCriteria != nil {
		in, out := &in.PrivatePoolOptionsMatchCriteria, &out.PrivatePoolOptionsMatchCriteria
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivatePoolOptionsInitParameters.
func (in *PrivatePoolOptionsInitParameters) DeepCopy() *PrivatePoolOptionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(PrivatePoolOptionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivatePoolOptionsObservation) DeepCopyInto(out *PrivatePoolOptionsObservation) {
	*out = *in
	if in.PrivatePoolOptionsID != nil {
		in, out := &in.PrivatePoolOptionsID, &out.PrivatePoolOptionsID
		*out = new(string)
		**out = **in
	}
	if in.PrivatePoolOptionsMatchCriteria != nil {
		in, out := &in.PrivatePoolOptionsMatchCriteria, &out.PrivatePoolOptionsMatchCriteria
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivatePoolOptionsObservation.
func (in *PrivatePoolOptionsObservation) DeepCopy() *PrivatePoolOptionsObservation {
	if in == nil {
		return nil
	}
	out := new(PrivatePoolOptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivatePoolOptionsParameters) DeepCopyInto(out *PrivatePoolOptionsParameters) {
	*out = *in
	if in.PrivatePoolOptionsID != nil {
		in, out := &in.PrivatePoolOptionsID, &out.PrivatePoolOptionsID
		*out = new(string)
		**out = **in
	}
	if in.PrivatePoolOptionsMatchCriteria != nil {
		in, out := &in.PrivatePoolOptionsMatchCriteria, &out.PrivatePoolOptionsMatchCriteria
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivatePoolOptionsParameters.
func (in *PrivatePoolOptionsParameters) DeepCopy() *PrivatePoolOptionsParameters {
	if in == nil {
		return nil
	}
	out := new(PrivatePoolOptionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReservedMemoryInitParameters) DeepCopyInto(out *ReservedMemoryInitParameters) {
	*out = *in
	if in.Limits != nil {
		in, out := &in.Limits, &out.Limits
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NumaNode != nil {
		in, out := &in.NumaNode, &out.NumaNode
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReservedMemoryInitParameters.
func (in *ReservedMemoryInitParameters) DeepCopy() *ReservedMemoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReservedMemoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReservedMemoryObservation) DeepCopyInto(out *ReservedMemoryObservation) {
	*out = *in
	if in.Limits != nil {
		in, out := &in.Limits, &out.Limits
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NumaNode != nil {
		in, out := &in.NumaNode, &out.NumaNode
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReservedMemoryObservation.
func (in *ReservedMemoryObservation) DeepCopy() *ReservedMemoryObservation {
	if in == nil {
		return nil
	}
	out := new(ReservedMemoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReservedMemoryParameters) DeepCopyInto(out *ReservedMemoryParameters) {
	*out = *in
	if in.Limits != nil {
		in, out := &in.Limits, &out.Limits
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.NumaNode != nil {
		in, out := &in.NumaNode, &out.NumaNode
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReservedMemoryParameters.
func (in *ReservedMemoryParameters) DeepCopy() *ReservedMemoryParameters {
	if in == nil {
		return nil
	}
	out := new(ReservedMemoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RollingPolicyInitParameters) DeepCopyInto(out *RollingPolicyInitParameters) {
	*out = *in
	if in.MaxParallelism != nil {
		in, out := &in.MaxParallelism, &out.MaxParallelism
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RollingPolicyInitParameters.
func (in *RollingPolicyInitParameters) DeepCopy() *RollingPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(RollingPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RollingPolicyObservation) DeepCopyInto(out *RollingPolicyObservation) {
	*out = *in
	if in.MaxParallelism != nil {
		in, out := &in.MaxParallelism, &out.MaxParallelism
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RollingPolicyObservation.
func (in *RollingPolicyObservation) DeepCopy() *RollingPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(RollingPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RollingPolicyParameters) DeepCopyInto(out *RollingPolicyParameters) {
	*out = *in
	if in.MaxParallelism != nil {
		in, out := &in.MaxParallelism, &out.MaxParallelism
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RollingPolicyParameters.
func (in *RollingPolicyParameters) DeepCopy() *RollingPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(RollingPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RolloutPolicyInitParameters) DeepCopyInto(out *RolloutPolicyInitParameters) {
	*out = *in
	if in.MaxUnavailable != nil {
		in, out := &in.MaxUnavailable, &out.MaxUnavailable
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RolloutPolicyInitParameters.
func (in *RolloutPolicyInitParameters) DeepCopy() *RolloutPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(RolloutPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RolloutPolicyObservation) DeepCopyInto(out *RolloutPolicyObservation) {
	*out = *in
	if in.MaxUnavailable != nil {
		in, out := &in.MaxUnavailable, &out.MaxUnavailable
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RolloutPolicyObservation.
func (in *RolloutPolicyObservation) DeepCopy() *RolloutPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(RolloutPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RolloutPolicyParameters) DeepCopyInto(out *RolloutPolicyParameters) {
	*out = *in
	if in.MaxUnavailable != nil {
		in, out := &in.MaxUnavailable, &out.MaxUnavailable
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RolloutPolicyParameters.
func (in *RolloutPolicyParameters) DeepCopy() *RolloutPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(RolloutPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RrsaMetadataInitParameters) DeepCopyInto(out *RrsaMetadataInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RrsaMetadataInitParameters.
func (in *RrsaMetadataInitParameters) DeepCopy() *RrsaMetadataInitParameters {
	if in == nil {
		return nil
	}
	out := new(RrsaMetadataInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RrsaMetadataObservation) DeepCopyInto(out *RrsaMetadataObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.RAMOidcProviderArn != nil {
		in, out := &in.RAMOidcProviderArn, &out.RAMOidcProviderArn
		*out = new(string)
		**out = **in
	}
	if in.RAMOidcProviderName != nil {
		in, out := &in.RAMOidcProviderName, &out.RAMOidcProviderName
		*out = new(string)
		**out = **in
	}
	if in.RrsaOidcIssuerURL != nil {
		in, out := &in.RrsaOidcIssuerURL, &out.RrsaOidcIssuerURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RrsaMetadataObservation.
func (in *RrsaMetadataObservation) DeepCopy() *RrsaMetadataObservation {
	if in == nil {
		return nil
	}
	out := new(RrsaMetadataObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RrsaMetadataParameters) DeepCopyInto(out *RrsaMetadataParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RrsaMetadataParameters.
func (in *RrsaMetadataParameters) DeepCopy() *RrsaMetadataParameters {
	if in == nil {
		return nil
	}
	out := new(RrsaMetadataParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScalingConfigInitParameters) DeepCopyInto(out *ScalingConfigInitParameters) {
	*out = *in
	if in.EIPBandwidth != nil {
		in, out := &in.EIPBandwidth, &out.EIPBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.EIPInternetChargeType != nil {
		in, out := &in.EIPInternetChargeType, &out.EIPInternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.IsBondEIP != nil {
		in, out := &in.IsBondEIP, &out.IsBondEIP
		*out = new(bool)
		**out = **in
	}
	if in.MaxSize != nil {
		in, out := &in.MaxSize, &out.MaxSize
		*out = new(float64)
		**out = **in
	}
	if in.MinSize != nil {
		in, out := &in.MinSize, &out.MinSize
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScalingConfigInitParameters.
func (in *ScalingConfigInitParameters) DeepCopy() *ScalingConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(ScalingConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScalingConfigObservation) DeepCopyInto(out *ScalingConfigObservation) {
	*out = *in
	if in.EIPBandwidth != nil {
		in, out := &in.EIPBandwidth, &out.EIPBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.EIPInternetChargeType != nil {
		in, out := &in.EIPInternetChargeType, &out.EIPInternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.IsBondEIP != nil {
		in, out := &in.IsBondEIP, &out.IsBondEIP
		*out = new(bool)
		**out = **in
	}
	if in.MaxSize != nil {
		in, out := &in.MaxSize, &out.MaxSize
		*out = new(float64)
		**out = **in
	}
	if in.MinSize != nil {
		in, out := &in.MinSize, &out.MinSize
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScalingConfigObservation.
func (in *ScalingConfigObservation) DeepCopy() *ScalingConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ScalingConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ScalingConfigParameters) DeepCopyInto(out *ScalingConfigParameters) {
	*out = *in
	if in.EIPBandwidth != nil {
		in, out := &in.EIPBandwidth, &out.EIPBandwidth
		*out = new(float64)
		**out = **in
	}
	if in.EIPInternetChargeType != nil {
		in, out := &in.EIPInternetChargeType, &out.EIPInternetChargeType
		*out = new(string)
		**out = **in
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.IsBondEIP != nil {
		in, out := &in.IsBondEIP, &out.IsBondEIP
		*out = new(bool)
		**out = **in
	}
	if in.MaxSize != nil {
		in, out := &in.MaxSize, &out.MaxSize
		*out = new(float64)
		**out = **in
	}
	if in.MinSize != nil {
		in, out := &in.MinSize, &out.MinSize
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ScalingConfigParameters.
func (in *ScalingConfigParameters) DeepCopy() *ScalingConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ScalingConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetes) DeepCopyInto(out *ServerlessKubernetes) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetes.
func (in *ServerlessKubernetes) DeepCopy() *ServerlessKubernetes {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetes)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ServerlessKubernetes) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesAddonsInitParameters) DeepCopyInto(out *ServerlessKubernetesAddonsInitParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesAddonsInitParameters.
func (in *ServerlessKubernetesAddonsInitParameters) DeepCopy() *ServerlessKubernetesAddonsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesAddonsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesAddonsObservation) DeepCopyInto(out *ServerlessKubernetesAddonsObservation) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesAddonsObservation.
func (in *ServerlessKubernetesAddonsObservation) DeepCopy() *ServerlessKubernetesAddonsObservation {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesAddonsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesAddonsParameters) DeepCopyInto(out *ServerlessKubernetesAddonsParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = new(string)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesAddonsParameters.
func (in *ServerlessKubernetesAddonsParameters) DeepCopy() *ServerlessKubernetesAddonsParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesAddonsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesDeleteOptionsInitParameters) DeepCopyInto(out *ServerlessKubernetesDeleteOptionsInitParameters) {
	*out = *in
	if in.DeleteMode != nil {
		in, out := &in.DeleteMode, &out.DeleteMode
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesDeleteOptionsInitParameters.
func (in *ServerlessKubernetesDeleteOptionsInitParameters) DeepCopy() *ServerlessKubernetesDeleteOptionsInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesDeleteOptionsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesDeleteOptionsObservation) DeepCopyInto(out *ServerlessKubernetesDeleteOptionsObservation) {
	*out = *in
	if in.DeleteMode != nil {
		in, out := &in.DeleteMode, &out.DeleteMode
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesDeleteOptionsObservation.
func (in *ServerlessKubernetesDeleteOptionsObservation) DeepCopy() *ServerlessKubernetesDeleteOptionsObservation {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesDeleteOptionsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesDeleteOptionsParameters) DeepCopyInto(out *ServerlessKubernetesDeleteOptionsParameters) {
	*out = *in
	if in.DeleteMode != nil {
		in, out := &in.DeleteMode, &out.DeleteMode
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesDeleteOptionsParameters.
func (in *ServerlessKubernetesDeleteOptionsParameters) DeepCopy() *ServerlessKubernetesDeleteOptionsParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesDeleteOptionsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesInitParameters) DeepCopyInto(out *ServerlessKubernetesInitParameters) {
	*out = *in
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]ServerlessKubernetesAddonsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterSpec != nil {
		in, out := &in.ClusterSpec, &out.ClusterSpec
		*out = new(string)
		**out = **in
	}
	if in.CreateV2Cluster != nil {
		in, out := &in.CreateV2Cluster, &out.CreateV2Cluster
		*out = new(bool)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeleteOptions != nil {
		in, out := &in.DeleteOptions, &out.DeleteOptions
		*out = make([]ServerlessKubernetesDeleteOptionsInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableRrsa != nil {
		in, out := &in.EnableRrsa, &out.EnableRrsa
		*out = new(bool)
		**out = **in
	}
	if in.EndpointPublicAccessEnabled != nil {
		in, out := &in.EndpointPublicAccessEnabled, &out.EndpointPublicAccessEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LoggingType != nil {
		in, out := &in.LoggingType, &out.LoggingType
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]ServerlessKubernetesMaintenanceWindowInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.OperationPolicy != nil {
		in, out := &in.OperationPolicy, &out.OperationPolicy
		*out = make([]ServerlessKubernetesOperationPolicyInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PrivateZone != nil {
		in, out := &in.PrivateZone, &out.PrivateZone
		*out = new(bool)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.ServiceDiscoveryTypes != nil {
		in, out := &in.ServiceDiscoveryTypes, &out.ServiceDiscoveryTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SlsProjectName != nil {
		in, out := &in.SlsProjectName, &out.SlsProjectName
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIDRef != nil {
		in, out := &in.VswitchIDRef, &out.VswitchIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchIDSelector != nil {
		in, out := &in.VswitchIDSelector, &out.VswitchIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VswitchIdsRefs != nil {
		in, out := &in.VswitchIdsRefs, &out.VswitchIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VswitchIdsSelector != nil {
		in, out := &in.VswitchIdsSelector, &out.VswitchIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesInitParameters.
func (in *ServerlessKubernetesInitParameters) DeepCopy() *ServerlessKubernetesInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesList) DeepCopyInto(out *ServerlessKubernetesList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ServerlessKubernetes, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesList.
func (in *ServerlessKubernetesList) DeepCopy() *ServerlessKubernetesList {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ServerlessKubernetesList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesMaintenanceWindowInitParameters) DeepCopyInto(out *ServerlessKubernetesMaintenanceWindowInitParameters) {
	*out = *in
	if in.Duration != nil {
		in, out := &in.Duration, &out.Duration
		*out = new(string)
		**out = **in
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaintenanceTime != nil {
		in, out := &in.MaintenanceTime, &out.MaintenanceTime
		*out = new(string)
		**out = **in
	}
	if in.WeeklyPeriod != nil {
		in, out := &in.WeeklyPeriod, &out.WeeklyPeriod
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesMaintenanceWindowInitParameters.
func (in *ServerlessKubernetesMaintenanceWindowInitParameters) DeepCopy() *ServerlessKubernetesMaintenanceWindowInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesMaintenanceWindowInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesMaintenanceWindowObservation) DeepCopyInto(out *ServerlessKubernetesMaintenanceWindowObservation) {
	*out = *in
	if in.Duration != nil {
		in, out := &in.Duration, &out.Duration
		*out = new(string)
		**out = **in
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaintenanceTime != nil {
		in, out := &in.MaintenanceTime, &out.MaintenanceTime
		*out = new(string)
		**out = **in
	}
	if in.WeeklyPeriod != nil {
		in, out := &in.WeeklyPeriod, &out.WeeklyPeriod
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesMaintenanceWindowObservation.
func (in *ServerlessKubernetesMaintenanceWindowObservation) DeepCopy() *ServerlessKubernetesMaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesMaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesMaintenanceWindowParameters) DeepCopyInto(out *ServerlessKubernetesMaintenanceWindowParameters) {
	*out = *in
	if in.Duration != nil {
		in, out := &in.Duration, &out.Duration
		*out = new(string)
		**out = **in
	}
	if in.Enable != nil {
		in, out := &in.Enable, &out.Enable
		*out = new(bool)
		**out = **in
	}
	if in.MaintenanceTime != nil {
		in, out := &in.MaintenanceTime, &out.MaintenanceTime
		*out = new(string)
		**out = **in
	}
	if in.WeeklyPeriod != nil {
		in, out := &in.WeeklyPeriod, &out.WeeklyPeriod
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesMaintenanceWindowParameters.
func (in *ServerlessKubernetesMaintenanceWindowParameters) DeepCopy() *ServerlessKubernetesMaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesMaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesObservation) DeepCopyInto(out *ServerlessKubernetesObservation) {
	*out = *in
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]ServerlessKubernetesAddonsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterSpec != nil {
		in, out := &in.ClusterSpec, &out.ClusterSpec
		*out = new(string)
		**out = **in
	}
	if in.CreateV2Cluster != nil {
		in, out := &in.CreateV2Cluster, &out.CreateV2Cluster
		*out = new(bool)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeleteOptions != nil {
		in, out := &in.DeleteOptions, &out.DeleteOptions
		*out = make([]ServerlessKubernetesDeleteOptionsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableRrsa != nil {
		in, out := &in.EnableRrsa, &out.EnableRrsa
		*out = new(bool)
		**out = **in
	}
	if in.EndpointPublicAccessEnabled != nil {
		in, out := &in.EndpointPublicAccessEnabled, &out.EndpointPublicAccessEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LoggingType != nil {
		in, out := &in.LoggingType, &out.LoggingType
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]ServerlessKubernetesMaintenanceWindowObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.OperationPolicy != nil {
		in, out := &in.OperationPolicy, &out.OperationPolicy
		*out = make([]ServerlessKubernetesOperationPolicyObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PrivateZone != nil {
		in, out := &in.PrivateZone, &out.PrivateZone
		*out = new(bool)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RrsaMetadata != nil {
		in, out := &in.RrsaMetadata, &out.RrsaMetadata
		*out = make([]ServerlessKubernetesRrsaMetadataObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.ServiceDiscoveryTypes != nil {
		in, out := &in.ServiceDiscoveryTypes, &out.ServiceDiscoveryTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SlsProjectName != nil {
		in, out := &in.SlsProjectName, &out.SlsProjectName
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesObservation.
func (in *ServerlessKubernetesObservation) DeepCopy() *ServerlessKubernetesObservation {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesOperationPolicyInitParameters) DeepCopyInto(out *ServerlessKubernetesOperationPolicyInitParameters) {
	*out = *in
	if in.ClusterAutoUpgrade != nil {
		in, out := &in.ClusterAutoUpgrade, &out.ClusterAutoUpgrade
		*out = make([]OperationPolicyClusterAutoUpgradeInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesOperationPolicyInitParameters.
func (in *ServerlessKubernetesOperationPolicyInitParameters) DeepCopy() *ServerlessKubernetesOperationPolicyInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesOperationPolicyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesOperationPolicyObservation) DeepCopyInto(out *ServerlessKubernetesOperationPolicyObservation) {
	*out = *in
	if in.ClusterAutoUpgrade != nil {
		in, out := &in.ClusterAutoUpgrade, &out.ClusterAutoUpgrade
		*out = make([]OperationPolicyClusterAutoUpgradeObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesOperationPolicyObservation.
func (in *ServerlessKubernetesOperationPolicyObservation) DeepCopy() *ServerlessKubernetesOperationPolicyObservation {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesOperationPolicyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesOperationPolicyParameters) DeepCopyInto(out *ServerlessKubernetesOperationPolicyParameters) {
	*out = *in
	if in.ClusterAutoUpgrade != nil {
		in, out := &in.ClusterAutoUpgrade, &out.ClusterAutoUpgrade
		*out = make([]OperationPolicyClusterAutoUpgradeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesOperationPolicyParameters.
func (in *ServerlessKubernetesOperationPolicyParameters) DeepCopy() *ServerlessKubernetesOperationPolicyParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesOperationPolicyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesParameters) DeepCopyInto(out *ServerlessKubernetesParameters) {
	*out = *in
	if in.Addons != nil {
		in, out := &in.Addons, &out.Addons
		*out = make([]ServerlessKubernetesAddonsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClientCert != nil {
		in, out := &in.ClientCert, &out.ClientCert
		*out = new(string)
		**out = **in
	}
	if in.ClientKey != nil {
		in, out := &in.ClientKey, &out.ClientKey
		*out = new(string)
		**out = **in
	}
	if in.ClusterCACert != nil {
		in, out := &in.ClusterCACert, &out.ClusterCACert
		*out = new(string)
		**out = **in
	}
	if in.ClusterSpec != nil {
		in, out := &in.ClusterSpec, &out.ClusterSpec
		*out = new(string)
		**out = **in
	}
	if in.CreateV2Cluster != nil {
		in, out := &in.CreateV2Cluster, &out.CreateV2Cluster
		*out = new(bool)
		**out = **in
	}
	if in.CustomSan != nil {
		in, out := &in.CustomSan, &out.CustomSan
		*out = new(string)
		**out = **in
	}
	if in.DeleteOptions != nil {
		in, out := &in.DeleteOptions, &out.DeleteOptions
		*out = make([]ServerlessKubernetesDeleteOptionsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.EnableRrsa != nil {
		in, out := &in.EnableRrsa, &out.EnableRrsa
		*out = new(bool)
		**out = **in
	}
	if in.EndpointPublicAccessEnabled != nil {
		in, out := &in.EndpointPublicAccessEnabled, &out.EndpointPublicAccessEnabled
		*out = new(bool)
		**out = **in
	}
	if in.ForceUpdate != nil {
		in, out := &in.ForceUpdate, &out.ForceUpdate
		*out = new(bool)
		**out = **in
	}
	if in.KubeConfig != nil {
		in, out := &in.KubeConfig, &out.KubeConfig
		*out = new(string)
		**out = **in
	}
	if in.LoadBalancerSpec != nil {
		in, out := &in.LoadBalancerSpec, &out.LoadBalancerSpec
		*out = new(string)
		**out = **in
	}
	if in.LoggingType != nil {
		in, out := &in.LoggingType, &out.LoggingType
		*out = new(string)
		**out = **in
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]ServerlessKubernetesMaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NewNATGateway != nil {
		in, out := &in.NewNATGateway, &out.NewNATGateway
		*out = new(bool)
		**out = **in
	}
	if in.OperationPolicy != nil {
		in, out := &in.OperationPolicy, &out.OperationPolicy
		*out = make([]ServerlessKubernetesOperationPolicyParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PrivateZone != nil {
		in, out := &in.PrivateZone, &out.PrivateZone
		*out = new(bool)
		**out = **in
	}
	if in.Region != nil {
		in, out := &in.Region, &out.Region
		*out = new(string)
		**out = **in
	}
	if in.ResourceGroupID != nil {
		in, out := &in.ResourceGroupID, &out.ResourceGroupID
		*out = new(string)
		**out = **in
	}
	if in.RetainResources != nil {
		in, out := &in.RetainResources, &out.RetainResources
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIDRef != nil {
		in, out := &in.SecurityGroupIDRef, &out.SecurityGroupIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.SecurityGroupIDSelector != nil {
		in, out := &in.SecurityGroupIDSelector, &out.SecurityGroupIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ServiceCidr != nil {
		in, out := &in.ServiceCidr, &out.ServiceCidr
		*out = new(string)
		**out = **in
	}
	if in.ServiceDiscoveryTypes != nil {
		in, out := &in.ServiceDiscoveryTypes, &out.ServiceDiscoveryTypes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SlsProjectName != nil {
		in, out := &in.SlsProjectName, &out.SlsProjectName
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				inVal := (*in)[key]
				in, out := &inVal, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TimeZone != nil {
		in, out := &in.TimeZone, &out.TimeZone
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCIDRef != nil {
		in, out := &in.VPCIDRef, &out.VPCIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VPCIDSelector != nil {
		in, out := &in.VPCIDSelector, &out.VPCIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.VswitchID != nil {
		in, out := &in.VswitchID, &out.VswitchID
		*out = new(string)
		**out = **in
	}
	if in.VswitchIDRef != nil {
		in, out := &in.VswitchIDRef, &out.VswitchIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchIDSelector != nil {
		in, out := &in.VswitchIDSelector, &out.VswitchIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.VswitchIds != nil {
		in, out := &in.VswitchIds, &out.VswitchIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.VswitchIdsRefs != nil {
		in, out := &in.VswitchIdsRefs, &out.VswitchIdsRefs
		*out = make([]v1.Reference, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.VswitchIdsSelector != nil {
		in, out := &in.VswitchIdsSelector, &out.VswitchIdsSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesParameters.
func (in *ServerlessKubernetesParameters) DeepCopy() *ServerlessKubernetesParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesRrsaMetadataInitParameters) DeepCopyInto(out *ServerlessKubernetesRrsaMetadataInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesRrsaMetadataInitParameters.
func (in *ServerlessKubernetesRrsaMetadataInitParameters) DeepCopy() *ServerlessKubernetesRrsaMetadataInitParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesRrsaMetadataInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesRrsaMetadataObservation) DeepCopyInto(out *ServerlessKubernetesRrsaMetadataObservation) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.RAMOidcProviderArn != nil {
		in, out := &in.RAMOidcProviderArn, &out.RAMOidcProviderArn
		*out = new(string)
		**out = **in
	}
	if in.RAMOidcProviderName != nil {
		in, out := &in.RAMOidcProviderName, &out.RAMOidcProviderName
		*out = new(string)
		**out = **in
	}
	if in.RrsaOidcIssuerURL != nil {
		in, out := &in.RrsaOidcIssuerURL, &out.RrsaOidcIssuerURL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesRrsaMetadataObservation.
func (in *ServerlessKubernetesRrsaMetadataObservation) DeepCopy() *ServerlessKubernetesRrsaMetadataObservation {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesRrsaMetadataObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesRrsaMetadataParameters) DeepCopyInto(out *ServerlessKubernetesRrsaMetadataParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesRrsaMetadataParameters.
func (in *ServerlessKubernetesRrsaMetadataParameters) DeepCopy() *ServerlessKubernetesRrsaMetadataParameters {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesRrsaMetadataParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesSpec) DeepCopyInto(out *ServerlessKubernetesSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesSpec.
func (in *ServerlessKubernetesSpec) DeepCopy() *ServerlessKubernetesSpec {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServerlessKubernetesStatus) DeepCopyInto(out *ServerlessKubernetesStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServerlessKubernetesStatus.
func (in *ServerlessKubernetesStatus) DeepCopy() *ServerlessKubernetesStatus {
	if in == nil {
		return nil
	}
	out := new(ServerlessKubernetesStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpotPriceLimitInitParameters) DeepCopyInto(out *SpotPriceLimitInitParameters) {
	*out = *in
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.PriceLimit != nil {
		in, out := &in.PriceLimit, &out.PriceLimit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpotPriceLimitInitParameters.
func (in *SpotPriceLimitInitParameters) DeepCopy() *SpotPriceLimitInitParameters {
	if in == nil {
		return nil
	}
	out := new(SpotPriceLimitInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpotPriceLimitObservation) DeepCopyInto(out *SpotPriceLimitObservation) {
	*out = *in
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.PriceLimit != nil {
		in, out := &in.PriceLimit, &out.PriceLimit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpotPriceLimitObservation.
func (in *SpotPriceLimitObservation) DeepCopy() *SpotPriceLimitObservation {
	if in == nil {
		return nil
	}
	out := new(SpotPriceLimitObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SpotPriceLimitParameters) DeepCopyInto(out *SpotPriceLimitParameters) {
	*out = *in
	if in.InstanceType != nil {
		in, out := &in.InstanceType, &out.InstanceType
		*out = new(string)
		**out = **in
	}
	if in.PriceLimit != nil {
		in, out := &in.PriceLimit, &out.PriceLimit
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SpotPriceLimitParameters.
func (in *SpotPriceLimitParameters) DeepCopy() *SpotPriceLimitParameters {
	if in == nil {
		return nil
	}
	out := new(SpotPriceLimitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsInitParameters) DeepCopyInto(out *TaintsInitParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsInitParameters.
func (in *TaintsInitParameters) DeepCopy() *TaintsInitParameters {
	if in == nil {
		return nil
	}
	out := new(TaintsInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsObservation) DeepCopyInto(out *TaintsObservation) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsObservation.
func (in *TaintsObservation) DeepCopy() *TaintsObservation {
	if in == nil {
		return nil
	}
	out := new(TaintsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaintsParameters) DeepCopyInto(out *TaintsParameters) {
	*out = *in
	if in.Effect != nil {
		in, out := &in.Effect, &out.Effect
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaintsParameters.
func (in *TaintsParameters) DeepCopy() *TaintsParameters {
	if in == nil {
		return nil
	}
	out := new(TaintsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TeeConfigInitParameters) DeepCopyInto(out *TeeConfigInitParameters) {
	*out = *in
	if in.TeeEnable != nil {
		in, out := &in.TeeEnable, &out.TeeEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TeeConfigInitParameters.
func (in *TeeConfigInitParameters) DeepCopy() *TeeConfigInitParameters {
	if in == nil {
		return nil
	}
	out := new(TeeConfigInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TeeConfigObservation) DeepCopyInto(out *TeeConfigObservation) {
	*out = *in
	if in.TeeEnable != nil {
		in, out := &in.TeeEnable, &out.TeeEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TeeConfigObservation.
func (in *TeeConfigObservation) DeepCopy() *TeeConfigObservation {
	if in == nil {
		return nil
	}
	out := new(TeeConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TeeConfigParameters) DeepCopyInto(out *TeeConfigParameters) {
	*out = *in
	if in.TeeEnable != nil {
		in, out := &in.TeeEnable, &out.TeeEnable
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TeeConfigParameters.
func (in *TeeConfigParameters) DeepCopy() *TeeConfigParameters {
	if in == nil {
		return nil
	}
	out := new(TeeConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TracingInitParameters) DeepCopyInto(out *TracingInitParameters) {
	*out = *in
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.SamplingRatePerMillion != nil {
		in, out := &in.SamplingRatePerMillion, &out.SamplingRatePerMillion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TracingInitParameters.
func (in *TracingInitParameters) DeepCopy() *TracingInitParameters {
	if in == nil {
		return nil
	}
	out := new(TracingInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TracingObservation) DeepCopyInto(out *TracingObservation) {
	*out = *in
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.SamplingRatePerMillion != nil {
		in, out := &in.SamplingRatePerMillion, &out.SamplingRatePerMillion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TracingObservation.
func (in *TracingObservation) DeepCopy() *TracingObservation {
	if in == nil {
		return nil
	}
	out := new(TracingObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TracingParameters) DeepCopyInto(out *TracingParameters) {
	*out = *in
	if in.Endpoint != nil {
		in, out := &in.Endpoint, &out.Endpoint
		*out = new(string)
		**out = **in
	}
	if in.SamplingRatePerMillion != nil {
		in, out := &in.SamplingRatePerMillion, &out.SamplingRatePerMillion
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TracingParameters.
func (in *TracingParameters) DeepCopy() *TracingParameters {
	if in == nil {
		return nil
	}
	out := new(TracingParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerDataDisksInitParameters) DeepCopyInto(out *WorkerDataDisksInitParameters) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerDataDisksInitParameters.
func (in *WorkerDataDisksInitParameters) DeepCopy() *WorkerDataDisksInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerDataDisksInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerDataDisksObservation) DeepCopyInto(out *WorkerDataDisksObservation) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerDataDisksObservation.
func (in *WorkerDataDisksObservation) DeepCopy() *WorkerDataDisksObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerDataDisksObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerDataDisksParameters) DeepCopyInto(out *WorkerDataDisksParameters) {
	*out = *in
	if in.AutoSnapshotPolicyID != nil {
		in, out := &in.AutoSnapshotPolicyID, &out.AutoSnapshotPolicyID
		*out = new(string)
		**out = **in
	}
	if in.Category != nil {
		in, out := &in.Category, &out.Category
		*out = new(string)
		**out = **in
	}
	if in.Device != nil {
		in, out := &in.Device, &out.Device
		*out = new(string)
		**out = **in
	}
	if in.Encrypted != nil {
		in, out := &in.Encrypted, &out.Encrypted
		*out = new(string)
		**out = **in
	}
	if in.KMSKeyID != nil {
		in, out := &in.KMSKeyID, &out.KMSKeyID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PerformanceLevel != nil {
		in, out := &in.PerformanceLevel, &out.PerformanceLevel
		*out = new(string)
		**out = **in
	}
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = new(string)
		**out = **in
	}
	if in.SnapshotID != nil {
		in, out := &in.SnapshotID, &out.SnapshotID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerDataDisksParameters.
func (in *WorkerDataDisksParameters) DeepCopy() *WorkerDataDisksParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerDataDisksParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerNodesInitParameters) DeepCopyInto(out *WorkerNodesInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerNodesInitParameters.
func (in *WorkerNodesInitParameters) DeepCopy() *WorkerNodesInitParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerNodesInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerNodesObservation) DeepCopyInto(out *WorkerNodesObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerNodesObservation.
func (in *WorkerNodesObservation) DeepCopy() *WorkerNodesObservation {
	if in == nil {
		return nil
	}
	out := new(WorkerNodesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *WorkerNodesParameters) DeepCopyInto(out *WorkerNodesParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new WorkerNodesParameters.
func (in *WorkerNodesParameters) DeepCopy() *WorkerNodesParameters {
	if in == nil {
		return nil
	}
	out := new(WorkerNodesParameters)
	in.DeepCopyInto(out)
	return out
}
