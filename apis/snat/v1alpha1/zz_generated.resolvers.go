// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/eip/v1alpha1"
	v1alpha11 "github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/nat/v1alpha1"
	v1alpha12 "github.com/crossplane-contrib/provider-upjet-alibabacloud/apis/vpc/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Entry.
func (mg *Entry) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnatIP),
		Extract:      resource.ExtractParamPath("ip_address", false),
		Reference:    mg.Spec.ForProvider.SnatIPRef,
		Selector:     mg.Spec.ForProvider.SnatIPSelector,
		To: reference.To{
			List:    &v1alpha1.AddressList{},
			Managed: &v1alpha1.Address{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SnatIP")
	}
	mg.Spec.ForProvider.SnatIP = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SnatIPRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SnatTableID),
		Extract:      resource.ExtractParamPath("snat_table_ids", true),
		Reference:    mg.Spec.ForProvider.SnatTableIDRef,
		Selector:     mg.Spec.ForProvider.SnatTableIDSelector,
		To: reference.To{
			List:    &v1alpha11.GatewayList{},
			Managed: &v1alpha11.Gateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SnatTableID")
	}
	mg.Spec.ForProvider.SnatTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SnatTableIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceVswitchID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SourceVswitchIDRef,
		Selector:     mg.Spec.ForProvider.SourceVswitchIDSelector,
		To: reference.To{
			List:    &v1alpha12.VswitchList{},
			Managed: &v1alpha12.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SourceVswitchID")
	}
	mg.Spec.ForProvider.SourceVswitchID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SourceVswitchIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnatIP),
		Extract:      resource.ExtractParamPath("ip_address", false),
		Reference:    mg.Spec.InitProvider.SnatIPRef,
		Selector:     mg.Spec.InitProvider.SnatIPSelector,
		To: reference.To{
			List:    &v1alpha1.AddressList{},
			Managed: &v1alpha1.Address{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SnatIP")
	}
	mg.Spec.InitProvider.SnatIP = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SnatIPRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SnatTableID),
		Extract:      resource.ExtractParamPath("snat_table_ids", true),
		Reference:    mg.Spec.InitProvider.SnatTableIDRef,
		Selector:     mg.Spec.InitProvider.SnatTableIDSelector,
		To: reference.To{
			List:    &v1alpha11.GatewayList{},
			Managed: &v1alpha11.Gateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SnatTableID")
	}
	mg.Spec.InitProvider.SnatTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SnatTableIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SourceVswitchID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.SourceVswitchIDRef,
		Selector:     mg.Spec.InitProvider.SourceVswitchIDSelector,
		To: reference.To{
			List:    &v1alpha12.VswitchList{},
			Managed: &v1alpha12.Vswitch{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SourceVswitchID")
	}
	mg.Spec.InitProvider.SourceVswitchID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SourceVswitchIDRef = rsp.ResolvedReference

	return nil
}
